
./Debug/asciiiii.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#define STK_VAL ((volatile unsigned int *)(0xE000E018))

void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );
void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 f9c7 	bl	20000396 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <delay_250ns>:

void delay_250ns( void ){
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	/* SystemCoreClock = 168000000 */
	*STK_CTRL = 0;
20000014:	4b0c      	ldr	r3, [pc, #48]	; (20000048 <delay_250ns+0x38>)
20000016:	2200      	movs	r2, #0
20000018:	601a      	str	r2, [r3, #0]
	*STK_LOAD = ( (168/4) -1 );
2000001a:	4b0c      	ldr	r3, [pc, #48]	; (2000004c <delay_250ns+0x3c>)
2000001c:	2229      	movs	r2, #41	; 0x29
2000001e:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;
20000020:	4b0b      	ldr	r3, [pc, #44]	; (20000050 <delay_250ns+0x40>)
20000022:	2200      	movs	r2, #0
20000024:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;
20000026:	4b08      	ldr	r3, [pc, #32]	; (20000048 <delay_250ns+0x38>)
20000028:	2205      	movs	r2, #5
2000002a:	601a      	str	r2, [r3, #0]
	while( (*STK_CTRL & 0x10000 )== 0 );
2000002c:	46c0      	nop			; (mov r8, r8)
2000002e:	4b06      	ldr	r3, [pc, #24]	; (20000048 <delay_250ns+0x38>)
20000030:	681a      	ldr	r2, [r3, #0]
20000032:	2380      	movs	r3, #128	; 0x80
20000034:	025b      	lsls	r3, r3, #9
20000036:	4013      	ands	r3, r2
20000038:	d0f9      	beq.n	2000002e <delay_250ns+0x1e>
		*STK_CTRL = 0;
2000003a:	4b03      	ldr	r3, [pc, #12]	; (20000048 <delay_250ns+0x38>)
2000003c:	2200      	movs	r2, #0
2000003e:	601a      	str	r2, [r3, #0]
}
20000040:	46c0      	nop			; (mov r8, r8)
20000042:	46bd      	mov	sp, r7
20000044:	bd80      	pop	{r7, pc}
20000046:	46c0      	nop			; (mov r8, r8)
20000048:	e000e010 	and	lr, r0, r0, lsl r0
2000004c:	e000e014 	and	lr, r0, r4, lsl r0
20000050:	e000e018 	and	lr, r0, r8, lsl r0

20000054 <delay_micro>:
void delay_micro(unsigned int us){
20000054:	b580      	push	{r7, lr}
20000056:	b082      	sub	sp, #8
20000058:	af00      	add	r7, sp, #0
2000005a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
	us = us / 1000;
	us++;
	#endif
	while( us > 0 ){
2000005c:	e00a      	b.n	20000074 <delay_micro+0x20>
		delay_250ns();
2000005e:	f7ff ffd7 	bl	20000010 <delay_250ns>
		delay_250ns();
20000062:	f7ff ffd5 	bl	20000010 <delay_250ns>
		delay_250ns();
20000066:	f7ff ffd3 	bl	20000010 <delay_250ns>
		delay_250ns();
2000006a:	f7ff ffd1 	bl	20000010 <delay_250ns>
		us--;
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	3b01      	subs	r3, #1
20000072:	607b      	str	r3, [r7, #4]
	while( us > 0 ){
20000074:	687b      	ldr	r3, [r7, #4]
20000076:	2b00      	cmp	r3, #0
20000078:	d1f1      	bne.n	2000005e <delay_micro+0xa>
	}
}
2000007a:	46c0      	nop			; (mov r8, r8)
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	b002      	add	sp, #8
20000082:	bd80      	pop	{r7, pc}

20000084 <delay_milli>:

void delay_milli(unsigned int ms){
20000084:	b580      	push	{r7, lr}
20000086:	b082      	sub	sp, #8
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
	ms = ms/1000;
	ms++;
	#endif
	while(ms > 0){
2000008c:	e007      	b.n	2000009e <delay_milli+0x1a>
		delay_micro(1000);
2000008e:	23fa      	movs	r3, #250	; 0xfa
20000090:	009b      	lsls	r3, r3, #2
20000092:	0018      	movs	r0, r3
20000094:	f7ff ffde 	bl	20000054 <delay_micro>
		ms--;
20000098:	687b      	ldr	r3, [r7, #4]
2000009a:	3b01      	subs	r3, #1
2000009c:	607b      	str	r3, [r7, #4]
	while(ms > 0){
2000009e:	687b      	ldr	r3, [r7, #4]
200000a0:	2b00      	cmp	r3, #0
200000a2:	d1f4      	bne.n	2000008e <delay_milli+0xa>
	}
}
200000a4:	46c0      	nop			; (mov r8, r8)
200000a6:	46c0      	nop			; (mov r8, r8)
200000a8:	46bd      	mov	sp, r7
200000aa:	b002      	add	sp, #8
200000ac:	bd80      	pop	{r7, pc}

200000ae <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set( unsigned char x )
{
200000ae:	b580      	push	{r7, lr}
200000b0:	b084      	sub	sp, #16
200000b2:	af00      	add	r7, sp, #0
200000b4:	0002      	movs	r2, r0
200000b6:	1dfb      	adds	r3, r7, #7
200000b8:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
200000ba:	4a0c      	ldr	r2, [pc, #48]	; (200000ec <ascii_ctrl_bit_set+0x3e>)
200000bc:	210f      	movs	r1, #15
200000be:	187b      	adds	r3, r7, r1
200000c0:	7812      	ldrb	r2, [r2, #0]
200000c2:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
200000c4:	1dfa      	adds	r2, r7, #7
200000c6:	187b      	adds	r3, r7, r1
200000c8:	7812      	ldrb	r2, [r2, #0]
200000ca:	781b      	ldrb	r3, [r3, #0]
200000cc:	4313      	orrs	r3, r2
200000ce:	b2da      	uxtb	r2, r3
200000d0:	0008      	movs	r0, r1
200000d2:	187b      	adds	r3, r7, r1
200000d4:	2104      	movs	r1, #4
200000d6:	430a      	orrs	r2, r1
200000d8:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
200000da:	4a04      	ldr	r2, [pc, #16]	; (200000ec <ascii_ctrl_bit_set+0x3e>)
200000dc:	183b      	adds	r3, r7, r0
200000de:	781b      	ldrb	r3, [r3, #0]
200000e0:	7013      	strb	r3, [r2, #0]
}
200000e2:	46c0      	nop			; (mov r8, r8)
200000e4:	46bd      	mov	sp, r7
200000e6:	b004      	add	sp, #16
200000e8:	bd80      	pop	{r7, pc}
200000ea:	46c0      	nop			; (mov r8, r8)
200000ec:	40021014 	andmi	r1, r2, r4, lsl r0

200000f0 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear( unsigned char x )
{
200000f0:	b580      	push	{r7, lr}
200000f2:	b084      	sub	sp, #16
200000f4:	af00      	add	r7, sp, #0
200000f6:	0002      	movs	r2, r0
200000f8:	1dfb      	adds	r3, r7, #7
200000fa:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = *GPIO_ODR_LOW;
200000fc:	4a0d      	ldr	r2, [pc, #52]	; (20000134 <ascii_ctrl_bit_clear+0x44>)
200000fe:	210f      	movs	r1, #15
20000100:	187b      	adds	r3, r7, r1
20000102:	7812      	ldrb	r2, [r2, #0]
20000104:	701a      	strb	r2, [r3, #0]
	c &= ( B_SELECT | ~x );
20000106:	1dfb      	adds	r3, r7, #7
20000108:	781b      	ldrb	r3, [r3, #0]
2000010a:	b25b      	sxtb	r3, r3
2000010c:	43db      	mvns	r3, r3
2000010e:	b25b      	sxtb	r3, r3
20000110:	2204      	movs	r2, #4
20000112:	4313      	orrs	r3, r2
20000114:	b25b      	sxtb	r3, r3
20000116:	187a      	adds	r2, r7, r1
20000118:	7812      	ldrb	r2, [r2, #0]
2000011a:	b252      	sxtb	r2, r2
2000011c:	4013      	ands	r3, r2
2000011e:	b25a      	sxtb	r2, r3
20000120:	187b      	adds	r3, r7, r1
20000122:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = c;
20000124:	4a03      	ldr	r2, [pc, #12]	; (20000134 <ascii_ctrl_bit_clear+0x44>)
20000126:	187b      	adds	r3, r7, r1
20000128:	781b      	ldrb	r3, [r3, #0]
2000012a:	7013      	strb	r3, [r2, #0]
}
2000012c:	46c0      	nop			; (mov r8, r8)
2000012e:	46bd      	mov	sp, r7
20000130:	b004      	add	sp, #16
20000132:	bd80      	pop	{r7, pc}
20000134:	40021014 	andmi	r1, r2, r4, lsl r0

20000138 <ascii_write_controller>:

void ascii_write_controller( unsigned char c )
{
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_E );
20000144:	2040      	movs	r0, #64	; 0x40
20000146:	f7ff ffb2 	bl	200000ae <ascii_ctrl_bit_set>
	*GPIO_ODR_HIGH = c;
2000014a:	4a06      	ldr	r2, [pc, #24]	; (20000164 <ascii_write_controller+0x2c>)
2000014c:	1dfb      	adds	r3, r7, #7
2000014e:	781b      	ldrb	r3, [r3, #0]
20000150:	7013      	strb	r3, [r2, #0]
	ascii_ctrl_bit_clear( B_E );
20000152:	2040      	movs	r0, #64	; 0x40
20000154:	f7ff ffcc 	bl	200000f0 <ascii_ctrl_bit_clear>
	delay_250ns();
20000158:	f7ff ff5a 	bl	20000010 <delay_250ns>
}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	46bd      	mov	sp, r7
20000160:	b002      	add	sp, #8
20000162:	bd80      	pop	{r7, pc}
20000164:	40021015 	andmi	r1, r2, r5, lsl r0

20000168 <ascii_read_controller>:

unsigned char ascii_read_controller( void )
{
20000168:	b580      	push	{r7, lr}
2000016a:	b082      	sub	sp, #8
2000016c:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set( B_E );
2000016e:	2040      	movs	r0, #64	; 0x40
20000170:	f7ff ff9d 	bl	200000ae <ascii_ctrl_bit_set>
	delay_250ns();
20000174:	f7ff ff4c 	bl	20000010 <delay_250ns>
	delay_250ns();
20000178:	f7ff ff4a 	bl	20000010 <delay_250ns>
	c = *GPIO_IDR_HIGH;
2000017c:	4a06      	ldr	r2, [pc, #24]	; (20000198 <ascii_read_controller+0x30>)
2000017e:	1dfb      	adds	r3, r7, #7
20000180:	7812      	ldrb	r2, [r2, #0]
20000182:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_E );
20000184:	2040      	movs	r0, #64	; 0x40
20000186:	f7ff ffb3 	bl	200000f0 <ascii_ctrl_bit_clear>
	return c;
2000018a:	1dfb      	adds	r3, r7, #7
2000018c:	781b      	ldrb	r3, [r3, #0]
}
2000018e:	0018      	movs	r0, r3
20000190:	46bd      	mov	sp, r7
20000192:	b002      	add	sp, #8
20000194:	bd80      	pop	{r7, pc}
20000196:	46c0      	nop			; (mov r8, r8)
20000198:	40021011 	andmi	r1, r2, r1, lsl r0

2000019c <ascii_read_status>:

unsigned char ascii_read_status(void)
{
2000019c:	b590      	push	{r4, r7, lr}
2000019e:	b083      	sub	sp, #12
200001a0:	af00      	add	r7, sp, #0
	unsigned char c;
	*GPIO_MODER = 0x00005555;
200001a2:	4b0b      	ldr	r3, [pc, #44]	; (200001d0 <ascii_read_status+0x34>)
200001a4:	4a0b      	ldr	r2, [pc, #44]	; (200001d4 <ascii_read_status+0x38>)
200001a6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RW );
200001a8:	2002      	movs	r0, #2
200001aa:	f7ff ff80 	bl	200000ae <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear( B_RS );
200001ae:	2001      	movs	r0, #1
200001b0:	f7ff ff9e 	bl	200000f0 <ascii_ctrl_bit_clear>
	c = ascii_read_controller( );
200001b4:	1dfc      	adds	r4, r7, #7
200001b6:	f7ff ffd7 	bl	20000168 <ascii_read_controller>
200001ba:	0003      	movs	r3, r0
200001bc:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER = 0x55555555;
200001be:	4b04      	ldr	r3, [pc, #16]	; (200001d0 <ascii_read_status+0x34>)
200001c0:	4a05      	ldr	r2, [pc, #20]	; (200001d8 <ascii_read_status+0x3c>)
200001c2:	601a      	str	r2, [r3, #0]
	return c;
200001c4:	1dfb      	adds	r3, r7, #7
200001c6:	781b      	ldrb	r3, [r3, #0]
}
200001c8:	0018      	movs	r0, r3
200001ca:	46bd      	mov	sp, r7
200001cc:	b003      	add	sp, #12
200001ce:	bd90      	pop	{r4, r7, pc}
200001d0:	40021000 	andmi	r1, r2, r0
200001d4:	00005555 	andeq	r5, r0, r5, asr r5
200001d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001dc <ascii_read_data>:

unsigned char ascii_read_data(void)
{
200001dc:	b590      	push	{r4, r7, lr}
200001de:	b083      	sub	sp, #12
200001e0:	af00      	add	r7, sp, #0
	*GPIO_MODER = 0x00005555;
200001e2:	4b0b      	ldr	r3, [pc, #44]	; (20000210 <ascii_read_data+0x34>)
200001e4:	4a0b      	ldr	r2, [pc, #44]	; (20000214 <ascii_read_data+0x38>)
200001e6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
200001e8:	2001      	movs	r0, #1
200001ea:	f7ff ff60 	bl	200000ae <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
200001ee:	2002      	movs	r0, #2
200001f0:	f7ff ff5d 	bl	200000ae <ascii_ctrl_bit_set>
	unsigned char rv = ascii_read_controller();
200001f4:	1dfc      	adds	r4, r7, #7
200001f6:	f7ff ffb7 	bl	20000168 <ascii_read_controller>
200001fa:	0003      	movs	r3, r0
200001fc:	7023      	strb	r3, [r4, #0]
	*GPIO_MODER = 0x55555555;
200001fe:	4b04      	ldr	r3, [pc, #16]	; (20000210 <ascii_read_data+0x34>)
20000200:	4a05      	ldr	r2, [pc, #20]	; (20000218 <ascii_read_data+0x3c>)
20000202:	601a      	str	r2, [r3, #0]
	return rv;
20000204:	1dfb      	adds	r3, r7, #7
20000206:	781b      	ldrb	r3, [r3, #0]
}
20000208:	0018      	movs	r0, r3
2000020a:	46bd      	mov	sp, r7
2000020c:	b003      	add	sp, #12
2000020e:	bd90      	pop	{r4, r7, pc}
20000210:	40021000 	andmi	r1, r2, r0
20000214:	00005555 	andeq	r5, r0, r5, asr r5
20000218:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000021c <ascii_write_cmd>:

void ascii_write_cmd (unsigned char command)
{
2000021c:	b580      	push	{r7, lr}
2000021e:	b082      	sub	sp, #8
20000220:	af00      	add	r7, sp, #0
20000222:	0002      	movs	r2, r0
20000224:	1dfb      	adds	r3, r7, #7
20000226:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear( B_RS );
20000228:	2001      	movs	r0, #1
2000022a:	f7ff ff61 	bl	200000f0 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear( B_RW );
2000022e:	2002      	movs	r0, #2
20000230:	f7ff ff5e 	bl	200000f0 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000234:	1dfb      	adds	r3, r7, #7
20000236:	781b      	ldrb	r3, [r3, #0]
20000238:	0018      	movs	r0, r3
2000023a:	f7ff ff7d 	bl	20000138 <ascii_write_controller>
}
2000023e:	46c0      	nop			; (mov r8, r8)
20000240:	46bd      	mov	sp, r7
20000242:	b002      	add	sp, #8
20000244:	bd80      	pop	{r7, pc}

20000246 <ascii_write_data>:

void ascii_write_data (unsigned char data)
{
20000246:	b580      	push	{r7, lr}
20000248:	b082      	sub	sp, #8
2000024a:	af00      	add	r7, sp, #0
2000024c:	0002      	movs	r2, r0
2000024e:	1dfb      	adds	r3, r7, #7
20000250:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set( B_RS );
20000252:	2001      	movs	r0, #1
20000254:	f7ff ff2b 	bl	200000ae <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear( B_RW );
20000258:	2002      	movs	r0, #2
2000025a:	f7ff ff49 	bl	200000f0 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000025e:	1dfb      	adds	r3, r7, #7
20000260:	781b      	ldrb	r3, [r3, #0]
20000262:	0018      	movs	r0, r3
20000264:	f7ff ff68 	bl	20000138 <ascii_write_controller>
}
20000268:	46c0      	nop			; (mov r8, r8)
2000026a:	46bd      	mov	sp, r7
2000026c:	b002      	add	sp, #8
2000026e:	bd80      	pop	{r7, pc}

20000270 <ascii_command>:

void ascii_command(unsigned char command){
20000270:	b580      	push	{r7, lr}
20000272:	b082      	sub	sp, #8
20000274:	af00      	add	r7, sp, #0
20000276:	0002      	movs	r2, r0
20000278:	1dfb      	adds	r3, r7, #7
2000027a:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80); //vänta tills displayen kan ta kommando
2000027c:	46c0      	nop			; (mov r8, r8)
2000027e:	f7ff ff8d 	bl	2000019c <ascii_read_status>
20000282:	0003      	movs	r3, r0
20000284:	001a      	movs	r2, r3
20000286:	2380      	movs	r3, #128	; 0x80
20000288:	4013      	ands	r3, r2
2000028a:	2b80      	cmp	r3, #128	; 0x80
2000028c:	d0f7      	beq.n	2000027e <ascii_command+0xe>
	delay_micro(8);
2000028e:	2008      	movs	r0, #8
20000290:	f7ff fee0 	bl	20000054 <delay_micro>
	ascii_write_cmd(command);
20000294:	1dfb      	adds	r3, r7, #7
20000296:	781b      	ldrb	r3, [r3, #0]
20000298:	0018      	movs	r0, r3
2000029a:	f7ff ffbf 	bl	2000021c <ascii_write_cmd>
}
2000029e:	46c0      	nop			; (mov r8, r8)
200002a0:	46bd      	mov	sp, r7
200002a2:	b002      	add	sp, #8
200002a4:	bd80      	pop	{r7, pc}

200002a6 <ascii_write_char>:

void ascii_write_char (unsigned char chr)
{
200002a6:	b580      	push	{r7, lr}
200002a8:	b082      	sub	sp, #8
200002aa:	af00      	add	r7, sp, #0
200002ac:	0002      	movs	r2, r0
200002ae:	1dfb      	adds	r3, r7, #7
200002b0:	701a      	strb	r2, [r3, #0]
	while(1)
		if(ascii_read_status)
		{
			delay_micro(8);
200002b2:	2008      	movs	r0, #8
200002b4:	f7ff fece 	bl	20000054 <delay_micro>
			ascii_write_data(chr);
200002b8:	1dfb      	adds	r3, r7, #7
200002ba:	781b      	ldrb	r3, [r3, #0]
200002bc:	0018      	movs	r0, r3
200002be:	f7ff ffc2 	bl	20000246 <ascii_write_data>
			delay_micro(43);
200002c2:	202b      	movs	r0, #43	; 0x2b
200002c4:	f7ff fec6 	bl	20000054 <delay_micro>
			break;
200002c8:	46c0      	nop			; (mov r8, r8)
		}
}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	46bd      	mov	sp, r7
200002ce:	b002      	add	sp, #8
200002d0:	bd80      	pop	{r7, pc}

200002d2 <function_set>:
void function_set(void){
200002d2:	b580      	push	{r7, lr}
200002d4:	af00      	add	r7, sp, #0
	ascii_command(0x38); //2 rader, 5x8 punkter
200002d6:	2038      	movs	r0, #56	; 0x38
200002d8:	f7ff ffca 	bl	20000270 <ascii_command>
	delay_micro(39);
200002dc:	2027      	movs	r0, #39	; 0x27
200002de:	f7ff feb9 	bl	20000054 <delay_micro>
}
200002e2:	46c0      	nop			; (mov r8, r8)
200002e4:	46bd      	mov	sp, r7
200002e6:	bd80      	pop	{r7, pc}

200002e8 <display_control>:

void display_control(void){
200002e8:	b580      	push	{r7, lr}
200002ea:	af00      	add	r7, sp, #0
	ascii_command(0xE); //tänd display, tänd markör, konstant visning
200002ec:	200e      	movs	r0, #14
200002ee:	f7ff ffbf 	bl	20000270 <ascii_command>
	delay_micro(39);
200002f2:	2027      	movs	r0, #39	; 0x27
200002f4:	f7ff feae 	bl	20000054 <delay_micro>
}
200002f8:	46c0      	nop			; (mov r8, r8)
200002fa:	46bd      	mov	sp, r7
200002fc:	bd80      	pop	{r7, pc}

200002fe <clear_display>:

void clear_display(void){
200002fe:	b580      	push	{r7, lr}
20000300:	af00      	add	r7, sp, #0
	ascii_command(0x1); 
20000302:	2001      	movs	r0, #1
20000304:	f7ff ffb4 	bl	20000270 <ascii_command>
	delay_milli(2);
20000308:	2002      	movs	r0, #2
2000030a:	f7ff febb 	bl	20000084 <delay_milli>
}
2000030e:	46c0      	nop			; (mov r8, r8)
20000310:	46bd      	mov	sp, r7
20000312:	bd80      	pop	{r7, pc}

20000314 <entry_mode_set>:

void entry_mode_set(void){
20000314:	b580      	push	{r7, lr}
20000316:	af00      	add	r7, sp, #0
	ascii_command(0x4); //adressering med ''increment'', inget skift av adressbufferten
20000318:	2004      	movs	r0, #4
2000031a:	f7ff ffa9 	bl	20000270 <ascii_command>
}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	46bd      	mov	sp, r7
20000322:	bd80      	pop	{r7, pc}

20000324 <ascii_init>:

void ascii_init(void)
{
20000324:	b580      	push	{r7, lr}
20000326:	af00      	add	r7, sp, #0
	function_set();
20000328:	f7ff ffd3 	bl	200002d2 <function_set>
	display_control();
2000032c:	f7ff ffdc 	bl	200002e8 <display_control>
	clear_display();
20000330:	f7ff ffe5 	bl	200002fe <clear_display>
	entry_mode_set();
20000334:	f7ff ffee 	bl	20000314 <entry_mode_set>
}
20000338:	46c0      	nop			; (mov r8, r8)
2000033a:	46bd      	mov	sp, r7
2000033c:	bd80      	pop	{r7, pc}

2000033e <init_app>:

void init_app(void)
{
2000033e:	b580      	push	{r7, lr}
20000340:	af00      	add	r7, sp, #0
	*GPIO_MODER=0x00005555;
20000342:	4b03      	ldr	r3, [pc, #12]	; (20000350 <init_app+0x12>)
20000344:	4a03      	ldr	r2, [pc, #12]	; (20000354 <init_app+0x16>)
20000346:	601a      	str	r2, [r3, #0]
}
20000348:	46c0      	nop			; (mov r8, r8)
2000034a:	46bd      	mov	sp, r7
2000034c:	bd80      	pop	{r7, pc}
2000034e:	46c0      	nop			; (mov r8, r8)
20000350:	40021000 	andmi	r1, r2, r0
20000354:	00005555 	andeq	r5, r0, r5, asr r5

20000358 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y)
{
20000358:	b580      	push	{r7, lr}
2000035a:	b084      	sub	sp, #16
2000035c:	af00      	add	r7, sp, #0
2000035e:	6078      	str	r0, [r7, #4]
20000360:	6039      	str	r1, [r7, #0]
	int address = x-1;
20000362:	687b      	ldr	r3, [r7, #4]
20000364:	3b01      	subs	r3, #1
20000366:	60fb      	str	r3, [r7, #12]
	if(y==2)
20000368:	683b      	ldr	r3, [r7, #0]
2000036a:	2b02      	cmp	r3, #2
2000036c:	d102      	bne.n	20000374 <ascii_gotoxy+0x1c>
	{
		address = address + 0x40;
2000036e:	68fb      	ldr	r3, [r7, #12]
20000370:	3340      	adds	r3, #64	; 0x40
20000372:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80|address);
20000374:	68fb      	ldr	r3, [r7, #12]
20000376:	b25b      	sxtb	r3, r3
20000378:	2280      	movs	r2, #128	; 0x80
2000037a:	4252      	negs	r2, r2
2000037c:	4313      	orrs	r3, r2
2000037e:	b25b      	sxtb	r3, r3
20000380:	b2db      	uxtb	r3, r3
20000382:	0018      	movs	r0, r3
20000384:	f7ff ff4a 	bl	2000021c <ascii_write_cmd>
	delay_micro(39);
20000388:	2027      	movs	r0, #39	; 0x27
2000038a:	f7ff fe63 	bl	20000054 <delay_micro>
}
2000038e:	46c0      	nop			; (mov r8, r8)
20000390:	46bd      	mov	sp, r7
20000392:	b004      	add	sp, #16
20000394:	bd80      	pop	{r7, pc}

20000396 <main>:


int main(int argc, char **argv)
{
20000396:	b5b0      	push	{r4, r5, r7, lr}
20000398:	b08c      	sub	sp, #48	; 0x30
2000039a:	af00      	add	r7, sp, #0
2000039c:	6078      	str	r0, [r7, #4]
2000039e:	6039      	str	r1, [r7, #0]
	char *s;
	char test1[]="Alfanumerisk";
200003a0:	241c      	movs	r4, #28
200003a2:	193b      	adds	r3, r7, r4
200003a4:	4a1d      	ldr	r2, [pc, #116]	; (2000041c <main+0x86>)
200003a6:	ca23      	ldmia	r2!, {r0, r1, r5}
200003a8:	c323      	stmia	r3!, {r0, r1, r5}
200003aa:	7812      	ldrb	r2, [r2, #0]
200003ac:	701a      	strb	r2, [r3, #0]
	char test2[]="Display - test";
200003ae:	230c      	movs	r3, #12
200003b0:	18fb      	adds	r3, r7, r3
200003b2:	4a1b      	ldr	r2, [pc, #108]	; (20000420 <main+0x8a>)
200003b4:	ca23      	ldmia	r2!, {r0, r1, r5}
200003b6:	c323      	stmia	r3!, {r0, r1, r5}
200003b8:	8811      	ldrh	r1, [r2, #0]
200003ba:	8019      	strh	r1, [r3, #0]
200003bc:	7892      	ldrb	r2, [r2, #2]
200003be:	709a      	strb	r2, [r3, #2]
	
	init_app();
200003c0:	f7ff ffbd 	bl	2000033e <init_app>
	ascii_init();
200003c4:	f7ff ffae 	bl	20000324 <ascii_init>
	ascii_gotoxy(1,1);
200003c8:	2101      	movs	r1, #1
200003ca:	2001      	movs	r0, #1
200003cc:	f7ff ffc4 	bl	20000358 <ascii_gotoxy>
	s=test1;
200003d0:	193b      	adds	r3, r7, r4
200003d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*s)
200003d4:	e006      	b.n	200003e4 <main+0x4e>
	{
		ascii_write_char(*s++);
200003d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200003d8:	1c5a      	adds	r2, r3, #1
200003da:	62fa      	str	r2, [r7, #44]	; 0x2c
200003dc:	781b      	ldrb	r3, [r3, #0]
200003de:	0018      	movs	r0, r3
200003e0:	f7ff ff61 	bl	200002a6 <ascii_write_char>
	while(*s)
200003e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200003e6:	781b      	ldrb	r3, [r3, #0]
200003e8:	2b00      	cmp	r3, #0
200003ea:	d1f4      	bne.n	200003d6 <main+0x40>
	}
	
	ascii_gotoxy(1,2);
200003ec:	2102      	movs	r1, #2
200003ee:	2001      	movs	r0, #1
200003f0:	f7ff ffb2 	bl	20000358 <ascii_gotoxy>
	s = test2;
200003f4:	230c      	movs	r3, #12
200003f6:	18fb      	adds	r3, r7, r3
200003f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(*s){
200003fa:	e006      	b.n	2000040a <main+0x74>
		ascii_write_char(*s++);
200003fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
200003fe:	1c5a      	adds	r2, r3, #1
20000400:	62fa      	str	r2, [r7, #44]	; 0x2c
20000402:	781b      	ldrb	r3, [r3, #0]
20000404:	0018      	movs	r0, r3
20000406:	f7ff ff4e 	bl	200002a6 <ascii_write_char>
	while(*s){
2000040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
2000040c:	781b      	ldrb	r3, [r3, #0]
2000040e:	2b00      	cmp	r3, #0
20000410:	d1f4      	bne.n	200003fc <main+0x66>
	}
	return 0;
20000412:	2300      	movs	r3, #0
}
20000414:	0018      	movs	r0, r3
20000416:	46bd      	mov	sp, r7
20000418:	b00c      	add	sp, #48	; 0x30
2000041a:	bdb0      	pop	{r4, r5, r7, pc}
2000041c:	20000424 	andcs	r0, r0, r4, lsr #8
20000420:	20000434 	andcs	r0, r0, r4, lsr r4
20000424:	61666c41 	cmnvs	r6, r1, asr #24
20000428:	656d756e 	strbvs	r7, [sp, #-1390]!	; 0xfffffa92
2000042c:	6b736972 	blvs	21cda9fc <main+0x1cda666>
20000430:	00000000 	andeq	r0, r0, r0
20000434:	70736944 	rsbsvc	r6, r3, r4, asr #18
20000438:	2079616c 	rsbscs	r6, r9, ip, ror #2
2000043c:	6574202d 	ldrbvs	r2, [r4, #-45]!	; 0xffffffd3
20000440:	00007473 	andeq	r7, r0, r3, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	0000037f 	andeq	r0, r0, pc, ror r3
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000063 	andeq	r0, r0, r3, rrx
  10:	00018d0c 	andeq	r8, r1, ip, lsl #26
  14:	00021600 	andeq	r1, r2, r0, lsl #12
	...
  24:	01640200 	cmneq	r4, r0, lsl #4
  28:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
  2c:	00008905 	andeq	r8, r0, r5, lsl #18
  30:	00039600 	andeq	r9, r3, r0, lsl #12
  34:	00008e20 	andeq	r8, r0, r0, lsr #28
  38:	899c0100 	ldmibhi	ip, {r8}
  3c:	03000000 	movweq	r0, #0
  40:	000001d6 	ldrdeq	r0, [r0], -r6
  44:	890ec901 	stmdbhi	lr, {r0, r8, fp, lr, pc}
  48:	02000000 	andeq	r0, r0, #0
  4c:	60034491 	mulvs	r3, r1, r4
  50:	01000002 	tsteq	r0, r2
  54:	00901bc9 	addseq	r1, r0, r9, asr #23
  58:	91020000 	mrsls	r0, (UNDEF: 2)
  5c:	00730440 	rsbseq	r0, r3, r0, asr #8
  60:	9608cb01 	strls	ip, [r8], -r1, lsl #22
  64:	02000000 	andeq	r0, r0, #0
  68:	db056c91 	blle	15b2b4 <startup-0x1fea4d4c>
  6c:	01000001 	tsteq	r0, r1
  70:	00a307cc 	adceq	r0, r3, ip, asr #15
  74:	91020000 	mrsls	r0, (UNDEF: 2)
  78:	01e1055c 	mvneq	r0, ip, asr r5
  7c:	cd010000 	stcgt	0, cr0, [r1, #-0]
  80:	0000ba07 	andeq	fp, r0, r7, lsl #20
  84:	4c910200 	lfmmi	f0, 4, [r1], {0}
  88:	05040600 	streq	r0, [r4, #-1536]	; 0xfffffa00
  8c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  90:	00960407 	addseq	r0, r6, r7, lsl #8
  94:	04070000 	streq	r0, [r7], #-0
  98:	0000009c 	muleq	r0, ip, r0
  9c:	5f080108 	svcpl	0x00080108
  a0:	09000001 	stmdbeq	r0, {r0}
  a4:	0000009c 	muleq	r0, ip, r0
  a8:	000000b3 	strheq	r0, [r0], -r3
  ac:	0000b30a 	andeq	fp, r0, sl, lsl #6
  b0:	08000c00 	stmdaeq	r0, {sl, fp}
  b4:	00190704 	andseq	r0, r9, r4, lsl #14
  b8:	9c090000 	stcls	0, cr0, [r9], {-0}
  bc:	ca000000 	bgt	c4 <startup-0x1fffff3c>
  c0:	0a000000 	beq	c8 <startup-0x1fffff38>
  c4:	000000b3 	strheq	r0, [r0], -r3
  c8:	0c0b000e 	stceq	0, cr0, [fp], {14}
  cc:	01000000 	mrseq	r0, (UNDEF: 0)
  d0:	035806bd 	cmpeq	r8, #198180864	; 0xbd00000
  d4:	003e2000 	eorseq	r2, lr, r0
  d8:	9c010000 	stcls	0, cr0, [r1], {-0}
  dc:	0000010a 	andeq	r0, r0, sl, lsl #2
  e0:	0100780c 	tsteq	r0, ip, lsl #16
  e4:	008917bd 			; <UNDEFINED> instruction: 0x008917bd
  e8:	91020000 	mrsls	r0, (UNDEF: 2)
  ec:	00790c6c 	rsbseq	r0, r9, ip, ror #24
  f0:	891ebd01 	ldmdbhi	lr, {r0, r8, sl, fp, ip, sp, pc}
  f4:	02000000 	andeq	r0, r0, #0
  f8:	1c056891 	stcne	8, cr6, [r5], {145}	; 0x91
  fc:	01000001 	tsteq	r0, r1
 100:	008906bf 			; <UNDEFINED> instruction: 0x008906bf
 104:	91020000 	mrsls	r0, (UNDEF: 2)
 108:	840d0074 	strhi	r0, [sp], #-116	; 0xffffff8c
 10c:	01000001 	tsteq	r0, r1
 110:	033e06b8 	teqeq	lr, #184, 12	; 0xb800000
 114:	001a2000 	andseq	r2, sl, r0
 118:	9c010000 	stcls	0, cr0, [r1], {-0}
 11c:	0002650e 	andeq	r6, r2, lr, lsl #10
 120:	06b00100 	ldrteq	r0, [r0], r0, lsl #2
 124:	20000324 	andcs	r0, r0, r4, lsr #6
 128:	0000001a 	andeq	r0, r0, sl, lsl r0
 12c:	070e9c01 	streq	r9, [lr, -r1, lsl #24]
 130:	01000002 	tsteq	r0, r2
 134:	031406ac 	tsteq	r4, #172, 12	; 0xac00000
 138:	00102000 	andseq	r2, r0, r0
 13c:	9c010000 	stcls	0, cr0, [r1], {-0}
 140:	0000f10e 	andeq	pc, r0, lr, lsl #2
 144:	06a70100 	strteq	r0, [r7], r0, lsl #2
 148:	200002fe 	strdcs	r0, [r0], -lr
 14c:	00000016 	andeq	r0, r0, r6, lsl r0
 150:	e70e9c01 	str	r9, [lr, -r1, lsl #24]
 154:	01000001 	tsteq	r0, r1
 158:	02e806a2 	rsceq	r0, r8, #169869312	; 0xa200000
 15c:	00162000 	andseq	r2, r6, r0
 160:	9c010000 	stcls	0, cr0, [r1], {-0}
 164:	0001770e 	andeq	r7, r1, lr, lsl #14
 168:	069d0100 	ldreq	r0, [sp], r0, lsl #2
 16c:	200002d2 	ldrdcs	r0, [r0], -r2
 170:	00000016 	andeq	r0, r0, r6, lsl r0
 174:	520b9c01 	andpl	r9, fp, #256	; 0x100
 178:	01000000 	mrseq	r0, (UNDEF: 0)
 17c:	02a60692 	adceq	r0, r6, #153092096	; 0x9200000
 180:	002c2000 	eoreq	r2, ip, r0
 184:	9c010000 	stcls	0, cr0, [r1], {-0}
 188:	0000019c 	muleq	r0, ip, r1
 18c:	7268630c 	rsbvc	r6, r8, #12, 6	; 0x30000000
 190:	26920100 	ldrcs	r0, [r2], r0, lsl #2
 194:	0000019c 	muleq	r0, ip, r1
 198:	00779102 	rsbseq	r9, r7, r2, lsl #2
 19c:	56080108 	strpl	r0, [r8], -r8, lsl #2
 1a0:	0b000001 	bleq	1ac <startup-0x1ffffe54>
 1a4:	00000169 	andeq	r0, r0, r9, ror #2
 1a8:	70068c01 	andvc	r8, r6, r1, lsl #24
 1ac:	36200002 	strtcc	r0, [r0], -r2
 1b0:	01000000 	mrseq	r0, (UNDEF: 0)
 1b4:	0001c99c 	muleq	r1, ip, r9
 1b8:	016f0300 	cmneq	pc, r0, lsl #6
 1bc:	8c010000 	stchi	0, cr0, [r1], {-0}
 1c0:	00019c22 	andeq	r9, r1, r2, lsr #24
 1c4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1c8:	00ff0b00 	rscseq	r0, pc, r0, lsl #22
 1cc:	85010000 	strhi	r0, [r1, #-0]
 1d0:	00024606 	andeq	r4, r2, r6, lsl #12
 1d4:	00002a20 	andeq	r2, r0, r0, lsr #20
 1d8:	ef9c0100 	svc	0x009c0100
 1dc:	03000001 	movweq	r0, #1
 1e0:	00000145 	andeq	r0, r0, r5, asr #2
 1e4:	9c268501 	cfstr32ls	mvfx8, [r6], #-4
 1e8:	02000001 	andeq	r0, r0, #1
 1ec:	0b007791 	bleq	1e038 <startup-0x1ffe1fc8>
 1f0:	000001f7 	strdeq	r0, [r0], -r7
 1f4:	1c067e01 	stcne	14, cr7, [r6], {1}
 1f8:	2a200002 	bcs	800208 <startup-0x1f7ffdf8>
 1fc:	01000000 	mrseq	r0, (UNDEF: 0)
 200:	0002159c 	muleq	r2, ip, r5
 204:	016f0300 	cmneq	pc, r0, lsl #6
 208:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
 20c:	00019c25 	andeq	r9, r1, r5, lsr #24
 210:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 214:	013a0200 	teqeq	sl, r0, lsl #4
 218:	74010000 	strvc	r0, [r1], #-0
 21c:	00019c0f 	andeq	r9, r1, pc, lsl #24
 220:	0001dc00 	andeq	sp, r1, r0, lsl #24
 224:	00004020 	andeq	r4, r0, r0, lsr #32
 228:	3e9c0100 	fmlcce	f0, f4, f0
 22c:	04000002 	streq	r0, [r0], #-2
 230:	01007672 	tsteq	r0, r2, ror r6
 234:	019c1079 	orrseq	r1, ip, r9, ror r0
 238:	91020000 	mrsls	r0, (UNDEF: 2)
 23c:	df02006f 	svcle	0x0002006f
 240:	01000000 	mrseq	r0, (UNDEF: 0)
 244:	019c0f69 	orrseq	r0, ip, r9, ror #30
 248:	019c0000 	orrseq	r0, ip, r0
 24c:	00402000 	subeq	r2, r0, r0
 250:	9c010000 	stcls	0, cr0, [r1], {-0}
 254:	00000266 	andeq	r0, r0, r6, ror #4
 258:	01006304 	tsteq	r0, r4, lsl #6
 25c:	019c106b 	orrseq	r1, ip, fp, rrx
 260:	91020000 	mrsls	r0, (UNDEF: 2)
 264:	2402006f 	strcs	r0, [r2], #-111	; 0xffffff91
 268:	01000001 	tsteq	r0, r1
 26c:	019c0f5e 	orrseq	r0, ip, lr, asr pc
 270:	01680000 	cmneq	r8, r0
 274:	00342000 	eorseq	r2, r4, r0
 278:	9c010000 	stcls	0, cr0, [r1], {-0}
 27c:	0000028e 	andeq	r0, r0, lr, lsl #5
 280:	01006304 	tsteq	r0, r4, lsl #6
 284:	019c1060 	orrseq	r1, ip, r0, rrx
 288:	91020000 	mrsls	r0, (UNDEF: 2)
 28c:	3b0b0077 	blcc	2c0470 <startup-0x1fd3fb90>
 290:	01000000 	mrseq	r0, (UNDEF: 0)
 294:	01380656 	teqeq	r8, r6, asr r6
 298:	00302000 	eorseq	r2, r0, r0
 29c:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a0:	000002b2 			; <UNDEFINED> instruction: 0x000002b2
 2a4:	0100630c 	tsteq	r0, ip, lsl #6
 2a8:	019c2c56 	orrseq	r2, ip, r6, asr ip
 2ac:	91020000 	mrsls	r0, (UNDEF: 2)
 2b0:	260f0077 			; <UNDEFINED> instruction: 0x260f0077
 2b4:	01000000 	mrseq	r0, (UNDEF: 0)
 2b8:	00f0064e 	rscseq	r0, r0, lr, asr #12
 2bc:	00482000 	subeq	r2, r8, r0
 2c0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2c4:	000002e3 	andeq	r0, r0, r3, ror #5
 2c8:	0100780c 	tsteq	r0, ip, lsl #16
 2cc:	019c2a4e 	orrseq	r2, ip, lr, asr #20
 2d0:	91020000 	mrsls	r0, (UNDEF: 2)
 2d4:	0063046f 	rsbeq	r0, r3, pc, ror #8
 2d8:	9c105001 	ldcls	0, cr5, [r0], {1}
 2dc:	02000001 	andeq	r0, r0, #1
 2e0:	0f007791 	svceq	0x00007791
 2e4:	0000024d 	andeq	r0, r0, sp, asr #4
 2e8:	ae064601 	cfmadd32ge	mvax0, mvfx4, mvfx6, mvfx1
 2ec:	42200000 	eormi	r0, r0, #0
 2f0:	01000000 	mrseq	r0, (UNDEF: 0)
 2f4:	0003149c 	muleq	r3, ip, r4
 2f8:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 2fc:	9c284601 	stcls	6, cr4, [r8], #-4
 300:	02000001 	andeq	r0, r0, #1
 304:	63046f91 	movwvs	r6, #20369	; 0x4f91
 308:	10480100 	subne	r0, r8, r0, lsl #2
 30c:	0000019c 	muleq	r0, ip, r1
 310:	00779102 	rsbseq	r9, r7, r2, lsl #2
 314:	0000000b 	andeq	r0, r0, fp
 318:	063b0100 	ldrteq	r0, [fp], -r0, lsl #2
 31c:	20000084 	andcs	r0, r0, r4, lsl #1
 320:	0000002a 	andeq	r0, r0, sl, lsr #32
 324:	03399c01 	teqeq	r9, #256	; 0x100
 328:	6d0c0000 	stcvs	0, cr0, [ip, #-0]
 32c:	3b010073 	blcc	40500 <startup-0x1ffbfb00>
 330:	0000b31f 	andeq	fp, r0, pc, lsl r3
 334:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 338:	014a0b00 	cmpeq	sl, r0, lsl #22
 33c:	2d010000 	stccs	0, cr0, [r1, #-0]
 340:	00005406 	andeq	r5, r0, r6, lsl #8
 344:	00003020 	andeq	r3, r0, r0, lsr #32
 348:	5e9c0100 	fmlple	f0, f4, f0
 34c:	0c000003 	stceq	0, cr0, [r0], {3}
 350:	01007375 	tsteq	r0, r5, ror r3
 354:	00b31f2d 	adcseq	r1, r3, sp, lsr #30
 358:	91020000 	mrsls	r0, (UNDEF: 2)
 35c:	100d0074 	andne	r0, sp, r4, ror r0
 360:	01000001 	tsteq	r0, r1
 364:	00100624 	andseq	r0, r0, r4, lsr #12
 368:	00442000 	subeq	r2, r4, r0
 36c:	9c010000 	stcls	0, cr0, [r1], {-0}
 370:	0001ce0d 	andeq	ip, r1, sp, lsl #28
 374:	061a0100 	ldreq	r0, [sl], -r0, lsl #2
 378:	20000000 	andcs	r0, r0, r0
 37c:	0000000c 	andeq	r0, r0, ip
 380:	Address 0x00000380 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  18:	0b3a0e03 	bleq	e8382c <startup-0x1f17c7d4>
  1c:	0b390b3b 	bleq	e42d10 <startup-0x1f1bd2f0>
  20:	13491927 	movtne	r1, #39207	; 0x9927
  24:	06120111 			; <UNDEFINED> instruction: 0x06120111
  28:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  2c:	00130119 	andseq	r0, r3, r9, lsl r1
  30:	00050300 	andeq	r0, r5, r0, lsl #6
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	0b390b3b 	bleq	e42d2c <startup-0x1f1bd2d4>
  3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  40:	34040000 	strcc	r0, [r4], #-0
  44:	3a080300 	bcc	200c4c <startup-0x1fdff3b4>
  48:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  4c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  50:	05000018 	streq	r0, [r0, #-24]	; 0xffffffe8
  54:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  58:	0b3b0b3a 	bleq	ec2d48 <startup-0x1f13d2b8>
  5c:	13490b39 	movtne	r0, #39737	; 0x9b39
  60:	00001802 	andeq	r1, r0, r2, lsl #16
  64:	0b002406 	bleq	9084 <startup-0x1fff6f7c>
  68:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  6c:	07000008 	streq	r0, [r0, -r8]
  70:	0b0b000f 	bleq	2c00b4 <startup-0x1fd3ff4c>
  74:	00001349 	andeq	r1, r0, r9, asr #6
  78:	0b002408 	bleq	90a0 <startup-0x1fff6f60>
  7c:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  80:	0900000e 	stmdbeq	r0, {r1, r2, r3}
  84:	13490101 	movtne	r0, #37121	; 0x9101
  88:	00001301 	andeq	r1, r0, r1, lsl #6
  8c:	4900210a 	stmdbmi	r0, {r1, r3, r8, sp}
  90:	000b2f13 	andeq	r2, fp, r3, lsl pc
  94:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  98:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  a4:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a8:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  ac:	00130119 	andseq	r0, r3, r9, lsl r1
  b0:	00050c00 	andeq	r0, r5, r0, lsl #24
  b4:	0b3a0803 	bleq	e820c8 <startup-0x1f17df38>
  b8:	0b390b3b 	bleq	e42dac <startup-0x1f1bd254>
  bc:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  c0:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  c4:	03193f00 	tsteq	r9, #0, 30
  c8:	3b0b3a0e 	blcc	2ce908 <startup-0x1fd316f8>
  cc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
  d0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  d4:	97184006 	ldrls	r4, [r8, -r6]
  d8:	00001942 	andeq	r1, r0, r2, asr #18
  dc:	3f002e0e 	svccc	0x00002e0e
  e0:	3a0e0319 	bcc	380d4c <startup-0x1fc7f2b4>
  e4:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e8:	1119270b 	tstne	r9, fp, lsl #14
  ec:	40061201 	andmi	r1, r6, r1, lsl #4
  f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f4:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
  f8:	03193f01 	tsteq	r9, #1, 30
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 104:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 108:	97184006 	ldrls	r4, [r8, -r6]
 10c:	13011942 	movwne	r1, #6466	; 0x1942
 110:	Address 0x00000110 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000414 	andeq	r0, r0, r4, lsl r4
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000424 	andcs	r0, r0, r4, lsr #8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000224 	andeq	r0, r0, r4, lsr #4
   4:	00570003 	subseq	r0, r7, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	69766144 	ldmdbvs	r6!, {r2, r6, r8, sp, lr}^
  28:	6f442f64 	svcvs	0x00442f64
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	6c616843 	stclvs	8, cr6, [r1], #-268	; 0xfffffef4
  38:	7372656d 	cmnvc	r2, #457179136	; 0x1b400000
  3c:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  40:	706f6d2f 	rsbvc	r6, pc, pc, lsr #26
  44:	6262616c 	rsbvs	r6, r2, #108, 2
  48:	6373612f 	cmnvs	r3, #-1073741813	; 0xc000000b
  4c:	69696969 	stmdbvs	r9!, {r0, r3, r5, r6, r8, fp, sp, lr}^
  50:	73000069 	movwvc	r0, #105	; 0x69
  54:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  58:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
  5c:	00000100 	andeq	r0, r0, r0, lsl #2
  60:	00010500 	andeq	r0, r1, r0, lsl #10
  64:	00000205 	andeq	r0, r0, r5, lsl #4
  68:	1a032000 	bne	c8070 <startup-0x1ff37f90>
  6c:	025e1301 	subseq	r1, lr, #67108864	; 0x4000000
  70:	01010003 	tsteq	r1, r3
  74:	05001905 	streq	r1, [r0, #-2309]	; 0xfffff6fb
  78:	00001002 	andeq	r1, r0, r2
  7c:	01230320 			; <UNDEFINED> instruction: 0x01230320
  80:	05300205 	ldreq	r0, [r0, #-517]!	; 0xfffffdfb
  84:	0205200c 	andeq	r2, r5, #12
  88:	200c052f 	andcs	r0, ip, pc, lsr #10
  8c:	052f0205 	streq	r0, [pc, #-517]!	; fffffe8f <main+0xdffffaf9>
  90:	0205200b 	andeq	r2, r5, #11
  94:	200c052f 	andcs	r0, ip, pc, lsr #10
  98:	052f0705 	streq	r0, [pc, #-1797]!	; fffff99b <main+0xdffff605>
  9c:	0402000a 	streq	r0, [r2], #-10
  a0:	14052001 	strne	r2, [r5], #-1
  a4:	01040200 	mrseq	r0, R12_usr
  a8:	0007052e 	andeq	r0, r7, lr, lsr #10
  ac:	3c010402 	cfstrscc	mvf0, [r1], {2}
  b0:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
  b4:	0105200d 	tsteq	r5, sp
  b8:	9f22052f 	svcls	0x0022052f
  bc:	054f0705 	strbeq	r0, [pc, #-1797]	; fffff9bf <main+0xdffff629>
  c0:	2f2f2103 	svccs	0x002f2103
  c4:	2f05052f 	svccs	0x0005052f
  c8:	05370705 	ldreq	r0, [r7, #-1797]!	; 0xfffff8fb
  cc:	22054301 	andcs	r4, r5, #67108864	; 0x4000000
  d0:	4f07055a 	svcmi	0x0007055a
  d4:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
  d8:	07055905 	streq	r5, [r5, -r5, lsl #18]
  dc:	4001053a 	andmi	r0, r1, sl, lsr r5
  e0:	6806055b 	stmdavs	r6, {r0, r1, r3, r4, r6, r8, sl}
  e4:	4b200405 	blmi	801100 <startup-0x1f7fef00>
  e8:	05ad0205 	streq	r0, [sp, #517]!	; 0x205
  ec:	01052010 	tsteq	r5, r0, lsl r0
  f0:	0605773d 			; <UNDEFINED> instruction: 0x0605773d
  f4:	20040568 	andcs	r0, r4, r8, ror #10
  f8:	054b1205 	strbeq	r1, [fp, #-517]	; 0xfffffdfb
  fc:	02058204 	andeq	r8, r5, #4, 4	; 0x40000000
 100:	20100575 	andscs	r0, r0, r5, ror r5
 104:	693d0105 	ldmdbvs	sp!, {r0, r2, r8}
 108:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 10c:	05201105 	streq	r1, [r0, #-261]!	; 0xfffffefb
 110:	053d3d02 	ldreq	r3, [sp, #-3330]!	; 0xfffff2fe
 114:	05692f01 	strbeq	r2, [r9, #-3841]!	; 0xfffff0ff
 118:	2f3d3e02 	svccs	0x003d3e02
 11c:	052f0605 	streq	r0, [pc, #-1541]!	; fffffb1f <main+0xdffff789>
 120:	02052004 	andeq	r2, r5, #4
 124:	3d09053d 	cfstr32cc	mvfx0, [r9, #-244]	; 0xffffff0c
 128:	772f0105 	strvc	r0, [pc, -r5, lsl #2]!
 12c:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 130:	0205200e 	andeq	r2, r5, #14
 134:	06053d2f 	streq	r3, [r5], -pc, lsr #26
 138:	5902053d 	stmdbpl	r2, {r0, r2, r3, r4, r5, r8, sl}
 13c:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 140:	01052f09 	tsteq	r5, r9, lsl #30
 144:	0205a12f 	andeq	sl, r5, #-1073741813	; 0xc000000b
 148:	200e053d 	andcs	r0, lr, sp, lsr r5
 14c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 140 <startup-0x1ffffec0>
 150:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 154:	0e055902 	vmlaeq.f16	s10, s10, s4	; <UNPREDICTABLE>
 158:	2f090520 	svccs	0x00090520
 15c:	a12f0105 			; <UNDEFINED> instruction: 0xa12f0105
 160:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 164:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 168:	6702054d 	strvs	r0, [r2, -sp, asr #10]
 16c:	01053d3d 	tsteq	r5, sp, lsr sp
 170:	4c2a0559 	cfstr32mi	mvfx0, [sl], #-356	; 0xfffffe9c
 174:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 178:	04020009 	streq	r0, [r2], #-9
 17c:	1d052001 	stcne	0, cr2, [r5, #-4]
 180:	01040200 	mrseq	r0, R12_usr
 184:	0007053c 	andeq	r0, r7, ip, lsr r5
 188:	3c010402 	cfstrscc	mvf0, [r1], {2}
 18c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 180 <startup-0x1ffffe80>
 190:	4d590105 	ldfmie	f0, [r9, #-20]	; 0xffffffec
 194:	3d6a0405 	cfstrdcc	mvd0, [sl, #-20]!	; 0xffffffec
 198:	01053d59 	tsteq	r5, r9, asr sp
 19c:	4b180522 	blmi	60162c <startup-0x1f9fe9d4>
 1a0:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 194 <startup-0x1ffffe6c>
 1a4:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 1a8:	02053e1b 	andeq	r3, r5, #432	; 0x1b0
 1ac:	01053d2f 	tsteq	r5, pc, lsr #26
 1b0:	3e19053d 	mrccc	5, 0, r0, cr9, cr13, {1}
 1b4:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 1a8 <startup-0x1ffffe58>
 1b8:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 1bc:	02053e1a 	andeq	r3, r5, #416	; 0x1a0
 1c0:	3d01052f 	cfstr32cc	mvfx0, [r1, #-188]	; 0xffffff44
 1c4:	2f02053f 	svccs	0x0002053f
 1c8:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff2a1 <main+0xdfffef0b>
 1cc:	053f2f01 	ldreq	r2, [pc, #-3841]!	; fffff2d3 <main+0xdfffef3d>
 1d0:	0d052f02 	stceq	15, cr2, [r5, #-8]
 1d4:	2f010520 	svccs	0x00010520
 1d8:	59060585 	stmdbpl	r6, {r0, r2, r7, r8, sl}
 1dc:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 1e0:	16053e0b 	strne	r3, [r5], -fp, lsl #28
 1e4:	6602053e 			; <UNDEFINED> instruction: 0x6602053e
 1e8:	3d01054b 	cfstr32cc	mvfx0, [r1, #-300]	; 0xfffffed4
 1ec:	5a07054e 	bpl	1c172c <startup-0x1fe3e8d4>
 1f0:	92020575 	andls	r0, r2, #490733568	; 0x1d400000
 1f4:	03052f2f 	movweq	r2, #24367	; 0x5f2f
 1f8:	2f07054b 	svccs	0x0007054b
 1fc:	05221605 	streq	r1, [r2, #-1541]!	; 0xfffff9fb
 200:	08053c03 	stmdaeq	r5, {r0, r1, sl, fp, ip, sp}
 204:	2e070548 	cfsh32cs	mvfx0, mvfx7, #40
 208:	05330205 	ldreq	r0, [r3, #-517]!	; 0xfffffdfb
 20c:	07054b04 	streq	r4, [r5, -r4, lsl #22]
 210:	2116053d 	tstcs	r6, sp, lsr r5
 214:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 218:	07054908 	streq	r4, [r5, -r8, lsl #18]
 21c:	3109052e 	tstcc	r9, lr, lsr #10
 220:	02210105 	eoreq	r0, r1, #1073741825	; 0x40000001
 224:	01010008 	tsteq	r1, r8

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	616c6564 	cmnvs	ip, r4, ror #10
   4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
   8:	00696c6c 	rsbeq	r6, r9, ip, ror #24
   c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  10:	6f675f69 	svcvs	0x00675f69
  14:	79786f74 	ldmdbvc	r8!, {r2, r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  18:	736e7500 	cmnvc	lr, #0, 10
  1c:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
  20:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
  24:	73610074 	cmnvc	r1, #116	; 0x74
  28:	5f696963 	svcpl	0x00696963
  2c:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
  30:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
  34:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  38:	61007261 	tstvs	r0, r1, ror #4
  3c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  40:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  44:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
  48:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
  4c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
  50:	73610072 	cmnvc	r1, #114	; 0x72
  54:	5f696963 	svcpl	0x00696963
  58:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  5c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
  60:	47007261 	strmi	r7, [r0, -r1, ror #4]
  64:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  68:	39203939 	stmdbcc	r0!, {r0, r3, r4, r5, r8, fp, ip, sp}
  6c:	312e322e 			; <UNDEFINED> instruction: 0x312e322e
  70:	31303220 	teqcc	r0, r0, lsr #4
  74:	32303139 	eorscc	r3, r0, #1073741838	; 0x4000000e
  78:	72282035 	eorvc	r2, r8, #53	; 0x35
  7c:	61656c65 	cmnvs	r5, r5, ror #24
  80:	20296573 	eorcs	r6, r9, r3, ror r5
  84:	4d52415b 	ldfmie	f4, [r2, #-364]	; 0xfffffe94
  88:	6d72612f 	ldfvse	f6, [r2, #-188]!	; 0xffffff44
  8c:	622d392d 	eorvs	r3, sp, #737280	; 0xb4000
  90:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  94:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  98:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  9c:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  a0:	39353737 	ldmdbcc	r5!, {r0, r1, r2, r4, r5, r8, r9, sl, ip, sp}
  a4:	2d205d39 	stccs	13, cr5, [r0, #-228]!	; 0xffffff1c
  a8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  ac:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  b0:	6f6c666d 	svcvs	0x006c666d
  b4:	612d7461 			; <UNDEFINED> instruction: 0x612d7461
  b8:	733d6962 	teqvc	sp, #1605632	; 0x188000
  bc:	2074666f 	rsbscs	r6, r4, pc, ror #12
  c0:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  c4:	613d6863 	teqvs	sp, r3, ror #16
  c8:	36766d72 			; <UNDEFINED> instruction: 0x36766d72
  cc:	2d206d2d 	stccs	13, cr6, [r0, #-180]!	; 0xffffff4c
  d0:	4f2d2067 	svcmi	0x002d2067
  d4:	732d2030 			; <UNDEFINED> instruction: 0x732d2030
  d8:	633d6474 	teqvs	sp, #116, 8	; 0x74000000
  dc:	61003939 	tstvs	r0, r9, lsr r9
  e0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  e4:	6165725f 	cmnvs	r5, pc, asr r2
  e8:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
  ec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
  f0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
  f4:	645f7261 	ldrbvs	r7, [pc], #-609	; fc <startup-0x1fffff04>
  f8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
  fc:	61007961 	tstvs	r0, r1, ror #18
 100:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 104:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 108:	645f6574 	ldrbvs	r6, [pc], #-1396	; 110 <startup-0x1ffffef0>
 10c:	00617461 	rsbeq	r7, r1, r1, ror #8
 110:	616c6564 	cmnvs	ip, r4, ror #10
 114:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 118:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 11c:	72646461 	rsbvc	r6, r4, #1627389952	; 0x61000000
 120:	00737365 	rsbseq	r7, r3, r5, ror #6
 124:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 128:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 12c:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 130:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 134:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 138:	73610072 	cmnvc	r1, #114	; 0x72
 13c:	5f696963 	svcpl	0x00696963
 140:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 144:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 148:	65640061 	strbvs	r0, [r4, #-97]!	; 0xffffff9f
 14c:	5f79616c 	svcpl	0x0079616c
 150:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
 154:	6e75006f 	cdpvs	0, 7, cr0, cr5, cr15, {3}
 158:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 15c:	63206465 			; <UNDEFINED> instruction: 0x63206465
 160:	00726168 	rsbseq	r6, r2, r8, ror #2
 164:	6e69616d 	powvsez	f6, f1, #5.0
 168:	63736100 	cmnvs	r3, #0, 2
 16c:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 170:	616d6d6f 	cmnvs	sp, pc, ror #26
 174:	6600646e 	strvs	r6, [r0], -lr, ror #8
 178:	74636e75 	strbtvc	r6, [r3], #-3701	; 0xfffff18b
 17c:	5f6e6f69 	svcpl	0x006e6f69
 180:	00746573 	rsbseq	r6, r4, r3, ror r5
 184:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 188:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 18c:	2f3a4300 	svccs	0x003a4300
 190:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 194:	61442f73 	hvcvs	17139	; 0x42f3
 198:	2f646976 	svccs	0x00646976
 19c:	75636f44 	strbvc	r6, [r3, #-3908]!	; 0xfffff0bc
 1a0:	746e656d 	strbtvc	r6, [lr], #-1389	; 0xfffffa93
 1a4:	68432f73 	stmdavs	r3, {r0, r1, r4, r5, r6, r8, r9, sl, fp, sp}^
 1a8:	656d6c61 	strbvs	r6, [sp, #-3169]!	; 0xfffff39f
 1ac:	4d2f7372 	stcmi	3, cr7, [pc, #-456]!	; ffffffec <main+0xdffffc56>
 1b0:	6d2f504f 	stcvs	0, cr5, [pc, #-316]!	; 7c <startup-0x1fffff84>
 1b4:	616c706f 	cmnvs	ip, pc, rrx
 1b8:	612f6262 			; <UNDEFINED> instruction: 0x612f6262
 1bc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1c0:	2f696969 	svccs	0x00696969
 1c4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 1c8:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 1cc:	74730063 	ldrbtvc	r0, [r3], #-99	; 0xffffff9d
 1d0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 1d4:	72610070 	rsbvc	r0, r1, #112	; 0x70
 1d8:	74006367 	strvc	r6, [r0], #-871	; 0xfffffc99
 1dc:	31747365 	cmncc	r4, r5, ror #6
 1e0:	73657400 	cmnvc	r5, #0, 8
 1e4:	64003274 	strvs	r3, [r0], #-628	; 0xfffffd8c
 1e8:	6c707369 	ldclvs	3, cr7, [r0], #-420	; 0xfffffe5c
 1ec:	635f7961 	cmpvs	pc, #1589248	; 0x184000
 1f0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1f4:	61006c6f 	tstvs	r0, pc, ror #24
 1f8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1fc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 200:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 204:	6500646d 	strvs	r6, [r0, #-1133]	; 0xfffffb93
 208:	7972746e 	ldmdbvc	r2!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
 20c:	646f6d5f 	strbtvs	r6, [pc], #-3423	; 214 <startup-0x1ffffdec>
 210:	65735f65 	ldrbvs	r5, [r3, #-3941]!	; 0xfffff09b
 214:	3a430074 	bcc	10c03ec <startup-0x1ef3fc14>
 218:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
 21c:	445c7372 	ldrbmi	r7, [ip], #-882	; 0xfffffc8e
 220:	64697661 	strbtvs	r7, [r9], #-1633	; 0xfffff99f
 224:	636f445c 	cmnvs	pc, #92, 8	; 0x5c000000
 228:	6e656d75 	mcrvs	13, 3, r6, cr5, cr5, {3}
 22c:	435c7374 	cmpmi	ip, #116, 6	; 0xd0000001
 230:	6d6c6168 	stfvse	f6, [ip, #-416]!	; 0xfffffe60
 234:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
 238:	5c504f4d 	mrrcpl	15, 4, r4, r0, cr13
 23c:	6c706f6d 	ldclvs	15, cr6, [r0], #-436	; 0xfffffe4c
 240:	5c626261 	sfmpl	f6, 2, [r2], #-388	; 0xfffffe7c
 244:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 248:	69696969 	stmdbvs	r9!, {r0, r3, r5, r6, r8, fp, sp, lr}^
 24c:	63736100 	cmnvs	r3, #0, 2
 250:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 254:	5f6c7274 	svcpl	0x006c7274
 258:	5f746962 	svcpl	0x00746962
 25c:	00746573 	rsbseq	r6, r4, r3, ror r5
 260:	76677261 	strbtvc	r7, [r7], -r1, ror #4
 264:	63736100 	cmnvs	r3, #0, 2
 268:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 26c:	0074696e 	rsbseq	r6, r4, lr, ror #18

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000044 	andeq	r0, r0, r4, asr #32
  30:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  34:	41018e02 	tstmi	r1, r2, lsl #28
  38:	0000070d 	andeq	r0, r0, sp, lsl #14
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000054 	andcs	r0, r0, r4, asr r0
  48:	00000030 	andeq	r0, r0, r0, lsr r0
  4c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  50:	41018e02 	tstmi	r1, r2, lsl #28
  54:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  58:	00000007 	andeq	r0, r0, r7
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000084 	andcs	r0, r0, r4, lsl #1
  68:	0000002a 	andeq	r0, r0, sl, lsr #32
  6c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  70:	41018e02 	tstmi	r1, r2, lsl #28
  74:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  78:	00000007 	andeq	r0, r0, r7
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000ae 	andcs	r0, r0, lr, lsr #1
  88:	00000042 	andeq	r0, r0, r2, asr #32
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  98:	00000007 	andeq	r0, r0, r7
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  a8:	00000048 	andeq	r0, r0, r8, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	20000138 	andcs	r0, r0, r8, lsr r1
  c8:	00000030 	andeq	r0, r0, r0, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000168 	andcs	r0, r0, r8, ror #2
  e8:	00000034 	andeq	r0, r0, r4, lsr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	2000019c 	mulcs	r0, ip, r1
 108:	00000040 	andeq	r0, r0, r0, asr #32
 10c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 110:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 114:	180e4101 	stmdane	lr, {r0, r8, lr}
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200001dc 	ldrdcs	r0, [r0], -ip
 128:	00000040 	andeq	r0, r0, r0, asr #32
 12c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 130:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 134:	180e4101 	stmdane	lr, {r0, r8, lr}
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	2000021c 	andcs	r0, r0, ip, lsl r2
 148:	0000002a 	andeq	r0, r0, sl, lsr #32
 14c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 150:	41018e02 	tstmi	r1, r2, lsl #28
 154:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 158:	00000007 	andeq	r0, r0, r7
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	20000246 	andcs	r0, r0, r6, asr #4
 168:	0000002a 	andeq	r0, r0, sl, lsr #32
 16c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 170:	41018e02 	tstmi	r1, r2, lsl #28
 174:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 178:	00000007 	andeq	r0, r0, r7
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	20000270 	andcs	r0, r0, r0, ror r2
 188:	00000036 	andeq	r0, r0, r6, lsr r0
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 198:	00000007 	andeq	r0, r0, r7
 19c:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	200002a6 	andcs	r0, r0, r6, lsr #5
 1a8:	0000002c 	andeq	r0, r0, ip, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1b8:	00000007 	andeq	r0, r0, r7
 1bc:	00000018 	andeq	r0, r0, r8, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200002d2 	ldrdcs	r0, [r0], -r2
 1c8:	00000016 	andeq	r0, r0, r6, lsl r0
 1cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1d0:	41018e02 	tstmi	r1, r2, lsl #28
 1d4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1d8:	00000018 	andeq	r0, r0, r8, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	200002e8 	andcs	r0, r0, r8, ror #5
 1e4:	00000016 	andeq	r0, r0, r6, lsl r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f4:	00000018 	andeq	r0, r0, r8, lsl r0
 1f8:	00000000 	andeq	r0, r0, r0
 1fc:	200002fe 	strdcs	r0, [r0], -lr
 200:	00000016 	andeq	r0, r0, r6, lsl r0
 204:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 208:	41018e02 	tstmi	r1, r2, lsl #28
 20c:	0000070d 	andeq	r0, r0, sp, lsl #14
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000314 	andcs	r0, r0, r4, lsl r3
 21c:	00000010 	andeq	r0, r0, r0, lsl r0
 220:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 224:	41018e02 	tstmi	r1, r2, lsl #28
 228:	0000070d 	andeq	r0, r0, sp, lsl #14
 22c:	00000018 	andeq	r0, r0, r8, lsl r0
 230:	00000000 	andeq	r0, r0, r0
 234:	20000324 	andcs	r0, r0, r4, lsr #6
 238:	0000001a 	andeq	r0, r0, sl, lsl r0
 23c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 240:	41018e02 	tstmi	r1, r2, lsl #28
 244:	0000070d 	andeq	r0, r0, sp, lsl #14
 248:	00000018 	andeq	r0, r0, r8, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	2000033e 	andcs	r0, r0, lr, lsr r3
 254:	0000001a 	andeq	r0, r0, sl, lsl r0
 258:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 25c:	41018e02 	tstmi	r1, r2, lsl #28
 260:	0000070d 	andeq	r0, r0, sp, lsl #14
 264:	0000001c 	andeq	r0, r0, ip, lsl r0
 268:	00000000 	andeq	r0, r0, r0
 26c:	20000358 	andcs	r0, r0, r8, asr r3
 270:	0000003e 	andeq	r0, r0, lr, lsr r0
 274:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 278:	41018e02 	tstmi	r1, r2, lsl #28
 27c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 280:	00000007 	andeq	r0, r0, r7
 284:	00000020 	andeq	r0, r0, r0, lsr #32
 288:	00000000 	andeq	r0, r0, r0
 28c:	20000396 	mulcs	r0, r6, r3
 290:	0000008e 	andeq	r0, r0, lr, lsl #1
 294:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 298:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 29c:	41018e02 	tstmi	r1, r2, lsl #28
 2a0:	0d41400e 	stcleq	0, cr4, [r1, #-56]	; 0xffffffc8
 2a4:	00000007 	andeq	r0, r0, r7
