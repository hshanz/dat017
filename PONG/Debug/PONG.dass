
./Debug/PONG.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff34 	bl	20000e70 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_ctrl_bit_set>:
	.winMsg = "PLayer2 wins",
};

//                      Functions
// LCD functions
static void graphic_ctrl_bit_set(uint8_t x) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = GPIO_E.odr_low;
2000001c:	4a0f      	ldr	r2, [pc, #60]	; (2000005c <graphic_ctrl_bit_set+0x4c>)
2000001e:	200f      	movs	r0, #15
20000020:	183b      	adds	r3, r7, r0
20000022:	7d12      	ldrb	r2, [r2, #20]
20000024:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
20000026:	183b      	adds	r3, r7, r0
20000028:	183a      	adds	r2, r7, r0
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	2104      	movs	r1, #4
2000002e:	438a      	bics	r2, r1
20000030:	701a      	strb	r2, [r3, #0]
c |= (~B_SELECT & x);
20000032:	1dfb      	adds	r3, r7, #7
20000034:	781b      	ldrb	r3, [r3, #0]
20000036:	b25b      	sxtb	r3, r3
20000038:	2204      	movs	r2, #4
2000003a:	4393      	bics	r3, r2
2000003c:	b25a      	sxtb	r2, r3
2000003e:	183b      	adds	r3, r7, r0
20000040:	781b      	ldrb	r3, [r3, #0]
20000042:	b25b      	sxtb	r3, r3
20000044:	4313      	orrs	r3, r2
20000046:	b25a      	sxtb	r2, r3
20000048:	183b      	adds	r3, r7, r0
2000004a:	701a      	strb	r2, [r3, #0]
GPIO_E.odr_low = c;
2000004c:	4a03      	ldr	r2, [pc, #12]	; (2000005c <graphic_ctrl_bit_set+0x4c>)
2000004e:	183b      	adds	r3, r7, r0
20000050:	781b      	ldrb	r3, [r3, #0]
20000052:	7513      	strb	r3, [r2, #20]
}
20000054:	46c0      	nop			; (mov r8, r8)
20000056:	46bd      	mov	sp, r7
20000058:	b004      	add	sp, #16
2000005a:	bd80      	pop	{r7, pc}
2000005c:	40021000 	andmi	r1, r2, r0

20000060 <graphic_ctrl_bit_clear>:
static void graphic_ctrl_bit_clear(uint8_t x) {
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	0002      	movs	r2, r0
20000068:	1dfb      	adds	r3, r7, #7
2000006a:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = GPIO_E.odr_low;
2000006c:	4a0f      	ldr	r2, [pc, #60]	; (200000ac <graphic_ctrl_bit_clear+0x4c>)
2000006e:	200f      	movs	r0, #15
20000070:	183b      	adds	r3, r7, r0
20000072:	7d12      	ldrb	r2, [r2, #20]
20000074:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
20000076:	183b      	adds	r3, r7, r0
20000078:	183a      	adds	r2, r7, r0
2000007a:	7812      	ldrb	r2, [r2, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	438a      	bics	r2, r1
20000080:	701a      	strb	r2, [r3, #0]
c &= ~x;
20000082:	1dfb      	adds	r3, r7, #7
20000084:	781b      	ldrb	r3, [r3, #0]
20000086:	b25b      	sxtb	r3, r3
20000088:	43db      	mvns	r3, r3
2000008a:	b25b      	sxtb	r3, r3
2000008c:	183a      	adds	r2, r7, r0
2000008e:	7812      	ldrb	r2, [r2, #0]
20000090:	b252      	sxtb	r2, r2
20000092:	4013      	ands	r3, r2
20000094:	b25a      	sxtb	r2, r3
20000096:	183b      	adds	r3, r7, r0
20000098:	701a      	strb	r2, [r3, #0]
GPIO_E.odr_low = c;
2000009a:	4a04      	ldr	r2, [pc, #16]	; (200000ac <graphic_ctrl_bit_clear+0x4c>)
2000009c:	183b      	adds	r3, r7, r0
2000009e:	781b      	ldrb	r3, [r3, #0]
200000a0:	7513      	strb	r3, [r2, #20]
}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	46bd      	mov	sp, r7
200000a6:	b004      	add	sp, #16
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	40021000 	andmi	r1, r2, r0

200000b0 <select_controller>:
static void select_controller(uint8_t controller){
200000b0:	b580      	push	{r7, lr}
200000b2:	b082      	sub	sp, #8
200000b4:	af00      	add	r7, sp, #0
200000b6:	0002      	movs	r2, r0
200000b8:	1dfb      	adds	r3, r7, #7
200000ba:	701a      	strb	r2, [r3, #0]
	switch(controller){
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	781b      	ldrb	r3, [r3, #0]
200000c0:	2b08      	cmp	r3, #8
200000c2:	d00c      	beq.n	200000de <select_controller+0x2e>
200000c4:	dc02      	bgt.n	200000cc <select_controller+0x1c>
200000c6:	2b00      	cmp	r3, #0
200000c8:	d005      	beq.n	200000d6 <select_controller+0x26>
			break;
		case B_CS1|B_CS2 :
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200000ca:	e01a      	b.n	20000102 <select_controller+0x52>
	switch(controller){
200000cc:	2b10      	cmp	r3, #16
200000ce:	d00d      	beq.n	200000ec <select_controller+0x3c>
200000d0:	2b18      	cmp	r3, #24
200000d2:	d012      	beq.n	200000fa <select_controller+0x4a>
}
200000d4:	e015      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200000d6:	2018      	movs	r0, #24
200000d8:	f7ff ffc2 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000dc:	e011      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
200000de:	2008      	movs	r0, #8
200000e0:	f7ff ff96 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200000e4:	2010      	movs	r0, #16
200000e6:	f7ff ffbb 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000ea:	e00a      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
200000ec:	2010      	movs	r0, #16
200000ee:	f7ff ff8f 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
200000f2:	2008      	movs	r0, #8
200000f4:	f7ff ffb4 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000f8:	e003      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200000fa:	2018      	movs	r0, #24
200000fc:	f7ff ff88 	bl	20000010 <graphic_ctrl_bit_set>
			break;
20000100:	46c0      	nop			; (mov r8, r8)
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}

2000010a <graphic_initialize>:
void graphic_initialize(void) {
2000010a:	b580      	push	{r7, lr}
2000010c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000010e:	2040      	movs	r0, #64	; 0x40
20000110:	f7ff ff7e 	bl	20000010 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000114:	200a      	movs	r0, #10
20000116:	f000 fc1c 	bl	20000952 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000011a:	2078      	movs	r0, #120	; 0x78
2000011c:	f7ff ffa0 	bl	20000060 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000120:	201e      	movs	r0, #30
20000122:	f000 fc30 	bl	20000986 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000126:	2020      	movs	r0, #32
20000128:	f7ff ff72 	bl	20000010 <graphic_ctrl_bit_set>
	delay_milli(100);
2000012c:	2064      	movs	r0, #100	; 0x64
2000012e:	f000 fc2a 	bl	20000986 <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000132:	2118      	movs	r1, #24
20000134:	203e      	movs	r0, #62	; 0x3e
20000136:	f000 f8df 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000013a:	2118      	movs	r1, #24
2000013c:	203f      	movs	r0, #63	; 0x3f
2000013e:	f000 f8db 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000142:	2118      	movs	r1, #24
20000144:	20c0      	movs	r0, #192	; 0xc0
20000146:	f000 f8d7 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000014a:	2118      	movs	r1, #24
2000014c:	2040      	movs	r0, #64	; 0x40
2000014e:	f000 f8d3 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000152:	2118      	movs	r1, #24
20000154:	20b8      	movs	r0, #184	; 0xb8
20000156:	f000 f8cf 	bl	200002f8 <graphic_write_command>
	select_controller(0);
2000015a:	2000      	movs	r0, #0
2000015c:	f7ff ffa8 	bl	200000b0 <select_controller>
}
20000160:	46c0      	nop			; (mov r8, r8)
20000162:	46bd      	mov	sp, r7
20000164:	bd80      	pop	{r7, pc}

20000166 <graphic_wait_ready>:
static void graphic_wait_ready(void) {
20000166:	b580      	push	{r7, lr}
20000168:	b082      	sub	sp, #8
2000016a:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000016c:	2040      	movs	r0, #64	; 0x40
2000016e:	f7ff ff77 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000172:	4b14      	ldr	r3, [pc, #80]	; (200001c4 <graphic_wait_ready+0x5e>)
20000174:	4a14      	ldr	r2, [pc, #80]	; (200001c8 <graphic_wait_ready+0x62>)
20000176:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000178:	2001      	movs	r0, #1
2000017a:	f7ff ff71 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000017e:	2002      	movs	r0, #2
20000180:	f7ff ff46 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000184:	f000 fbdc 	bl	20000940 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000188:	2040      	movs	r0, #64	; 0x40
2000018a:	f7ff ff41 	bl	20000010 <graphic_ctrl_bit_set>
		delay_500ns();
2000018e:	f000 fbd7 	bl	20000940 <delay_500ns>
		c = GPIO_E.idr_high & LCD_BUSY;
20000192:	4b0c      	ldr	r3, [pc, #48]	; (200001c4 <graphic_wait_ready+0x5e>)
20000194:	7c5b      	ldrb	r3, [r3, #17]
20000196:	b2da      	uxtb	r2, r3
20000198:	1dfb      	adds	r3, r7, #7
2000019a:	217f      	movs	r1, #127	; 0x7f
2000019c:	438a      	bics	r2, r1
2000019e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff5d 	bl	20000060 <graphic_ctrl_bit_clear>
		delay_500ns();
200001a6:	f000 fbcb 	bl	20000940 <delay_500ns>
		if( c == 0 ) break;
200001aa:	1dfb      	adds	r3, r7, #7
200001ac:	781b      	ldrb	r3, [r3, #0]
200001ae:	2b00      	cmp	r3, #0
200001b0:	d000      	beq.n	200001b4 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200001b2:	e7e9      	b.n	20000188 <graphic_wait_ready+0x22>
		if( c == 0 ) break;
200001b4:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E.moder = 0x55555555; // 15-0 outputs
200001b6:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <graphic_wait_ready+0x5e>)
200001b8:	4a04      	ldr	r2, [pc, #16]	; (200001cc <graphic_wait_ready+0x66>)
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	40021000 	andmi	r1, r2, r0
200001c8:	00005555 	andeq	r5, r0, r5, asr r5
200001cc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001d0 <graphic_read>:
static uint8_t graphic_read(uint8_t controller) {
200001d0:	b580      	push	{r7, lr}
200001d2:	b084      	sub	sp, #16
200001d4:	af00      	add	r7, sp, #0
200001d6:	0002      	movs	r2, r0
200001d8:	1dfb      	adds	r3, r7, #7
200001da:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ff3f 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200001e2:	4b1c      	ldr	r3, [pc, #112]	; (20000254 <graphic_read+0x84>)
200001e4:	4a1c      	ldr	r2, [pc, #112]	; (20000258 <graphic_read+0x88>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
200001e8:	2003      	movs	r0, #3
200001ea:	f7ff ff11 	bl	20000010 <graphic_ctrl_bit_set>
	select_controller(controller);
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	0018      	movs	r0, r3
200001f4:	f7ff ff5c 	bl	200000b0 <select_controller>
	delay_500ns();
200001f8:	f000 fba2 	bl	20000940 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200001fc:	2040      	movs	r0, #64	; 0x40
200001fe:	f7ff ff07 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000202:	f000 fb9d 	bl	20000940 <delay_500ns>
	c = GPIO_E.idr_high;
20000206:	4a13      	ldr	r2, [pc, #76]	; (20000254 <graphic_read+0x84>)
20000208:	230f      	movs	r3, #15
2000020a:	18fb      	adds	r3, r7, r3
2000020c:	7c52      	ldrb	r2, [r2, #17]
2000020e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff25 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x55555555; // 15-0 outputs
20000216:	4b0f      	ldr	r3, [pc, #60]	; (20000254 <graphic_read+0x84>)
20000218:	4a10      	ldr	r2, [pc, #64]	; (2000025c <graphic_read+0x8c>)
2000021a:	601a      	str	r2, [r3, #0]
	if( controller & B_CS1 ) {
2000021c:	1dfb      	adds	r3, r7, #7
2000021e:	781b      	ldrb	r3, [r3, #0]
20000220:	2208      	movs	r2, #8
20000222:	4013      	ands	r3, r2
20000224:	d004      	beq.n	20000230 <graphic_read+0x60>
		select_controller(B_CS1);
20000226:	2008      	movs	r0, #8
20000228:	f7ff ff42 	bl	200000b0 <select_controller>
		graphic_wait_ready();
2000022c:	f7ff ff9b 	bl	20000166 <graphic_wait_ready>
	}
	if( controller & B_CS2 ) {
20000230:	1dfb      	adds	r3, r7, #7
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	2210      	movs	r2, #16
20000236:	4013      	ands	r3, r2
20000238:	d004      	beq.n	20000244 <graphic_read+0x74>
		select_controller(B_CS2);
2000023a:	2010      	movs	r0, #16
2000023c:	f7ff ff38 	bl	200000b0 <select_controller>
		graphic_wait_ready();
20000240:	f7ff ff91 	bl	20000166 <graphic_wait_ready>
	}
return c;
20000244:	230f      	movs	r3, #15
20000246:	18fb      	adds	r3, r7, r3
20000248:	781b      	ldrb	r3, [r3, #0]
}
2000024a:	0018      	movs	r0, r3
2000024c:	46bd      	mov	sp, r7
2000024e:	b004      	add	sp, #16
20000250:	bd80      	pop	{r7, pc}
20000252:	46c0      	nop			; (mov r8, r8)
20000254:	40021000 	andmi	r1, r2, r0
20000258:	00005555 	andeq	r5, r0, r5, asr r5
2000025c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000260 <graphic_read_data>:
static uint8_t graphic_read_data(uint8_t controller) {
20000260:	b580      	push	{r7, lr}
20000262:	b082      	sub	sp, #8
20000264:	af00      	add	r7, sp, #0
20000266:	0002      	movs	r2, r0
20000268:	1dfb      	adds	r3, r7, #7
2000026a:	701a      	strb	r2, [r3, #0]
graphic_read(controller);
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	0018      	movs	r0, r3
20000272:	f7ff ffad 	bl	200001d0 <graphic_read>
return graphic_read(controller);
20000276:	1dfb      	adds	r3, r7, #7
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	0018      	movs	r0, r3
2000027c:	f7ff ffa8 	bl	200001d0 <graphic_read>
20000280:	0003      	movs	r3, r0
}
20000282:	0018      	movs	r0, r3
20000284:	46bd      	mov	sp, r7
20000286:	b002      	add	sp, #8
20000288:	bd80      	pop	{r7, pc}

2000028a <graphic_write>:
static void graphic_write(uint8_t value, uint8_t controller) {
2000028a:	b580      	push	{r7, lr}
2000028c:	b082      	sub	sp, #8
2000028e:	af00      	add	r7, sp, #0
20000290:	0002      	movs	r2, r0
20000292:	1dfb      	adds	r3, r7, #7
20000294:	701a      	strb	r2, [r3, #0]
20000296:	1dbb      	adds	r3, r7, #6
20000298:	1c0a      	adds	r2, r1, #0
2000029a:	701a      	strb	r2, [r3, #0]
	GPIO_E.odr_high = value;
2000029c:	4a15      	ldr	r2, [pc, #84]	; (200002f4 <graphic_write+0x6a>)
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200002a4:	1dbb      	adds	r3, r7, #6
200002a6:	781b      	ldrb	r3, [r3, #0]
200002a8:	0018      	movs	r0, r3
200002aa:	f7ff ff01 	bl	200000b0 <select_controller>
	delay_500ns();
200002ae:	f000 fb47 	bl	20000940 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002b2:	2040      	movs	r0, #64	; 0x40
200002b4:	f7ff feac 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
200002b8:	f000 fb42 	bl	20000940 <delay_500ns>
	graphic_ctrl_bit_clear( B_E );
200002bc:	2040      	movs	r0, #64	; 0x40
200002be:	f7ff fecf 	bl	20000060 <graphic_ctrl_bit_clear>
	if(controller & B_CS1) {
200002c2:	1dbb      	adds	r3, r7, #6
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	2208      	movs	r2, #8
200002c8:	4013      	ands	r3, r2
200002ca:	d004      	beq.n	200002d6 <graphic_write+0x4c>
		select_controller( B_CS1);
200002cc:	2008      	movs	r0, #8
200002ce:	f7ff feef 	bl	200000b0 <select_controller>
		graphic_wait_ready();
200002d2:	f7ff ff48 	bl	20000166 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200002d6:	1dbb      	adds	r3, r7, #6
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2210      	movs	r2, #16
200002dc:	4013      	ands	r3, r2
200002de:	d004      	beq.n	200002ea <graphic_write+0x60>
		select_controller( B_CS2);
200002e0:	2010      	movs	r0, #16
200002e2:	f7ff fee5 	bl	200000b0 <select_controller>
		graphic_wait_ready();
200002e6:	f7ff ff3e 	bl	20000166 <graphic_wait_ready>
	}
}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	46bd      	mov	sp, r7
200002ee:	b002      	add	sp, #8
200002f0:	bd80      	pop	{r7, pc}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	40021000 	andmi	r1, r2, r0

200002f8 <graphic_write_command>:
static void graphic_write_command(uint8_t command, uint8_t controller) {
200002f8:	b580      	push	{r7, lr}
200002fa:	b082      	sub	sp, #8
200002fc:	af00      	add	r7, sp, #0
200002fe:	0002      	movs	r2, r0
20000300:	1dfb      	adds	r3, r7, #7
20000302:	701a      	strb	r2, [r3, #0]
20000304:	1dbb      	adds	r3, r7, #6
20000306:	1c0a      	adds	r2, r1, #0
20000308:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000030a:	2040      	movs	r0, #64	; 0x40
2000030c:	f7ff fea8 	bl	20000060 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000310:	1dbb      	adds	r3, r7, #6
20000312:	781b      	ldrb	r3, [r3, #0]
20000314:	0018      	movs	r0, r3
20000316:	f7ff fecb 	bl	200000b0 <select_controller>
	graphic_ctrl_bit_clear(B_RS|B_RW);
2000031a:	2003      	movs	r0, #3
2000031c:	f7ff fea0 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000320:	1dbb      	adds	r3, r7, #6
20000322:	781a      	ldrb	r2, [r3, #0]
20000324:	1dfb      	adds	r3, r7, #7
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0011      	movs	r1, r2
2000032a:	0018      	movs	r0, r3
2000032c:	f7ff ffad 	bl	2000028a <graphic_write>
}
20000330:	46c0      	nop			; (mov r8, r8)
20000332:	46bd      	mov	sp, r7
20000334:	b002      	add	sp, #8
20000336:	bd80      	pop	{r7, pc}

20000338 <graphic_write_data>:
static void graphic_write_data(uint8_t data, uint8_t controller) {
20000338:	b580      	push	{r7, lr}
2000033a:	b082      	sub	sp, #8
2000033c:	af00      	add	r7, sp, #0
2000033e:	0002      	movs	r2, r0
20000340:	1dfb      	adds	r3, r7, #7
20000342:	701a      	strb	r2, [r3, #0]
20000344:	1dbb      	adds	r3, r7, #6
20000346:	1c0a      	adds	r2, r1, #0
20000348:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000034a:	2040      	movs	r0, #64	; 0x40
2000034c:	f7ff fe88 	bl	20000060 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000350:	1dbb      	adds	r3, r7, #6
20000352:	781b      	ldrb	r3, [r3, #0]
20000354:	0018      	movs	r0, r3
20000356:	f7ff feab 	bl	200000b0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000035a:	2001      	movs	r0, #1
2000035c:	f7ff fe58 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000360:	2002      	movs	r0, #2
20000362:	f7ff fe7d 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000366:	1dbb      	adds	r3, r7, #6
20000368:	781a      	ldrb	r2, [r3, #0]
2000036a:	1dfb      	adds	r3, r7, #7
2000036c:	781b      	ldrb	r3, [r3, #0]
2000036e:	0011      	movs	r1, r2
20000370:	0018      	movs	r0, r3
20000372:	f7ff ff8a 	bl	2000028a <graphic_write>
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b002      	add	sp, #8
2000037c:	bd80      	pop	{r7, pc}

2000037e <graphic_clear_screen>:
void graphic_clear_screen(void) {
2000037e:	b580      	push	{r7, lr}
20000380:	b082      	sub	sp, #8
20000382:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
20000384:	1dbb      	adds	r3, r7, #6
20000386:	2200      	movs	r2, #0
20000388:	701a      	strb	r2, [r3, #0]
2000038a:	e023      	b.n	200003d4 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
2000038c:	1dbb      	adds	r3, r7, #6
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	2248      	movs	r2, #72	; 0x48
20000392:	4252      	negs	r2, r2
20000394:	4313      	orrs	r3, r2
20000396:	b2db      	uxtb	r3, r3
20000398:	2118      	movs	r1, #24
2000039a:	0018      	movs	r0, r3
2000039c:	f7ff ffac 	bl	200002f8 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200003a0:	2118      	movs	r1, #24
200003a2:	2040      	movs	r0, #64	; 0x40
200003a4:	f7ff ffa8 	bl	200002f8 <graphic_write_command>
		for(i = 0; i <= 63; i++){
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	2200      	movs	r2, #0
200003ac:	701a      	strb	r2, [r3, #0]
200003ae:	e008      	b.n	200003c2 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200003b0:	2118      	movs	r1, #24
200003b2:	2000      	movs	r0, #0
200003b4:	f7ff ffc0 	bl	20000338 <graphic_write_data>
		for(i = 0; i <= 63; i++){
200003b8:	1dfb      	adds	r3, r7, #7
200003ba:	781a      	ldrb	r2, [r3, #0]
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	3201      	adds	r2, #1
200003c0:	701a      	strb	r2, [r3, #0]
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	2b3f      	cmp	r3, #63	; 0x3f
200003c8:	d9f2      	bls.n	200003b0 <graphic_clear_screen+0x32>
	for(j = 0; j < 8; j++) {
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dbb      	adds	r3, r7, #6
200003d0:	3201      	adds	r2, #1
200003d2:	701a      	strb	r2, [r3, #0]
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	2b07      	cmp	r3, #7
200003da:	d9d7      	bls.n	2000038c <graphic_clear_screen+0xe>
		}
	}
}
200003dc:	46c0      	nop			; (mov r8, r8)
200003de:	46bd      	mov	sp, r7
200003e0:	b002      	add	sp, #8
200003e2:	bd80      	pop	{r7, pc}

200003e4 <pixel>:

void pixel(int x, int y, int set) {
200003e4:	b5b0      	push	{r4, r5, r7, lr}
200003e6:	b088      	sub	sp, #32
200003e8:	af00      	add	r7, sp, #0
200003ea:	60f8      	str	r0, [r7, #12]
200003ec:	60b9      	str	r1, [r7, #8]
200003ee:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200003f0:	68fb      	ldr	r3, [r7, #12]
200003f2:	2b00      	cmp	r3, #0
200003f4:	dc00      	bgt.n	200003f8 <pixel+0x14>
200003f6:	e0b6      	b.n	20000566 <pixel+0x182>
200003f8:	68bb      	ldr	r3, [r7, #8]
200003fa:	2b00      	cmp	r3, #0
200003fc:	dc00      	bgt.n	20000400 <pixel+0x1c>
200003fe:	e0b2      	b.n	20000566 <pixel+0x182>
20000400:	68fb      	ldr	r3, [r7, #12]
20000402:	2b80      	cmp	r3, #128	; 0x80
20000404:	dd00      	ble.n	20000408 <pixel+0x24>
20000406:	e0ae      	b.n	20000566 <pixel+0x182>
20000408:	68bb      	ldr	r3, [r7, #8]
2000040a:	2b40      	cmp	r3, #64	; 0x40
2000040c:	dd00      	ble.n	20000410 <pixel+0x2c>
2000040e:	e0aa      	b.n	20000566 <pixel+0x182>
	index = (y-1)/8;
20000410:	68bb      	ldr	r3, [r7, #8]
20000412:	3b01      	subs	r3, #1
20000414:	2b00      	cmp	r3, #0
20000416:	da00      	bge.n	2000041a <pixel+0x36>
20000418:	3307      	adds	r3, #7
2000041a:	10db      	asrs	r3, r3, #3
2000041c:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
2000041e:	68bb      	ldr	r3, [r7, #8]
20000420:	3b01      	subs	r3, #1
20000422:	4a53      	ldr	r2, [pc, #332]	; (20000570 <pixel+0x18c>)
20000424:	4013      	ands	r3, r2
20000426:	d504      	bpl.n	20000432 <pixel+0x4e>
20000428:	3b01      	subs	r3, #1
2000042a:	2208      	movs	r2, #8
2000042c:	4252      	negs	r2, r2
2000042e:	4313      	orrs	r3, r2
20000430:	3301      	adds	r3, #1
20000432:	2b07      	cmp	r3, #7
20000434:	d82c      	bhi.n	20000490 <pixel+0xac>
20000436:	009a      	lsls	r2, r3, #2
20000438:	4b4e      	ldr	r3, [pc, #312]	; (20000574 <pixel+0x190>)
2000043a:	18d3      	adds	r3, r2, r3
2000043c:	681b      	ldr	r3, [r3, #0]
2000043e:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000440:	231f      	movs	r3, #31
20000442:	18fb      	adds	r3, r7, r3
20000444:	2201      	movs	r2, #1
20000446:	701a      	strb	r2, [r3, #0]
20000448:	e022      	b.n	20000490 <pixel+0xac>
		case 1: mask = 2; break;
2000044a:	231f      	movs	r3, #31
2000044c:	18fb      	adds	r3, r7, r3
2000044e:	2202      	movs	r2, #2
20000450:	701a      	strb	r2, [r3, #0]
20000452:	e01d      	b.n	20000490 <pixel+0xac>
		case 2: mask = 4; break;
20000454:	231f      	movs	r3, #31
20000456:	18fb      	adds	r3, r7, r3
20000458:	2204      	movs	r2, #4
2000045a:	701a      	strb	r2, [r3, #0]
2000045c:	e018      	b.n	20000490 <pixel+0xac>
		case 3: mask = 8; break;
2000045e:	231f      	movs	r3, #31
20000460:	18fb      	adds	r3, r7, r3
20000462:	2208      	movs	r2, #8
20000464:	701a      	strb	r2, [r3, #0]
20000466:	e013      	b.n	20000490 <pixel+0xac>
		case 4: mask = 0x10; break;
20000468:	231f      	movs	r3, #31
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	2210      	movs	r2, #16
2000046e:	701a      	strb	r2, [r3, #0]
20000470:	e00e      	b.n	20000490 <pixel+0xac>
		case 5: mask = 0x20; break;
20000472:	231f      	movs	r3, #31
20000474:	18fb      	adds	r3, r7, r3
20000476:	2220      	movs	r2, #32
20000478:	701a      	strb	r2, [r3, #0]
2000047a:	e009      	b.n	20000490 <pixel+0xac>
		case 6: mask = 0x40; break;
2000047c:	231f      	movs	r3, #31
2000047e:	18fb      	adds	r3, r7, r3
20000480:	2240      	movs	r2, #64	; 0x40
20000482:	701a      	strb	r2, [r3, #0]
20000484:	e004      	b.n	20000490 <pixel+0xac>
		case 7: mask = 0x80; break;
20000486:	231f      	movs	r3, #31
20000488:	18fb      	adds	r3, r7, r3
2000048a:	2280      	movs	r2, #128	; 0x80
2000048c:	701a      	strb	r2, [r3, #0]
2000048e:	46c0      	nop			; (mov r8, r8)
	}
		if(set == 0)
20000490:	687b      	ldr	r3, [r7, #4]
20000492:	2b00      	cmp	r3, #0
20000494:	d105      	bne.n	200004a2 <pixel+0xbe>
			mask = ~mask;
20000496:	221f      	movs	r2, #31
20000498:	18bb      	adds	r3, r7, r2
2000049a:	18ba      	adds	r2, r7, r2
2000049c:	7812      	ldrb	r2, [r2, #0]
2000049e:	43d2      	mvns	r2, r2
200004a0:	701a      	strb	r2, [r3, #0]
		if(x > 64){
200004a2:	68fb      	ldr	r3, [r7, #12]
200004a4:	2b40      	cmp	r3, #64	; 0x40
200004a6:	dd07      	ble.n	200004b8 <pixel+0xd4>
			controller = B_CS2;
200004a8:	231e      	movs	r3, #30
200004aa:	18fb      	adds	r3, r7, r3
200004ac:	2210      	movs	r2, #16
200004ae:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200004b0:	68fb      	ldr	r3, [r7, #12]
200004b2:	3b41      	subs	r3, #65	; 0x41
200004b4:	60fb      	str	r3, [r7, #12]
200004b6:	e006      	b.n	200004c6 <pixel+0xe2>
		} 
		else {
		controller = B_CS1;
200004b8:	231e      	movs	r3, #30
200004ba:	18fb      	adds	r3, r7, r3
200004bc:	2208      	movs	r2, #8
200004be:	701a      	strb	r2, [r3, #0]
		x = x-1;
200004c0:	68fb      	ldr	r3, [r7, #12]
200004c2:	3b01      	subs	r3, #1
200004c4:	60fb      	str	r3, [r7, #12]
		}
		graphic_write_command(LCD_SET_ADD | x, controller );
200004c6:	68fb      	ldr	r3, [r7, #12]
200004c8:	b25b      	sxtb	r3, r3
200004ca:	2240      	movs	r2, #64	; 0x40
200004cc:	4313      	orrs	r3, r2
200004ce:	b25b      	sxtb	r3, r3
200004d0:	b2da      	uxtb	r2, r3
200004d2:	251e      	movs	r5, #30
200004d4:	197b      	adds	r3, r7, r5
200004d6:	781b      	ldrb	r3, [r3, #0]
200004d8:	0019      	movs	r1, r3
200004da:	0010      	movs	r0, r2
200004dc:	f7ff ff0c 	bl	200002f8 <graphic_write_command>
		graphic_write_command(LCD_SET_PAGE | index, controller );
200004e0:	69bb      	ldr	r3, [r7, #24]
200004e2:	b25b      	sxtb	r3, r3
200004e4:	2248      	movs	r2, #72	; 0x48
200004e6:	4252      	negs	r2, r2
200004e8:	4313      	orrs	r3, r2
200004ea:	b25b      	sxtb	r3, r3
200004ec:	b2da      	uxtb	r2, r3
200004ee:	197b      	adds	r3, r7, r5
200004f0:	781b      	ldrb	r3, [r3, #0]
200004f2:	0019      	movs	r1, r3
200004f4:	0010      	movs	r0, r2
200004f6:	f7ff feff 	bl	200002f8 <graphic_write_command>
		c = graphic_read_data(controller);
200004fa:	2317      	movs	r3, #23
200004fc:	18fc      	adds	r4, r7, r3
200004fe:	197b      	adds	r3, r7, r5
20000500:	781b      	ldrb	r3, [r3, #0]
20000502:	0018      	movs	r0, r3
20000504:	f7ff feac 	bl	20000260 <graphic_read_data>
20000508:	0003      	movs	r3, r0
2000050a:	7023      	strb	r3, [r4, #0]
		graphic_write_command(LCD_SET_ADD | x, controller);
2000050c:	68fb      	ldr	r3, [r7, #12]
2000050e:	b25b      	sxtb	r3, r3
20000510:	2240      	movs	r2, #64	; 0x40
20000512:	4313      	orrs	r3, r2
20000514:	b25b      	sxtb	r3, r3
20000516:	b2da      	uxtb	r2, r3
20000518:	197b      	adds	r3, r7, r5
2000051a:	781b      	ldrb	r3, [r3, #0]
2000051c:	0019      	movs	r1, r3
2000051e:	0010      	movs	r0, r2
20000520:	f7ff feea 	bl	200002f8 <graphic_write_command>
		if(set)
20000524:	687b      	ldr	r3, [r7, #4]
20000526:	2b00      	cmp	r3, #0
20000528:	d009      	beq.n	2000053e <pixel+0x15a>
			mask = mask | c;
2000052a:	221f      	movs	r2, #31
2000052c:	18bb      	adds	r3, r7, r2
2000052e:	18b9      	adds	r1, r7, r2
20000530:	2217      	movs	r2, #23
20000532:	18ba      	adds	r2, r7, r2
20000534:	7809      	ldrb	r1, [r1, #0]
20000536:	7812      	ldrb	r2, [r2, #0]
20000538:	430a      	orrs	r2, r1
2000053a:	701a      	strb	r2, [r3, #0]
2000053c:	e008      	b.n	20000550 <pixel+0x16c>
		else
			mask = mask & c;
2000053e:	221f      	movs	r2, #31
20000540:	18bb      	adds	r3, r7, r2
20000542:	18ba      	adds	r2, r7, r2
20000544:	2117      	movs	r1, #23
20000546:	1879      	adds	r1, r7, r1
20000548:	7812      	ldrb	r2, [r2, #0]
2000054a:	7809      	ldrb	r1, [r1, #0]
2000054c:	400a      	ands	r2, r1
2000054e:	701a      	strb	r2, [r3, #0]
		graphic_write_data(mask, controller);
20000550:	231e      	movs	r3, #30
20000552:	18fb      	adds	r3, r7, r3
20000554:	781a      	ldrb	r2, [r3, #0]
20000556:	231f      	movs	r3, #31
20000558:	18fb      	adds	r3, r7, r3
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	0011      	movs	r1, r2
2000055e:	0018      	movs	r0, r3
20000560:	f7ff feea 	bl	20000338 <graphic_write_data>
20000564:	e000      	b.n	20000568 <pixel+0x184>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000566:	46c0      	nop			; (mov r8, r8)
}
20000568:	46bd      	mov	sp, r7
2000056a:	b008      	add	sp, #32
2000056c:	bdb0      	pop	{r4, r5, r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	80000007 	andhi	r0, r0, r7
20000574:	2000116c 	andcs	r1, r0, ip, ror #2

20000578 <check_ball_collision>:

// Game object funcions.
void check_ball_collision(POBJECT O){ //Check if the ball hits anything.
20000578:	b590      	push	{r4, r7, lr}
2000057a:	b083      	sub	sp, #12
2000057c:	af00      	add	r7, sp, #0
2000057e:	6078      	str	r0, [r7, #4]
	// Check if hits left side. if it does P2 get point.
	if(O->posx < 1){
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	68db      	ldr	r3, [r3, #12]
20000584:	2b00      	cmp	r3, #0
20000586:	dc22      	bgt.n	200005ce <check_ball_collision+0x56>
		Player2.points = Player2.points + 1;
20000588:	4b70      	ldr	r3, [pc, #448]	; (2000074c <check_ball_collision+0x1d4>)
2000058a:	685b      	ldr	r3, [r3, #4]
2000058c:	1c5a      	adds	r2, r3, #1
2000058e:	4b6f      	ldr	r3, [pc, #444]	; (2000074c <check_ball_collision+0x1d4>)
20000590:	605a      	str	r2, [r3, #4]
		ascii_clear_dsplay();
20000592:	f000 fbcb 	bl	20000d2c <ascii_clear_dsplay>
		print_to_ascii(Player1.PAscii, ('0' + Player1.points), 1);
20000596:	4b6e      	ldr	r3, [pc, #440]	; (20000750 <check_ball_collision+0x1d8>)
20000598:	685b      	ldr	r3, [r3, #4]
2000059a:	3330      	adds	r3, #48	; 0x30
2000059c:	0019      	movs	r1, r3
2000059e:	4b6d      	ldr	r3, [pc, #436]	; (20000754 <check_ball_collision+0x1dc>)
200005a0:	2201      	movs	r2, #1
200005a2:	0018      	movs	r0, r3
200005a4:	f000 fbca 	bl	20000d3c <print_to_ascii>
		print_to_ascii(Player2.PAscii, ('0' + Player2.points), 2);
200005a8:	4b68      	ldr	r3, [pc, #416]	; (2000074c <check_ball_collision+0x1d4>)
200005aa:	685b      	ldr	r3, [r3, #4]
200005ac:	3330      	adds	r3, #48	; 0x30
200005ae:	0019      	movs	r1, r3
200005b0:	4b69      	ldr	r3, [pc, #420]	; (20000758 <check_ball_collision+0x1e0>)
200005b2:	2202      	movs	r2, #2
200005b4:	0018      	movs	r0, r3
200005b6:	f000 fbc1 	bl	20000d3c <print_to_ascii>
		O->set_pos(O,LCD_WIDTH/2,LCD_HEIGHT/2);
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200005be:	6878      	ldr	r0, [r7, #4]
200005c0:	2220      	movs	r2, #32
200005c2:	2140      	movs	r1, #64	; 0x40
200005c4:	4798      	blx	r3
		delay_milli(200);
200005c6:	20c8      	movs	r0, #200	; 0xc8
200005c8:	f000 f9dd 	bl	20000986 <delay_milli>
	else if(O->posx > Player2.objct->posx - O->geo->sizeX && Player2.objct->posy -2 <= O->posy && O->posy <= Player2.objct->posy + Player2.objct->geo->sizeY +1 && O->posx < Player2.objct->posx + 4 ){
		O->dirx = -(O->dirx);
		O->set_pos(O, Player2.objct->posx - 5, O->posy);
		Player2.objct->draw(Player2.objct);
	}
}
200005cc:	e0b9      	b.n	20000742 <check_ball_collision+0x1ca>
	else if(O->posx > LCD_WIDTH){
200005ce:	687b      	ldr	r3, [r7, #4]
200005d0:	68db      	ldr	r3, [r3, #12]
200005d2:	2b80      	cmp	r3, #128	; 0x80
200005d4:	dd22      	ble.n	2000061c <check_ball_collision+0xa4>
		Player1.points = Player1.points + 1;
200005d6:	4b5e      	ldr	r3, [pc, #376]	; (20000750 <check_ball_collision+0x1d8>)
200005d8:	685b      	ldr	r3, [r3, #4]
200005da:	1c5a      	adds	r2, r3, #1
200005dc:	4b5c      	ldr	r3, [pc, #368]	; (20000750 <check_ball_collision+0x1d8>)
200005de:	605a      	str	r2, [r3, #4]
		ascii_clear_dsplay();
200005e0:	f000 fba4 	bl	20000d2c <ascii_clear_dsplay>
		print_to_ascii(Player1.PAscii, ('0' + Player1.points), 1);
200005e4:	4b5a      	ldr	r3, [pc, #360]	; (20000750 <check_ball_collision+0x1d8>)
200005e6:	685b      	ldr	r3, [r3, #4]
200005e8:	3330      	adds	r3, #48	; 0x30
200005ea:	0019      	movs	r1, r3
200005ec:	4b59      	ldr	r3, [pc, #356]	; (20000754 <check_ball_collision+0x1dc>)
200005ee:	2201      	movs	r2, #1
200005f0:	0018      	movs	r0, r3
200005f2:	f000 fba3 	bl	20000d3c <print_to_ascii>
		print_to_ascii(Player2.PAscii, ('0' + Player2.points), 2);
200005f6:	4b55      	ldr	r3, [pc, #340]	; (2000074c <check_ball_collision+0x1d4>)
200005f8:	685b      	ldr	r3, [r3, #4]
200005fa:	3330      	adds	r3, #48	; 0x30
200005fc:	0019      	movs	r1, r3
200005fe:	4b56      	ldr	r3, [pc, #344]	; (20000758 <check_ball_collision+0x1e0>)
20000600:	2202      	movs	r2, #2
20000602:	0018      	movs	r0, r3
20000604:	f000 fb9a 	bl	20000d3c <print_to_ascii>
		O->set_pos(O,LCD_WIDTH/2,LCD_HEIGHT/2);
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000060c:	6878      	ldr	r0, [r7, #4]
2000060e:	2220      	movs	r2, #32
20000610:	2140      	movs	r1, #64	; 0x40
20000612:	4798      	blx	r3
		delay_milli(200);
20000614:	20c8      	movs	r0, #200	; 0xc8
20000616:	f000 f9b6 	bl	20000986 <delay_milli>
}
2000061a:	e092      	b.n	20000742 <check_ball_collision+0x1ca>
	else if(O->posy < 3 || O->posy >= LCD_HEIGHT - O->geo->sizeY){
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	691b      	ldr	r3, [r3, #16]
20000620:	2b02      	cmp	r3, #2
20000622:	dd08      	ble.n	20000636 <check_ball_collision+0xbe>
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	691a      	ldr	r2, [r3, #16]
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	681b      	ldr	r3, [r3, #0]
2000062c:	689b      	ldr	r3, [r3, #8]
2000062e:	2140      	movs	r1, #64	; 0x40
20000630:	1acb      	subs	r3, r1, r3
20000632:	429a      	cmp	r2, r3
20000634:	db05      	blt.n	20000642 <check_ball_collision+0xca>
		O->diry = -(O->diry);
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	689b      	ldr	r3, [r3, #8]
2000063a:	425a      	negs	r2, r3
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	609a      	str	r2, [r3, #8]
20000640:	e07f      	b.n	20000742 <check_ball_collision+0x1ca>
	else if(O->posx < Player1.objct->posx + O->geo->sizeX && Player1.objct->posy -2 <= O->posy && O->posy <= Player1.objct->posy + Player1.objct->geo->sizeY +1 && O->posx > Player1.objct->posx - 4 ){
20000642:	687b      	ldr	r3, [r7, #4]
20000644:	68da      	ldr	r2, [r3, #12]
20000646:	4b42      	ldr	r3, [pc, #264]	; (20000750 <check_ball_collision+0x1d8>)
20000648:	681b      	ldr	r3, [r3, #0]
2000064a:	68d9      	ldr	r1, [r3, #12]
2000064c:	687b      	ldr	r3, [r7, #4]
2000064e:	681b      	ldr	r3, [r3, #0]
20000650:	685b      	ldr	r3, [r3, #4]
20000652:	18cb      	adds	r3, r1, r3
20000654:	429a      	cmp	r2, r3
20000656:	da34      	bge.n	200006c2 <check_ball_collision+0x14a>
20000658:	4b3d      	ldr	r3, [pc, #244]	; (20000750 <check_ball_collision+0x1d8>)
2000065a:	681b      	ldr	r3, [r3, #0]
2000065c:	691b      	ldr	r3, [r3, #16]
2000065e:	1e9a      	subs	r2, r3, #2
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	691b      	ldr	r3, [r3, #16]
20000664:	429a      	cmp	r2, r3
20000666:	dc2c      	bgt.n	200006c2 <check_ball_collision+0x14a>
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	691a      	ldr	r2, [r3, #16]
2000066c:	4b38      	ldr	r3, [pc, #224]	; (20000750 <check_ball_collision+0x1d8>)
2000066e:	681b      	ldr	r3, [r3, #0]
20000670:	6919      	ldr	r1, [r3, #16]
20000672:	4b37      	ldr	r3, [pc, #220]	; (20000750 <check_ball_collision+0x1d8>)
20000674:	681b      	ldr	r3, [r3, #0]
20000676:	681b      	ldr	r3, [r3, #0]
20000678:	689b      	ldr	r3, [r3, #8]
2000067a:	18cb      	adds	r3, r1, r3
2000067c:	3301      	adds	r3, #1
2000067e:	429a      	cmp	r2, r3
20000680:	dc1f      	bgt.n	200006c2 <check_ball_collision+0x14a>
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	68da      	ldr	r2, [r3, #12]
20000686:	4b32      	ldr	r3, [pc, #200]	; (20000750 <check_ball_collision+0x1d8>)
20000688:	681b      	ldr	r3, [r3, #0]
2000068a:	68db      	ldr	r3, [r3, #12]
2000068c:	3b04      	subs	r3, #4
2000068e:	429a      	cmp	r2, r3
20000690:	dd17      	ble.n	200006c2 <check_ball_collision+0x14a>
		O->dirx = -(O->dirx);
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	685b      	ldr	r3, [r3, #4]
20000696:	425a      	negs	r2, r3
20000698:	687b      	ldr	r3, [r7, #4]
2000069a:	605a      	str	r2, [r3, #4]
		O->set_pos(O, Player1.objct->posx + 5, O->posy);
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
200006a0:	4b2b      	ldr	r3, [pc, #172]	; (20000750 <check_ball_collision+0x1d8>)
200006a2:	681b      	ldr	r3, [r3, #0]
200006a4:	68db      	ldr	r3, [r3, #12]
200006a6:	1d59      	adds	r1, r3, #5
200006a8:	687b      	ldr	r3, [r7, #4]
200006aa:	691a      	ldr	r2, [r3, #16]
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	0018      	movs	r0, r3
200006b0:	47a0      	blx	r4
		Player1.objct->draw(Player1.objct);
200006b2:	4b27      	ldr	r3, [pc, #156]	; (20000750 <check_ball_collision+0x1d8>)
200006b4:	681b      	ldr	r3, [r3, #0]
200006b6:	695a      	ldr	r2, [r3, #20]
200006b8:	4b25      	ldr	r3, [pc, #148]	; (20000750 <check_ball_collision+0x1d8>)
200006ba:	681b      	ldr	r3, [r3, #0]
200006bc:	0018      	movs	r0, r3
200006be:	4790      	blx	r2
200006c0:	e03f      	b.n	20000742 <check_ball_collision+0x1ca>
	else if(O->posx > Player2.objct->posx - O->geo->sizeX && Player2.objct->posy -2 <= O->posy && O->posy <= Player2.objct->posy + Player2.objct->geo->sizeY +1 && O->posx < Player2.objct->posx + 4 ){
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	68da      	ldr	r2, [r3, #12]
200006c6:	4b21      	ldr	r3, [pc, #132]	; (2000074c <check_ball_collision+0x1d4>)
200006c8:	681b      	ldr	r3, [r3, #0]
200006ca:	68d9      	ldr	r1, [r3, #12]
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	681b      	ldr	r3, [r3, #0]
200006d0:	685b      	ldr	r3, [r3, #4]
200006d2:	1acb      	subs	r3, r1, r3
200006d4:	429a      	cmp	r2, r3
200006d6:	dd34      	ble.n	20000742 <check_ball_collision+0x1ca>
200006d8:	4b1c      	ldr	r3, [pc, #112]	; (2000074c <check_ball_collision+0x1d4>)
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	691b      	ldr	r3, [r3, #16]
200006de:	1e9a      	subs	r2, r3, #2
200006e0:	687b      	ldr	r3, [r7, #4]
200006e2:	691b      	ldr	r3, [r3, #16]
200006e4:	429a      	cmp	r2, r3
200006e6:	dc2c      	bgt.n	20000742 <check_ball_collision+0x1ca>
200006e8:	687b      	ldr	r3, [r7, #4]
200006ea:	691a      	ldr	r2, [r3, #16]
200006ec:	4b17      	ldr	r3, [pc, #92]	; (2000074c <check_ball_collision+0x1d4>)
200006ee:	681b      	ldr	r3, [r3, #0]
200006f0:	6919      	ldr	r1, [r3, #16]
200006f2:	4b16      	ldr	r3, [pc, #88]	; (2000074c <check_ball_collision+0x1d4>)
200006f4:	681b      	ldr	r3, [r3, #0]
200006f6:	681b      	ldr	r3, [r3, #0]
200006f8:	689b      	ldr	r3, [r3, #8]
200006fa:	18cb      	adds	r3, r1, r3
200006fc:	3301      	adds	r3, #1
200006fe:	429a      	cmp	r2, r3
20000700:	dc1f      	bgt.n	20000742 <check_ball_collision+0x1ca>
20000702:	687b      	ldr	r3, [r7, #4]
20000704:	68da      	ldr	r2, [r3, #12]
20000706:	4b11      	ldr	r3, [pc, #68]	; (2000074c <check_ball_collision+0x1d4>)
20000708:	681b      	ldr	r3, [r3, #0]
2000070a:	68db      	ldr	r3, [r3, #12]
2000070c:	3304      	adds	r3, #4
2000070e:	429a      	cmp	r2, r3
20000710:	da17      	bge.n	20000742 <check_ball_collision+0x1ca>
		O->dirx = -(O->dirx);
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	685b      	ldr	r3, [r3, #4]
20000716:	425a      	negs	r2, r3
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	605a      	str	r2, [r3, #4]
		O->set_pos(O, Player2.objct->posx - 5, O->posy);
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
20000720:	4b0a      	ldr	r3, [pc, #40]	; (2000074c <check_ball_collision+0x1d4>)
20000722:	681b      	ldr	r3, [r3, #0]
20000724:	68db      	ldr	r3, [r3, #12]
20000726:	1f59      	subs	r1, r3, #5
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	691a      	ldr	r2, [r3, #16]
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	0018      	movs	r0, r3
20000730:	47a0      	blx	r4
		Player2.objct->draw(Player2.objct);
20000732:	4b06      	ldr	r3, [pc, #24]	; (2000074c <check_ball_collision+0x1d4>)
20000734:	681b      	ldr	r3, [r3, #0]
20000736:	695a      	ldr	r2, [r3, #20]
20000738:	4b04      	ldr	r3, [pc, #16]	; (2000074c <check_ball_collision+0x1d4>)
2000073a:	681b      	ldr	r3, [r3, #0]
2000073c:	0018      	movs	r0, r3
2000073e:	4790      	blx	r2
}
20000740:	e7ff      	b.n	20000742 <check_ball_collision+0x1ca>
20000742:	46c0      	nop			; (mov r8, r8)
20000744:	46bd      	mov	sp, r7
20000746:	b003      	add	sp, #12
20000748:	bd90      	pop	{r4, r7, pc}
2000074a:	46c0      	nop			; (mov r8, r8)
2000074c:	2000114c 	andcs	r1, r0, ip, asr #2
20000750:	2000112c 	andcs	r1, r0, ip, lsr #2
20000754:	20001134 	andcs	r1, r0, r4, lsr r1
20000758:	20001154 	andcs	r1, r0, r4, asr r1

2000075c <set_object_speed>:
void set_object_speed(POBJECT O, int speedx, int speedy){
2000075c:	b580      	push	{r7, lr}
2000075e:	b084      	sub	sp, #16
20000760:	af00      	add	r7, sp, #0
20000762:	60f8      	str	r0, [r7, #12]
20000764:	60b9      	str	r1, [r7, #8]
20000766:	607a      	str	r2, [r7, #4]
	O->dirx = speedx;
20000768:	68fb      	ldr	r3, [r7, #12]
2000076a:	68ba      	ldr	r2, [r7, #8]
2000076c:	605a      	str	r2, [r3, #4]
	O->diry = speedy;
2000076e:	68fb      	ldr	r3, [r7, #12]
20000770:	687a      	ldr	r2, [r7, #4]
20000772:	609a      	str	r2, [r3, #8]
}
20000774:	46c0      	nop			; (mov r8, r8)
20000776:	46bd      	mov	sp, r7
20000778:	b004      	add	sp, #16
2000077a:	bd80      	pop	{r7, pc}

2000077c <draw_object>:
void draw_object(POBJECT O){
2000077c:	b580      	push	{r7, lr}
2000077e:	b084      	sub	sp, #16
20000780:	af00      	add	r7, sp, #0
20000782:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS ;i++){
20000784:	2300      	movs	r3, #0
20000786:	60fb      	str	r3, [r7, #12]
20000788:	e01c      	b.n	200007c4 <draw_object+0x48>
		pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 1);
2000078a:	687b      	ldr	r3, [r7, #4]
2000078c:	68da      	ldr	r2, [r3, #12]
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	6819      	ldr	r1, [r3, #0]
20000792:	68fb      	ldr	r3, [r7, #12]
20000794:	3304      	adds	r3, #4
20000796:	005b      	lsls	r3, r3, #1
20000798:	18cb      	adds	r3, r1, r3
2000079a:	3304      	adds	r3, #4
2000079c:	781b      	ldrb	r3, [r3, #0]
2000079e:	18d0      	adds	r0, r2, r3
200007a0:	687b      	ldr	r3, [r7, #4]
200007a2:	691a      	ldr	r2, [r3, #16]
200007a4:	687b      	ldr	r3, [r7, #4]
200007a6:	6819      	ldr	r1, [r3, #0]
200007a8:	68fb      	ldr	r3, [r7, #12]
200007aa:	3304      	adds	r3, #4
200007ac:	005b      	lsls	r3, r3, #1
200007ae:	18cb      	adds	r3, r1, r3
200007b0:	3305      	adds	r3, #5
200007b2:	781b      	ldrb	r3, [r3, #0]
200007b4:	18d3      	adds	r3, r2, r3
200007b6:	2201      	movs	r2, #1
200007b8:	0019      	movs	r1, r3
200007ba:	f7ff fe13 	bl	200003e4 <pixel>
	for(int i = 0; i < MAX_POINTS ;i++){
200007be:	68fb      	ldr	r3, [r7, #12]
200007c0:	3301      	adds	r3, #1
200007c2:	60fb      	str	r3, [r7, #12]
200007c4:	68fb      	ldr	r3, [r7, #12]
200007c6:	2b0d      	cmp	r3, #13
200007c8:	dddf      	ble.n	2000078a <draw_object+0xe>
	}
}
200007ca:	46c0      	nop			; (mov r8, r8)
200007cc:	46bd      	mov	sp, r7
200007ce:	b004      	add	sp, #16
200007d0:	bd80      	pop	{r7, pc}

200007d2 <clear_object>:
void clear_object(POBJECT O){
200007d2:	b580      	push	{r7, lr}
200007d4:	b084      	sub	sp, #16
200007d6:	af00      	add	r7, sp, #0
200007d8:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++){
200007da:	2300      	movs	r3, #0
200007dc:	60fb      	str	r3, [r7, #12]
200007de:	e01c      	b.n	2000081a <clear_object+0x48>
		pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 0);
200007e0:	687b      	ldr	r3, [r7, #4]
200007e2:	68da      	ldr	r2, [r3, #12]
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	6819      	ldr	r1, [r3, #0]
200007e8:	68fb      	ldr	r3, [r7, #12]
200007ea:	3304      	adds	r3, #4
200007ec:	005b      	lsls	r3, r3, #1
200007ee:	18cb      	adds	r3, r1, r3
200007f0:	3304      	adds	r3, #4
200007f2:	781b      	ldrb	r3, [r3, #0]
200007f4:	18d0      	adds	r0, r2, r3
200007f6:	687b      	ldr	r3, [r7, #4]
200007f8:	691a      	ldr	r2, [r3, #16]
200007fa:	687b      	ldr	r3, [r7, #4]
200007fc:	6819      	ldr	r1, [r3, #0]
200007fe:	68fb      	ldr	r3, [r7, #12]
20000800:	3304      	adds	r3, #4
20000802:	005b      	lsls	r3, r3, #1
20000804:	18cb      	adds	r3, r1, r3
20000806:	3305      	adds	r3, #5
20000808:	781b      	ldrb	r3, [r3, #0]
2000080a:	18d3      	adds	r3, r2, r3
2000080c:	2200      	movs	r2, #0
2000080e:	0019      	movs	r1, r3
20000810:	f7ff fde8 	bl	200003e4 <pixel>
	for(int i = 0; i < MAX_POINTS; i++){
20000814:	68fb      	ldr	r3, [r7, #12]
20000816:	3301      	adds	r3, #1
20000818:	60fb      	str	r3, [r7, #12]
2000081a:	68fb      	ldr	r3, [r7, #12]
2000081c:	2b0d      	cmp	r3, #13
2000081e:	dddf      	ble.n	200007e0 <clear_object+0xe>
	}
}
20000820:	46c0      	nop			; (mov r8, r8)
20000822:	46bd      	mov	sp, r7
20000824:	b004      	add	sp, #16
20000826:	bd80      	pop	{r7, pc}

20000828 <set_pos>:
void set_pos(POBJECT O, int x, int y){
20000828:	b580      	push	{r7, lr}
2000082a:	b084      	sub	sp, #16
2000082c:	af00      	add	r7, sp, #0
2000082e:	60f8      	str	r0, [r7, #12]
20000830:	60b9      	str	r1, [r7, #8]
20000832:	607a      	str	r2, [r7, #4]
	O->posx = x;
20000834:	68fb      	ldr	r3, [r7, #12]
20000836:	68ba      	ldr	r2, [r7, #8]
20000838:	60da      	str	r2, [r3, #12]
	O->posy = y;
2000083a:	68fb      	ldr	r3, [r7, #12]
2000083c:	687a      	ldr	r2, [r7, #4]
2000083e:	611a      	str	r2, [r3, #16]
}
20000840:	46c0      	nop			; (mov r8, r8)
20000842:	46bd      	mov	sp, r7
20000844:	b004      	add	sp, #16
20000846:	bd80      	pop	{r7, pc}

20000848 <move_ball>:
void move_ball(POBJECT O){
20000848:	b580      	push	{r7, lr}
2000084a:	b082      	sub	sp, #8
2000084c:	af00      	add	r7, sp, #0
2000084e:	6078      	str	r0, [r7, #4]
	clear_object(O);
20000850:	687b      	ldr	r3, [r7, #4]
20000852:	0018      	movs	r0, r3
20000854:	f7ff ffbd 	bl	200007d2 <clear_object>
	O->check_ball_collision(O);
20000858:	687b      	ldr	r3, [r7, #4]
2000085a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
2000085c:	687a      	ldr	r2, [r7, #4]
2000085e:	0010      	movs	r0, r2
20000860:	4798      	blx	r3
	O->posx += O->dirx;
20000862:	687b      	ldr	r3, [r7, #4]
20000864:	68da      	ldr	r2, [r3, #12]
20000866:	687b      	ldr	r3, [r7, #4]
20000868:	685b      	ldr	r3, [r3, #4]
2000086a:	18d2      	adds	r2, r2, r3
2000086c:	687b      	ldr	r3, [r7, #4]
2000086e:	60da      	str	r2, [r3, #12]
	O->posy += O->diry;
20000870:	687b      	ldr	r3, [r7, #4]
20000872:	691a      	ldr	r2, [r3, #16]
20000874:	687b      	ldr	r3, [r7, #4]
20000876:	689b      	ldr	r3, [r3, #8]
20000878:	18d2      	adds	r2, r2, r3
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	611a      	str	r2, [r3, #16]
	draw_object(O);
2000087e:	687b      	ldr	r3, [r7, #4]
20000880:	0018      	movs	r0, r3
20000882:	f7ff ff7b 	bl	2000077c <draw_object>
}
20000886:	46c0      	nop			; (mov r8, r8)
20000888:	46bd      	mov	sp, r7
2000088a:	b002      	add	sp, #8
2000088c:	bd80      	pop	{r7, pc}

2000088e <move_bouncer>:
void move_bouncer(POBJECT O){
2000088e:	b580      	push	{r7, lr}
20000890:	b082      	sub	sp, #8
20000892:	af00      	add	r7, sp, #0
20000894:	6078      	str	r0, [r7, #4]
	clear_object(O);
20000896:	687b      	ldr	r3, [r7, #4]
20000898:	0018      	movs	r0, r3
2000089a:	f7ff ff9a 	bl	200007d2 <clear_object>
	// Check if at top or bottom of scren and if so change the Y-dirrection.
	if(O->posy > 3 && O->diry < 0){
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	691b      	ldr	r3, [r3, #16]
200008a2:	2b03      	cmp	r3, #3
200008a4:	dd0b      	ble.n	200008be <move_bouncer+0x30>
200008a6:	687b      	ldr	r3, [r7, #4]
200008a8:	689b      	ldr	r3, [r3, #8]
200008aa:	2b00      	cmp	r3, #0
200008ac:	da07      	bge.n	200008be <move_bouncer+0x30>
		O->posy += O->diry;
200008ae:	687b      	ldr	r3, [r7, #4]
200008b0:	691a      	ldr	r2, [r3, #16]
200008b2:	687b      	ldr	r3, [r7, #4]
200008b4:	689b      	ldr	r3, [r3, #8]
200008b6:	18d2      	adds	r2, r2, r3
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	611a      	str	r2, [r3, #16]
200008bc:	e013      	b.n	200008e6 <move_bouncer+0x58>
	}
	else if(O->posy < LCD_HEIGHT - O->geo->sizeY-2 && O->diry > 0){
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	691a      	ldr	r2, [r3, #16]
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	681b      	ldr	r3, [r3, #0]
200008c6:	689b      	ldr	r3, [r3, #8]
200008c8:	213e      	movs	r1, #62	; 0x3e
200008ca:	1acb      	subs	r3, r1, r3
200008cc:	429a      	cmp	r2, r3
200008ce:	da0a      	bge.n	200008e6 <move_bouncer+0x58>
200008d0:	687b      	ldr	r3, [r7, #4]
200008d2:	689b      	ldr	r3, [r3, #8]
200008d4:	2b00      	cmp	r3, #0
200008d6:	dd06      	ble.n	200008e6 <move_bouncer+0x58>
		O->posy += O->diry;
200008d8:	687b      	ldr	r3, [r7, #4]
200008da:	691a      	ldr	r2, [r3, #16]
200008dc:	687b      	ldr	r3, [r7, #4]
200008de:	689b      	ldr	r3, [r3, #8]
200008e0:	18d2      	adds	r2, r2, r3
200008e2:	687b      	ldr	r3, [r7, #4]
200008e4:	611a      	str	r2, [r3, #16]
	}
	//Move the bouncer to the new cordinates.
	
	//Set diry to zero so the bouncer stops.
	O->diry = 0;
200008e6:	687b      	ldr	r3, [r7, #4]
200008e8:	2200      	movs	r2, #0
200008ea:	609a      	str	r2, [r3, #8]
	draw_object(O);
200008ec:	687b      	ldr	r3, [r7, #4]
200008ee:	0018      	movs	r0, r3
200008f0:	f7ff ff44 	bl	2000077c <draw_object>
	
}
200008f4:	46c0      	nop			; (mov r8, r8)
200008f6:	46bd      	mov	sp, r7
200008f8:	b002      	add	sp, #8
200008fa:	bd80      	pop	{r7, pc}

200008fc <delay_250ns>:

//Delay funktioner
void delay_250ns ( void ) {
200008fc:	b580      	push	{r7, lr}
200008fe:	af00      	add	r7, sp, #0
		*STK_CTRL = 0x00;
20000900:	4b0c      	ldr	r3, [pc, #48]	; (20000934 <delay_250ns+0x38>)
20000902:	2200      	movs	r2, #0
20000904:	601a      	str	r2, [r3, #0]
		*STK_LOAD = ((168/4) - 1);
20000906:	4b0c      	ldr	r3, [pc, #48]	; (20000938 <delay_250ns+0x3c>)
20000908:	2229      	movs	r2, #41	; 0x29
2000090a:	601a      	str	r2, [r3, #0]
		*STK_VAL = 0;
2000090c:	4b0b      	ldr	r3, [pc, #44]	; (2000093c <delay_250ns+0x40>)
2000090e:	2200      	movs	r2, #0
20000910:	601a      	str	r2, [r3, #0]
		*STK_CTRL = 5;
20000912:	4b08      	ldr	r3, [pc, #32]	; (20000934 <delay_250ns+0x38>)
20000914:	2205      	movs	r2, #5
20000916:	601a      	str	r2, [r3, #0]
		while ((*STK_CTRL & 0x10000) == 0){}
20000918:	46c0      	nop			; (mov r8, r8)
2000091a:	4b06      	ldr	r3, [pc, #24]	; (20000934 <delay_250ns+0x38>)
2000091c:	681a      	ldr	r2, [r3, #0]
2000091e:	2380      	movs	r3, #128	; 0x80
20000920:	025b      	lsls	r3, r3, #9
20000922:	4013      	ands	r3, r2
20000924:	d0f9      	beq.n	2000091a <delay_250ns+0x1e>
		*STK_CTRL = 0;
20000926:	4b03      	ldr	r3, [pc, #12]	; (20000934 <delay_250ns+0x38>)
20000928:	2200      	movs	r2, #0
2000092a:	601a      	str	r2, [r3, #0]
}
2000092c:	46c0      	nop			; (mov r8, r8)
2000092e:	46bd      	mov	sp, r7
20000930:	bd80      	pop	{r7, pc}
20000932:	46c0      	nop			; (mov r8, r8)
20000934:	e000e010 	and	lr, r0, r0, lsl r0
20000938:	e000e014 	and	lr, r0, r4, lsl r0
2000093c:	e000e018 	and	lr, r0, r8, lsl r0

20000940 <delay_500ns>:
void delay_500ns(void){
20000940:	b580      	push	{r7, lr}
20000942:	af00      	add	r7, sp, #0
	delay_250ns();
20000944:	f7ff ffda 	bl	200008fc <delay_250ns>
	delay_250ns();
20000948:	f7ff ffd8 	bl	200008fc <delay_250ns>
}
2000094c:	46c0      	nop			; (mov r8, r8)
2000094e:	46bd      	mov	sp, r7
20000950:	bd80      	pop	{r7, pc}

20000952 <delay_mikro>:
void delay_mikro (unsigned int us){
20000952:	b580      	push	{r7, lr}
20000954:	b084      	sub	sp, #16
20000956:	af00      	add	r7, sp, #0
20000958:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < us; i++) {
2000095a:	2300      	movs	r3, #0
2000095c:	60fb      	str	r3, [r7, #12]
2000095e:	e00a      	b.n	20000976 <delay_mikro+0x24>
		delay_250ns();
20000960:	f7ff ffcc 	bl	200008fc <delay_250ns>
		delay_250ns();
20000964:	f7ff ffca 	bl	200008fc <delay_250ns>
		delay_250ns();
20000968:	f7ff ffc8 	bl	200008fc <delay_250ns>
		delay_250ns();
2000096c:	f7ff ffc6 	bl	200008fc <delay_250ns>
	for (int i = 0; i < us; i++) {
20000970:	68fb      	ldr	r3, [r7, #12]
20000972:	3301      	adds	r3, #1
20000974:	60fb      	str	r3, [r7, #12]
20000976:	68fb      	ldr	r3, [r7, #12]
20000978:	687a      	ldr	r2, [r7, #4]
2000097a:	429a      	cmp	r2, r3
2000097c:	d8f0      	bhi.n	20000960 <delay_mikro+0xe>
		}
}	
2000097e:	46c0      	nop			; (mov r8, r8)
20000980:	46bd      	mov	sp, r7
20000982:	b004      	add	sp, #16
20000984:	bd80      	pop	{r7, pc}

20000986 <delay_milli>:
void delay_milli (unsigned int ms){
20000986:	b580      	push	{r7, lr}
20000988:	b082      	sub	sp, #8
2000098a:	af00      	add	r7, sp, #0
2000098c:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(1);
	#else
		delay_mikro(ms * 1000);
2000098e:	687a      	ldr	r2, [r7, #4]
20000990:	0013      	movs	r3, r2
20000992:	015b      	lsls	r3, r3, #5
20000994:	1a9b      	subs	r3, r3, r2
20000996:	009b      	lsls	r3, r3, #2
20000998:	189b      	adds	r3, r3, r2
2000099a:	00db      	lsls	r3, r3, #3
2000099c:	0018      	movs	r0, r3
2000099e:	f7ff ffd8 	bl	20000952 <delay_mikro>
	#endif
}
200009a2:	46c0      	nop			; (mov r8, r8)
200009a4:	46bd      	mov	sp, r7
200009a6:	b002      	add	sp, #8
200009a8:	bd80      	pop	{r7, pc}

200009aa <keyb>:

//Keypad Funktioner
unsigned char keyb(void){
200009aa:	b580      	push	{r7, lr}
200009ac:	b082      	sub	sp, #8
200009ae:	af00      	add	r7, sp, #0
	int row, column;
	for (row = 1; row <= 4; row++){
200009b0:	2301      	movs	r3, #1
200009b2:	607b      	str	r3, [r7, #4]
200009b4:	e019      	b.n	200009ea <keyb+0x40>
		ActivateRow(row);
200009b6:	687b      	ldr	r3, [r7, #4]
200009b8:	0018      	movs	r0, r3
200009ba:	f000 f823 	bl	20000a04 <ActivateRow>
		if (column = ReadColumn()){
200009be:	f000 f84d 	bl	20000a5c <ReadColumn>
200009c2:	0003      	movs	r3, r0
200009c4:	603b      	str	r3, [r7, #0]
200009c6:	683b      	ldr	r3, [r7, #0]
200009c8:	2b00      	cmp	r3, #0
200009ca:	d00b      	beq.n	200009e4 <keyb+0x3a>
			ActivateRow(0);
200009cc:	2000      	movs	r0, #0
200009ce:	f000 f819 	bl	20000a04 <ActivateRow>
			return Key[4*(row-1) + (column-1)];
200009d2:	687b      	ldr	r3, [r7, #4]
200009d4:	3b01      	subs	r3, #1
200009d6:	009a      	lsls	r2, r3, #2
200009d8:	683b      	ldr	r3, [r7, #0]
200009da:	3b01      	subs	r3, #1
200009dc:	18d3      	adds	r3, r2, r3
200009de:	4a08      	ldr	r2, [pc, #32]	; (20000a00 <keyb+0x56>)
200009e0:	5cd3      	ldrb	r3, [r2, r3]
200009e2:	e009      	b.n	200009f8 <keyb+0x4e>
	for (row = 1; row <= 4; row++){
200009e4:	687b      	ldr	r3, [r7, #4]
200009e6:	3301      	adds	r3, #1
200009e8:	607b      	str	r3, [r7, #4]
200009ea:	687b      	ldr	r3, [r7, #4]
200009ec:	2b04      	cmp	r3, #4
200009ee:	dde2      	ble.n	200009b6 <keyb+0xc>
		}
	}
	ActivateRow(0);
200009f0:	2000      	movs	r0, #0
200009f2:	f000 f807 	bl	20000a04 <ActivateRow>
	return 0xFF;
200009f6:	23ff      	movs	r3, #255	; 0xff
}
200009f8:	0018      	movs	r0, r3
200009fa:	46bd      	mov	sp, r7
200009fc:	b002      	add	sp, #8
200009fe:	bd80      	pop	{r7, pc}
20000a00:	20001048 	andcs	r1, r0, r8, asr #32

20000a04 <ActivateRow>:
void ActivateRow(char row){
20000a04:	b580      	push	{r7, lr}
20000a06:	b082      	sub	sp, #8
20000a08:	af00      	add	r7, sp, #0
20000a0a:	0002      	movs	r2, r0
20000a0c:	1dfb      	adds	r3, r7, #7
20000a0e:	701a      	strb	r2, [r3, #0]
	switch(row){
20000a10:	1dfb      	adds	r3, r7, #7
20000a12:	781b      	ldrb	r3, [r3, #0]
20000a14:	2b04      	cmp	r3, #4
20000a16:	d818      	bhi.n	20000a4a <ActivateRow+0x46>
20000a18:	009a      	lsls	r2, r3, #2
20000a1a:	4b0e      	ldr	r3, [pc, #56]	; (20000a54 <ActivateRow+0x50>)
20000a1c:	18d3      	adds	r3, r2, r3
20000a1e:	681b      	ldr	r3, [r3, #0]
20000a20:	469f      	mov	pc, r3
		case 1: GPIO_D.odr_high = 0x10; break;
20000a22:	4b0d      	ldr	r3, [pc, #52]	; (20000a58 <ActivateRow+0x54>)
20000a24:	2210      	movs	r2, #16
20000a26:	755a      	strb	r2, [r3, #21]
20000a28:	e00f      	b.n	20000a4a <ActivateRow+0x46>
		case 2: GPIO_D.odr_high = 0x20; break;
20000a2a:	4b0b      	ldr	r3, [pc, #44]	; (20000a58 <ActivateRow+0x54>)
20000a2c:	2220      	movs	r2, #32
20000a2e:	755a      	strb	r2, [r3, #21]
20000a30:	e00b      	b.n	20000a4a <ActivateRow+0x46>
		case 3: GPIO_D.odr_high = 0x40; break;
20000a32:	4b09      	ldr	r3, [pc, #36]	; (20000a58 <ActivateRow+0x54>)
20000a34:	2240      	movs	r2, #64	; 0x40
20000a36:	755a      	strb	r2, [r3, #21]
20000a38:	e007      	b.n	20000a4a <ActivateRow+0x46>
		case 4: GPIO_D.odr_high = 0x80; break;
20000a3a:	4b07      	ldr	r3, [pc, #28]	; (20000a58 <ActivateRow+0x54>)
20000a3c:	2280      	movs	r2, #128	; 0x80
20000a3e:	755a      	strb	r2, [r3, #21]
20000a40:	e003      	b.n	20000a4a <ActivateRow+0x46>
		case 0: GPIO_D.odr_high = 0x00; break;
20000a42:	4b05      	ldr	r3, [pc, #20]	; (20000a58 <ActivateRow+0x54>)
20000a44:	2200      	movs	r2, #0
20000a46:	755a      	strb	r2, [r3, #21]
20000a48:	46c0      	nop			; (mov r8, r8)
	}
}
20000a4a:	46c0      	nop			; (mov r8, r8)
20000a4c:	46bd      	mov	sp, r7
20000a4e:	b002      	add	sp, #8
20000a50:	bd80      	pop	{r7, pc}
20000a52:	46c0      	nop			; (mov r8, r8)
20000a54:	2000118c 	andcs	r1, r0, ip, lsl #3
20000a58:	40020c00 	andmi	r0, r2, r0, lsl #24

20000a5c <ReadColumn>:
int ReadColumn (void){
20000a5c:	b580      	push	{r7, lr}
20000a5e:	b082      	sub	sp, #8
20000a60:	af00      	add	r7, sp, #0
	unsigned char c;
	c = GPIO_D.idr_high;
20000a62:	4a12      	ldr	r2, [pc, #72]	; (20000aac <ReadColumn+0x50>)
20000a64:	1dfb      	adds	r3, r7, #7
20000a66:	7c52      	ldrb	r2, [r2, #17]
20000a68:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
20000a6a:	1dfb      	adds	r3, r7, #7
20000a6c:	781b      	ldrb	r3, [r3, #0]
20000a6e:	2208      	movs	r2, #8
20000a70:	4013      	ands	r3, r2
20000a72:	d001      	beq.n	20000a78 <ReadColumn+0x1c>
20000a74:	2304      	movs	r3, #4
20000a76:	e015      	b.n	20000aa4 <ReadColumn+0x48>
	if(c & 0x4) return 3;
20000a78:	1dfb      	adds	r3, r7, #7
20000a7a:	781b      	ldrb	r3, [r3, #0]
20000a7c:	2204      	movs	r2, #4
20000a7e:	4013      	ands	r3, r2
20000a80:	d001      	beq.n	20000a86 <ReadColumn+0x2a>
20000a82:	2303      	movs	r3, #3
20000a84:	e00e      	b.n	20000aa4 <ReadColumn+0x48>
	if(c & 0x2) return 2;
20000a86:	1dfb      	adds	r3, r7, #7
20000a88:	781b      	ldrb	r3, [r3, #0]
20000a8a:	2202      	movs	r2, #2
20000a8c:	4013      	ands	r3, r2
20000a8e:	d001      	beq.n	20000a94 <ReadColumn+0x38>
20000a90:	2302      	movs	r3, #2
20000a92:	e007      	b.n	20000aa4 <ReadColumn+0x48>
	if(c & 0x1) return 1;
20000a94:	1dfb      	adds	r3, r7, #7
20000a96:	781b      	ldrb	r3, [r3, #0]
20000a98:	2201      	movs	r2, #1
20000a9a:	4013      	ands	r3, r2
20000a9c:	d001      	beq.n	20000aa2 <ReadColumn+0x46>
20000a9e:	2301      	movs	r3, #1
20000aa0:	e000      	b.n	20000aa4 <ReadColumn+0x48>
	return 0;
20000aa2:	2300      	movs	r3, #0
}
20000aa4:	0018      	movs	r0, r3
20000aa6:	46bd      	mov	sp, r7
20000aa8:	b002      	add	sp, #8
20000aaa:	bd80      	pop	{r7, pc}
20000aac:	40020c00 	andmi	r0, r2, r0, lsl #24

20000ab0 <ascii_init>:
//	}
//	else GPIO_D.odr_low = Segcodes[c];
//	}

//ascii Funktioner
void ascii_init(void){
20000ab0:	b580      	push	{r7, lr}
20000ab2:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000ab4:	46c0      	nop			; (mov r8, r8)
20000ab6:	f000 f8f9 	bl	20000cac <ascii_read_status>
20000aba:	0003      	movs	r3, r0
20000abc:	001a      	movs	r2, r3
20000abe:	2380      	movs	r3, #128	; 0x80
20000ac0:	4013      	ands	r3, r2
20000ac2:	2b80      	cmp	r3, #128	; 0x80
20000ac4:	d0f7      	beq.n	20000ab6 <ascii_init+0x6>
		delay_mikro(8);
20000ac6:	2008      	movs	r0, #8
20000ac8:	f7ff ff43 	bl	20000952 <delay_mikro>
		ascii_write_CMD(0x38);
20000acc:	2038      	movs	r0, #56	; 0x38
20000ace:	f000 f8a9 	bl	20000c24 <ascii_write_CMD>
		delay_mikro(39);
20000ad2:	2027      	movs	r0, #39	; 0x27
20000ad4:	f7ff ff3d 	bl	20000952 <delay_mikro>
		ascii_write_CMD(0x0E);
20000ad8:	200e      	movs	r0, #14
20000ada:	f000 f8a3 	bl	20000c24 <ascii_write_CMD>
		delay_mikro(39);
20000ade:	2027      	movs	r0, #39	; 0x27
20000ae0:	f7ff ff37 	bl	20000952 <delay_mikro>
		ascii_write_CMD(0x06);
20000ae4:	2006      	movs	r0, #6
20000ae6:	f000 f89d 	bl	20000c24 <ascii_write_CMD>
		delay_mikro(39);
20000aea:	2027      	movs	r0, #39	; 0x27
20000aec:	f7ff ff31 	bl	20000952 <delay_mikro>
}
20000af0:	46c0      	nop			; (mov r8, r8)
20000af2:	46bd      	mov	sp, r7
20000af4:	bd80      	pop	{r7, pc}

20000af6 <ascii_gotoxy>:
void ascii_gotoxy(int x, int y){
20000af6:	b580      	push	{r7, lr}
20000af8:	b084      	sub	sp, #16
20000afa:	af00      	add	r7, sp, #0
20000afc:	6078      	str	r0, [r7, #4]
20000afe:	6039      	str	r1, [r7, #0]
	int address = x - 1;
20000b00:	687b      	ldr	r3, [r7, #4]
20000b02:	3b01      	subs	r3, #1
20000b04:	60fb      	str	r3, [r7, #12]
	if(y == 2){
20000b06:	683b      	ldr	r3, [r7, #0]
20000b08:	2b02      	cmp	r3, #2
20000b0a:	d102      	bne.n	20000b12 <ascii_gotoxy+0x1c>
		address = address + 0x40;
20000b0c:	68fb      	ldr	r3, [r7, #12]
20000b0e:	3340      	adds	r3, #64	; 0x40
20000b10:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_CMD(0x80 | address);
20000b12:	68fb      	ldr	r3, [r7, #12]
20000b14:	b25b      	sxtb	r3, r3
20000b16:	2280      	movs	r2, #128	; 0x80
20000b18:	4252      	negs	r2, r2
20000b1a:	4313      	orrs	r3, r2
20000b1c:	b25b      	sxtb	r3, r3
20000b1e:	b2db      	uxtb	r3, r3
20000b20:	0018      	movs	r0, r3
20000b22:	f000 f87f 	bl	20000c24 <ascii_write_CMD>
}
20000b26:	46c0      	nop			; (mov r8, r8)
20000b28:	46bd      	mov	sp, r7
20000b2a:	b004      	add	sp, #16
20000b2c:	bd80      	pop	{r7, pc}

20000b2e <ascii_write_char>:
void ascii_write_char(unsigned char c){
20000b2e:	b580      	push	{r7, lr}
20000b30:	b082      	sub	sp, #8
20000b32:	af00      	add	r7, sp, #0
20000b34:	0002      	movs	r2, r0
20000b36:	1dfb      	adds	r3, r7, #7
20000b38:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000b3a:	46c0      	nop			; (mov r8, r8)
20000b3c:	f000 f8b6 	bl	20000cac <ascii_read_status>
20000b40:	0003      	movs	r3, r0
20000b42:	001a      	movs	r2, r3
20000b44:	2380      	movs	r3, #128	; 0x80
20000b46:	4013      	ands	r3, r2
20000b48:	2b80      	cmp	r3, #128	; 0x80
20000b4a:	d0f7      	beq.n	20000b3c <ascii_write_char+0xe>
	delay_mikro(8);
20000b4c:	2008      	movs	r0, #8
20000b4e:	f7ff ff00 	bl	20000952 <delay_mikro>
	ascii_write_data(c);
20000b52:	1dfb      	adds	r3, r7, #7
20000b54:	781b      	ldrb	r3, [r3, #0]
20000b56:	0018      	movs	r0, r3
20000b58:	f000 f879 	bl	20000c4e <ascii_write_data>
	delay_mikro(43);
20000b5c:	202b      	movs	r0, #43	; 0x2b
20000b5e:	f7ff fef8 	bl	20000952 <delay_mikro>
}
20000b62:	46c0      	nop			; (mov r8, r8)
20000b64:	46bd      	mov	sp, r7
20000b66:	b002      	add	sp, #8
20000b68:	bd80      	pop	{r7, pc}

20000b6a <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set( unsigned char x ){ /* Funktion för att 1-ställa bitar */
20000b6a:	b580      	push	{r7, lr}
20000b6c:	b084      	sub	sp, #16
20000b6e:	af00      	add	r7, sp, #0
20000b70:	0002      	movs	r2, r0
20000b72:	1dfb      	adds	r3, r7, #7
20000b74:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odr_low;
20000b76:	4a0c      	ldr	r2, [pc, #48]	; (20000ba8 <ascii_ctrl_bit_set+0x3e>)
20000b78:	210f      	movs	r1, #15
20000b7a:	187b      	adds	r3, r7, r1
20000b7c:	7d12      	ldrb	r2, [r2, #20]
20000b7e:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000b80:	1dfa      	adds	r2, r7, #7
20000b82:	187b      	adds	r3, r7, r1
20000b84:	7812      	ldrb	r2, [r2, #0]
20000b86:	781b      	ldrb	r3, [r3, #0]
20000b88:	4313      	orrs	r3, r2
20000b8a:	b2da      	uxtb	r2, r3
20000b8c:	0008      	movs	r0, r1
20000b8e:	187b      	adds	r3, r7, r1
20000b90:	2104      	movs	r1, #4
20000b92:	430a      	orrs	r2, r1
20000b94:	701a      	strb	r2, [r3, #0]
	GPIO_E.odr_low = c;
20000b96:	4a04      	ldr	r2, [pc, #16]	; (20000ba8 <ascii_ctrl_bit_set+0x3e>)
20000b98:	0001      	movs	r1, r0
20000b9a:	187b      	adds	r3, r7, r1
20000b9c:	781b      	ldrb	r3, [r3, #0]
20000b9e:	7513      	strb	r3, [r2, #20]
}
20000ba0:	46c0      	nop			; (mov r8, r8)
20000ba2:	46bd      	mov	sp, r7
20000ba4:	b004      	add	sp, #16
20000ba6:	bd80      	pop	{r7, pc}
20000ba8:	40021000 	andmi	r1, r2, r0

20000bac <ascii_ctrl_bit_clear>:
void ascii_ctrl_bit_clear( unsigned char x ){
20000bac:	b580      	push	{r7, lr}
20000bae:	b084      	sub	sp, #16
20000bb0:	af00      	add	r7, sp, #0
20000bb2:	0002      	movs	r2, r0
20000bb4:	1dfb      	adds	r3, r7, #7
20000bb6:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odr_low;
20000bb8:	4a0d      	ldr	r2, [pc, #52]	; (20000bf0 <ascii_ctrl_bit_clear+0x44>)
20000bba:	210f      	movs	r1, #15
20000bbc:	187b      	adds	r3, r7, r1
20000bbe:	7d12      	ldrb	r2, [r2, #20]
20000bc0:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000bc2:	1dfb      	adds	r3, r7, #7
20000bc4:	781b      	ldrb	r3, [r3, #0]
20000bc6:	b25b      	sxtb	r3, r3
20000bc8:	43db      	mvns	r3, r3
20000bca:	b25b      	sxtb	r3, r3
20000bcc:	187a      	adds	r2, r7, r1
20000bce:	7812      	ldrb	r2, [r2, #0]
20000bd0:	b252      	sxtb	r2, r2
20000bd2:	4013      	ands	r3, r2
20000bd4:	b25b      	sxtb	r3, r3
20000bd6:	2204      	movs	r2, #4
20000bd8:	4313      	orrs	r3, r2
20000bda:	b25a      	sxtb	r2, r3
20000bdc:	187b      	adds	r3, r7, r1
20000bde:	701a      	strb	r2, [r3, #0]
	GPIO_E.odr_low = c;
20000be0:	4a03      	ldr	r2, [pc, #12]	; (20000bf0 <ascii_ctrl_bit_clear+0x44>)
20000be2:	187b      	adds	r3, r7, r1
20000be4:	781b      	ldrb	r3, [r3, #0]
20000be6:	7513      	strb	r3, [r2, #20]
} 
20000be8:	46c0      	nop			; (mov r8, r8)
20000bea:	46bd      	mov	sp, r7
20000bec:	b004      	add	sp, #16
20000bee:	bd80      	pop	{r7, pc}
20000bf0:	40021000 	andmi	r1, r2, r0

20000bf4 <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000bf4:	b580      	push	{r7, lr}
20000bf6:	b082      	sub	sp, #8
20000bf8:	af00      	add	r7, sp, #0
20000bfa:	0002      	movs	r2, r0
20000bfc:	1dfb      	adds	r3, r7, #7
20000bfe:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000c00:	2040      	movs	r0, #64	; 0x40
20000c02:	f7ff ffb2 	bl	20000b6a <ascii_ctrl_bit_set>
	GPIO_E.odr_high = c;
20000c06:	4a06      	ldr	r2, [pc, #24]	; (20000c20 <ascii_write_controller+0x2c>)
20000c08:	1dfb      	adds	r3, r7, #7
20000c0a:	781b      	ldrb	r3, [r3, #0]
20000c0c:	7553      	strb	r3, [r2, #21]
	delay_250ns();
20000c0e:	f7ff fe75 	bl	200008fc <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000c12:	2040      	movs	r0, #64	; 0x40
20000c14:	f7ff ffca 	bl	20000bac <ascii_ctrl_bit_clear>
}
20000c18:	46c0      	nop			; (mov r8, r8)
20000c1a:	46bd      	mov	sp, r7
20000c1c:	b002      	add	sp, #8
20000c1e:	bd80      	pop	{r7, pc}
20000c20:	40021000 	andmi	r1, r2, r0

20000c24 <ascii_write_CMD>:
void ascii_write_CMD(unsigned char command){
20000c24:	b580      	push	{r7, lr}
20000c26:	b082      	sub	sp, #8
20000c28:	af00      	add	r7, sp, #0
20000c2a:	0002      	movs	r2, r0
20000c2c:	1dfb      	adds	r3, r7, #7
20000c2e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000c30:	2001      	movs	r0, #1
20000c32:	f7ff ffbb 	bl	20000bac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000c36:	2002      	movs	r0, #2
20000c38:	f7ff ffb8 	bl	20000bac <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000c3c:	1dfb      	adds	r3, r7, #7
20000c3e:	781b      	ldrb	r3, [r3, #0]
20000c40:	0018      	movs	r0, r3
20000c42:	f7ff ffd7 	bl	20000bf4 <ascii_write_controller>
}
20000c46:	46c0      	nop			; (mov r8, r8)
20000c48:	46bd      	mov	sp, r7
20000c4a:	b002      	add	sp, #8
20000c4c:	bd80      	pop	{r7, pc}

20000c4e <ascii_write_data>:
void ascii_write_data(unsigned char data){
20000c4e:	b580      	push	{r7, lr}
20000c50:	b082      	sub	sp, #8
20000c52:	af00      	add	r7, sp, #0
20000c54:	0002      	movs	r2, r0
20000c56:	1dfb      	adds	r3, r7, #7
20000c58:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000c5a:	2001      	movs	r0, #1
20000c5c:	f7ff ff85 	bl	20000b6a <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000c60:	2002      	movs	r0, #2
20000c62:	f7ff ffa3 	bl	20000bac <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000c66:	1dfb      	adds	r3, r7, #7
20000c68:	781b      	ldrb	r3, [r3, #0]
20000c6a:	0018      	movs	r0, r3
20000c6c:	f7ff ffc2 	bl	20000bf4 <ascii_write_controller>
}
20000c70:	46c0      	nop			; (mov r8, r8)
20000c72:	46bd      	mov	sp, r7
20000c74:	b002      	add	sp, #8
20000c76:	bd80      	pop	{r7, pc}

20000c78 <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000c78:	b580      	push	{r7, lr}
20000c7a:	b082      	sub	sp, #8
20000c7c:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000c7e:	2040      	movs	r0, #64	; 0x40
20000c80:	f7ff ff73 	bl	20000b6a <ascii_ctrl_bit_set>
	delay_250ns();
20000c84:	f7ff fe3a 	bl	200008fc <delay_250ns>
	delay_250ns();
20000c88:	f7ff fe38 	bl	200008fc <delay_250ns>
	unsigned char r = GPIO_E.idr_high;
20000c8c:	4a06      	ldr	r2, [pc, #24]	; (20000ca8 <ascii_read_controller+0x30>)
20000c8e:	1dfb      	adds	r3, r7, #7
20000c90:	7c52      	ldrb	r2, [r2, #17]
20000c92:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000c94:	2040      	movs	r0, #64	; 0x40
20000c96:	f7ff ff89 	bl	20000bac <ascii_ctrl_bit_clear>
	return r;
20000c9a:	1dfb      	adds	r3, r7, #7
20000c9c:	781b      	ldrb	r3, [r3, #0]
}
20000c9e:	0018      	movs	r0, r3
20000ca0:	46bd      	mov	sp, r7
20000ca2:	b002      	add	sp, #8
20000ca4:	bd80      	pop	{r7, pc}
20000ca6:	46c0      	nop			; (mov r8, r8)
20000ca8:	40021000 	andmi	r1, r2, r0

20000cac <ascii_read_status>:
unsigned char ascii_read_status(void){
20000cac:	b590      	push	{r4, r7, lr}
20000cae:	b083      	sub	sp, #12
20000cb0:	af00      	add	r7, sp, #0
	GPIO_E.moder = 0x00005555;
20000cb2:	4b0b      	ldr	r3, [pc, #44]	; (20000ce0 <ascii_read_status+0x34>)
20000cb4:	4a0b      	ldr	r2, [pc, #44]	; (20000ce4 <ascii_read_status+0x38>)
20000cb6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000cb8:	2001      	movs	r0, #1
20000cba:	f7ff ff77 	bl	20000bac <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000cbe:	2002      	movs	r0, #2
20000cc0:	f7ff ff53 	bl	20000b6a <ascii_ctrl_bit_set>
	unsigned char r = ascii_read_controller();
20000cc4:	1dfc      	adds	r4, r7, #7
20000cc6:	f7ff ffd7 	bl	20000c78 <ascii_read_controller>
20000cca:	0003      	movs	r3, r0
20000ccc:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder = 0x55555555;
20000cce:	4b04      	ldr	r3, [pc, #16]	; (20000ce0 <ascii_read_status+0x34>)
20000cd0:	4a05      	ldr	r2, [pc, #20]	; (20000ce8 <ascii_read_status+0x3c>)
20000cd2:	601a      	str	r2, [r3, #0]
	return r;
20000cd4:	1dfb      	adds	r3, r7, #7
20000cd6:	781b      	ldrb	r3, [r3, #0]
}
20000cd8:	0018      	movs	r0, r3
20000cda:	46bd      	mov	sp, r7
20000cdc:	b003      	add	sp, #12
20000cde:	bd90      	pop	{r4, r7, pc}
20000ce0:	40021000 	andmi	r1, r2, r0
20000ce4:	00005555 	andeq	r5, r0, r5, asr r5
20000ce8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000cec <ascii_read_data>:
unsigned char ascii_read_data(void){
20000cec:	b580      	push	{r7, lr}
20000cee:	b082      	sub	sp, #8
20000cf0:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder = 0x00005555;
20000cf2:	4b0a      	ldr	r3, [pc, #40]	; (20000d1c <ascii_read_data+0x30>)
20000cf4:	4a0a      	ldr	r2, [pc, #40]	; (20000d20 <ascii_read_data+0x34>)
20000cf6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000cf8:	2001      	movs	r0, #1
20000cfa:	f7ff ff36 	bl	20000b6a <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000cfe:	2002      	movs	r0, #2
20000d00:	f7ff ff33 	bl	20000b6a <ascii_ctrl_bit_set>
	rv = ascii_read_controller;
20000d04:	4a07      	ldr	r2, [pc, #28]	; (20000d24 <ascii_read_data+0x38>)
20000d06:	1dfb      	adds	r3, r7, #7
20000d08:	701a      	strb	r2, [r3, #0]
	GPIO_E.moder = 0x55555555;
20000d0a:	4b04      	ldr	r3, [pc, #16]	; (20000d1c <ascii_read_data+0x30>)
20000d0c:	4a06      	ldr	r2, [pc, #24]	; (20000d28 <ascii_read_data+0x3c>)
20000d0e:	601a      	str	r2, [r3, #0]
	return rv;
20000d10:	1dfb      	adds	r3, r7, #7
20000d12:	781b      	ldrb	r3, [r3, #0]
}
20000d14:	0018      	movs	r0, r3
20000d16:	46bd      	mov	sp, r7
20000d18:	b002      	add	sp, #8
20000d1a:	bd80      	pop	{r7, pc}
20000d1c:	40021000 	andmi	r1, r2, r0
20000d20:	00005555 	andeq	r5, r0, r5, asr r5
20000d24:	20000c79 	andcs	r0, r0, r9, ror ip
20000d28:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d2c <ascii_clear_dsplay>:
void ascii_clear_dsplay(void){
20000d2c:	b580      	push	{r7, lr}
20000d2e:	af00      	add	r7, sp, #0
	ascii_write_CMD(1);
20000d30:	2001      	movs	r0, #1
20000d32:	f7ff ff77 	bl	20000c24 <ascii_write_CMD>
}
20000d36:	46c0      	nop			; (mov r8, r8)
20000d38:	46bd      	mov	sp, r7
20000d3a:	bd80      	pop	{r7, pc}

20000d3c <print_to_ascii>:
//skriver ut det som finns i PAscii till AsciiDisplayen.
void print_to_ascii(char line[], signed char x, char i){		
20000d3c:	b580      	push	{r7, lr}
20000d3e:	b082      	sub	sp, #8
20000d40:	af00      	add	r7, sp, #0
20000d42:	6078      	str	r0, [r7, #4]
20000d44:	0008      	movs	r0, r1
20000d46:	0011      	movs	r1, r2
20000d48:	1cfb      	adds	r3, r7, #3
20000d4a:	1c02      	adds	r2, r0, #0
20000d4c:	701a      	strb	r2, [r3, #0]
20000d4e:	1cbb      	adds	r3, r7, #2
20000d50:	1c0a      	adds	r2, r1, #0
20000d52:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(1,i);
20000d54:	1cbb      	adds	r3, r7, #2
20000d56:	781b      	ldrb	r3, [r3, #0]
20000d58:	0019      	movs	r1, r3
20000d5a:	2001      	movs	r0, #1
20000d5c:	f7ff fecb 	bl	20000af6 <ascii_gotoxy>
		while(*line)
20000d60:	e006      	b.n	20000d70 <print_to_ascii+0x34>
			ascii_write_char(*line++);
20000d62:	687b      	ldr	r3, [r7, #4]
20000d64:	1c5a      	adds	r2, r3, #1
20000d66:	607a      	str	r2, [r7, #4]
20000d68:	781b      	ldrb	r3, [r3, #0]
20000d6a:	0018      	movs	r0, r3
20000d6c:	f7ff fedf 	bl	20000b2e <ascii_write_char>
		while(*line)
20000d70:	687b      	ldr	r3, [r7, #4]
20000d72:	781b      	ldrb	r3, [r3, #0]
20000d74:	2b00      	cmp	r3, #0
20000d76:	d1f4      	bne.n	20000d62 <print_to_ascii+0x26>
		if(x >= 0){ //If X is negative, don't print the players point.
20000d78:	1cfb      	adds	r3, r7, #3
20000d7a:	781b      	ldrb	r3, [r3, #0]
20000d7c:	2b7f      	cmp	r3, #127	; 0x7f
20000d7e:	d804      	bhi.n	20000d8a <print_to_ascii+0x4e>
			ascii_write_char(x);
20000d80:	1cfb      	adds	r3, r7, #3
20000d82:	781b      	ldrb	r3, [r3, #0]
20000d84:	0018      	movs	r0, r3
20000d86:	f7ff fed2 	bl	20000b2e <ascii_write_char>
		}

}
20000d8a:	46c0      	nop			; (mov r8, r8)
20000d8c:	46bd      	mov	sp, r7
20000d8e:	b002      	add	sp, #8
20000d90:	bd80      	pop	{r7, pc}

20000d92 <init_app>:

//Sets values to their initiall value.
void init_app(void){ 	
20000d92:	b580      	push	{r7, lr}
20000d94:	af00      	add	r7, sp, #0
	
	GPIO_E.moder = 0x55555555;
20000d96:	4b04      	ldr	r3, [pc, #16]	; (20000da8 <init_app+0x16>)
20000d98:	4a04      	ldr	r2, [pc, #16]	; (20000dac <init_app+0x1a>)
20000d9a:	601a      	str	r2, [r3, #0]
	GPIO_D.moder = 0x55005555;
20000d9c:	4b04      	ldr	r3, [pc, #16]	; (20000db0 <init_app+0x1e>)
20000d9e:	4a05      	ldr	r2, [pc, #20]	; (20000db4 <init_app+0x22>)
20000da0:	601a      	str	r2, [r3, #0]
}	
20000da2:	46c0      	nop			; (mov r8, r8)
20000da4:	46bd      	mov	sp, r7
20000da6:	bd80      	pop	{r7, pc}
20000da8:	40021000 	andmi	r1, r2, r0
20000dac:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000db0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000db4:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000db8 <game_init>:
void game_init(POBJECT BALL, PPLAYER P1, PPLAYER P2){
20000db8:	b580      	push	{r7, lr}
20000dba:	b084      	sub	sp, #16
20000dbc:	af00      	add	r7, sp, #0
20000dbe:	60f8      	str	r0, [r7, #12]
20000dc0:	60b9      	str	r1, [r7, #8]
20000dc2:	607a      	str	r2, [r7, #4]
		//Reset points
		P1->points = 0;
20000dc4:	68bb      	ldr	r3, [r7, #8]
20000dc6:	2200      	movs	r2, #0
20000dc8:	605a      	str	r2, [r3, #4]
		P2->points = 0;
20000dca:	687b      	ldr	r3, [r7, #4]
20000dcc:	2200      	movs	r2, #0
20000dce:	605a      	str	r2, [r3, #4]
		// Reset bouncer positions.
		P1->objct->posx = 6;
20000dd0:	68bb      	ldr	r3, [r7, #8]
20000dd2:	681b      	ldr	r3, [r3, #0]
20000dd4:	2206      	movs	r2, #6
20000dd6:	60da      	str	r2, [r3, #12]
		P1->objct->posy = 32;
20000dd8:	68bb      	ldr	r3, [r7, #8]
20000dda:	681b      	ldr	r3, [r3, #0]
20000ddc:	2220      	movs	r2, #32
20000dde:	611a      	str	r2, [r3, #16]
		P2->objct->posx = LCD_WIDTH - 6;
20000de0:	687b      	ldr	r3, [r7, #4]
20000de2:	681b      	ldr	r3, [r3, #0]
20000de4:	227a      	movs	r2, #122	; 0x7a
20000de6:	60da      	str	r2, [r3, #12]
		P2->objct->posy = 32;
20000de8:	687b      	ldr	r3, [r7, #4]
20000dea:	681b      	ldr	r3, [r3, #0]
20000dec:	2220      	movs	r2, #32
20000dee:	611a      	str	r2, [r3, #16]
		
		//Clears LCD screen
		graphic_clear_screen();
20000df0:	f7ff fac5 	bl	2000037e <graphic_clear_screen>
		
		// Writes the startup values to the AsciiDisplay.
		ascii_clear_dsplay();
20000df4:	f7ff ff9a 	bl	20000d2c <ascii_clear_dsplay>
		print_to_ascii(Player1.PAscii,'0' + Player1.points, 1);
20000df8:	4b19      	ldr	r3, [pc, #100]	; (20000e60 <game_init+0xa8>)
20000dfa:	685b      	ldr	r3, [r3, #4]
20000dfc:	b2db      	uxtb	r3, r3
20000dfe:	3330      	adds	r3, #48	; 0x30
20000e00:	b2db      	uxtb	r3, r3
20000e02:	b259      	sxtb	r1, r3
20000e04:	4b17      	ldr	r3, [pc, #92]	; (20000e64 <game_init+0xac>)
20000e06:	2201      	movs	r2, #1
20000e08:	0018      	movs	r0, r3
20000e0a:	f7ff ff97 	bl	20000d3c <print_to_ascii>
		print_to_ascii(Player2.PAscii,'0' + Player2.points, 2);
20000e0e:	4b16      	ldr	r3, [pc, #88]	; (20000e68 <game_init+0xb0>)
20000e10:	685b      	ldr	r3, [r3, #4]
20000e12:	b2db      	uxtb	r3, r3
20000e14:	3330      	adds	r3, #48	; 0x30
20000e16:	b2db      	uxtb	r3, r3
20000e18:	b259      	sxtb	r1, r3
20000e1a:	4b14      	ldr	r3, [pc, #80]	; (20000e6c <game_init+0xb4>)
20000e1c:	2202      	movs	r2, #2
20000e1e:	0018      	movs	r0, r3
20000e20:	f7ff ff8c 	bl	20000d3c <print_to_ascii>
		
		P1->objct->move(P1->objct); //Flyttar P1 "pinne"
20000e24:	68bb      	ldr	r3, [r7, #8]
20000e26:	681b      	ldr	r3, [r3, #0]
20000e28:	69da      	ldr	r2, [r3, #28]
20000e2a:	68bb      	ldr	r3, [r7, #8]
20000e2c:	681b      	ldr	r3, [r3, #0]
20000e2e:	0018      	movs	r0, r3
20000e30:	4790      	blx	r2
		P2->objct->move(P2->objct); //Flyttar P2 "pinne"
20000e32:	687b      	ldr	r3, [r7, #4]
20000e34:	681b      	ldr	r3, [r3, #0]
20000e36:	69da      	ldr	r2, [r3, #28]
20000e38:	687b      	ldr	r3, [r7, #4]
20000e3a:	681b      	ldr	r3, [r3, #0]
20000e3c:	0018      	movs	r0, r3
20000e3e:	4790      	blx	r2
		
		// Gives the ball it's speedfactor.
		BALL->set_speed(BALL,1,1);
20000e40:	68fb      	ldr	r3, [r7, #12]
20000e42:	6a1b      	ldr	r3, [r3, #32]
20000e44:	68f8      	ldr	r0, [r7, #12]
20000e46:	2201      	movs	r2, #1
20000e48:	2101      	movs	r1, #1
20000e4a:	4798      	blx	r3
		delay_milli(300);
20000e4c:	2396      	movs	r3, #150	; 0x96
20000e4e:	005b      	lsls	r3, r3, #1
20000e50:	0018      	movs	r0, r3
20000e52:	f7ff fd98 	bl	20000986 <delay_milli>
}
20000e56:	46c0      	nop			; (mov r8, r8)
20000e58:	46bd      	mov	sp, r7
20000e5a:	b004      	add	sp, #16
20000e5c:	bd80      	pop	{r7, pc}
20000e5e:	46c0      	nop			; (mov r8, r8)
20000e60:	2000112c 	andcs	r1, r0, ip, lsr #2
20000e64:	20001134 	andcs	r1, r0, r4, lsr r1
20000e68:	2000114c 	andcs	r1, r0, ip, asr #2
20000e6c:	20001154 	andcs	r1, r0, r4, asr r1

20000e70 <main>:

void main(void){
20000e70:	b5b0      	push	{r4, r5, r7, lr}
20000e72:	b08a      	sub	sp, #40	; 0x28
20000e74:	af00      	add	r7, sp, #0
	char c;
	POBJECT BALL = &ball;
20000e76:	4b69      	ldr	r3, [pc, #420]	; (2000101c <main+0x1ac>)
20000e78:	623b      	str	r3, [r7, #32]
	PPLAYER P1 = &Player1;
20000e7a:	4b69      	ldr	r3, [pc, #420]	; (20001020 <main+0x1b0>)
20000e7c:	61fb      	str	r3, [r7, #28]
	PPLAYER P2 = &Player2;
20000e7e:	4b69      	ldr	r3, [pc, #420]	; (20001024 <main+0x1b4>)
20000e80:	61bb      	str	r3, [r7, #24]
	
	init_app(); //Initierar register
20000e82:	f7ff ff86 	bl	20000d92 <init_app>
	ascii_init(); //Initierar Ascii displayen
20000e86:	f7ff fe13 	bl	20000ab0 <ascii_init>
	graphic_initialize(); //initierar LC displayen
20000e8a:	f7ff f93e 	bl	2000010a <graphic_initialize>
	game_init(BALL, P1, P2); //initierar spelet
20000e8e:	69ba      	ldr	r2, [r7, #24]
20000e90:	69f9      	ldr	r1, [r7, #28]
20000e92:	6a3b      	ldr	r3, [r7, #32]
20000e94:	0018      	movs	r0, r3
20000e96:	f7ff ff8f 	bl	20000db8 <game_init>
	while(1){
		BALL->move(BALL); //sätter bollen i rörelse
20000e9a:	6a3b      	ldr	r3, [r7, #32]
20000e9c:	69db      	ldr	r3, [r3, #28]
20000e9e:	6a3a      	ldr	r2, [r7, #32]
20000ea0:	0010      	movs	r0, r2
20000ea2:	4798      	blx	r3
		delay_milli(10);
20000ea4:	200a      	movs	r0, #10
20000ea6:	f7ff fd6e 	bl	20000986 <delay_milli>
		c = keyb(); //Kollar om någon tryckt
20000eaa:	2517      	movs	r5, #23
20000eac:	197c      	adds	r4, r7, r5
20000eae:	f7ff fd7c 	bl	200009aa <keyb>
20000eb2:	0003      	movs	r3, r0
20000eb4:	7023      	strb	r3, [r4, #0]
		switch(c){
20000eb6:	197b      	adds	r3, r7, r5
20000eb8:	781b      	ldrb	r3, [r3, #0]
20000eba:	2b03      	cmp	r3, #3
20000ebc:	d02b      	beq.n	20000f16 <main+0xa6>
20000ebe:	dc02      	bgt.n	20000ec6 <main+0x56>
20000ec0:	2b01      	cmp	r3, #1
20000ec2:	d005      	beq.n	20000ed0 <main+0x60>
20000ec4:	e04a      	b.n	20000f5c <main+0xec>
20000ec6:	2b07      	cmp	r3, #7
20000ec8:	d014      	beq.n	20000ef4 <main+0x84>
20000eca:	2b09      	cmp	r3, #9
20000ecc:	d035      	beq.n	20000f3a <main+0xca>
20000ece:	e045      	b.n	20000f5c <main+0xec>
			case 1: P1->objct->set_speed(P1->objct, 0, -2);
20000ed0:	69fb      	ldr	r3, [r7, #28]
20000ed2:	681b      	ldr	r3, [r3, #0]
20000ed4:	6a1c      	ldr	r4, [r3, #32]
20000ed6:	69fb      	ldr	r3, [r7, #28]
20000ed8:	6818      	ldr	r0, [r3, #0]
20000eda:	2302      	movs	r3, #2
20000edc:	425b      	negs	r3, r3
20000ede:	001a      	movs	r2, r3
20000ee0:	2100      	movs	r1, #0
20000ee2:	47a0      	blx	r4
				P1->objct->move(P1->objct);
20000ee4:	69fb      	ldr	r3, [r7, #28]
20000ee6:	681b      	ldr	r3, [r3, #0]
20000ee8:	69da      	ldr	r2, [r3, #28]
20000eea:	69fb      	ldr	r3, [r7, #28]
20000eec:	681b      	ldr	r3, [r3, #0]
20000eee:	0018      	movs	r0, r3
20000ef0:	4790      	blx	r2
				break;
20000ef2:	e033      	b.n	20000f5c <main+0xec>
			case 7: P1->objct->set_speed(P1->objct, 0, 2);
20000ef4:	69fb      	ldr	r3, [r7, #28]
20000ef6:	681b      	ldr	r3, [r3, #0]
20000ef8:	6a1c      	ldr	r4, [r3, #32]
20000efa:	69fb      	ldr	r3, [r7, #28]
20000efc:	681b      	ldr	r3, [r3, #0]
20000efe:	2202      	movs	r2, #2
20000f00:	2100      	movs	r1, #0
20000f02:	0018      	movs	r0, r3
20000f04:	47a0      	blx	r4
				P1->objct->move(P1->objct);
20000f06:	69fb      	ldr	r3, [r7, #28]
20000f08:	681b      	ldr	r3, [r3, #0]
20000f0a:	69da      	ldr	r2, [r3, #28]
20000f0c:	69fb      	ldr	r3, [r7, #28]
20000f0e:	681b      	ldr	r3, [r3, #0]
20000f10:	0018      	movs	r0, r3
20000f12:	4790      	blx	r2
				break;
20000f14:	e022      	b.n	20000f5c <main+0xec>
			case 3: P2->objct->set_speed(P2->objct, 0, -2);
20000f16:	69bb      	ldr	r3, [r7, #24]
20000f18:	681b      	ldr	r3, [r3, #0]
20000f1a:	6a1c      	ldr	r4, [r3, #32]
20000f1c:	69bb      	ldr	r3, [r7, #24]
20000f1e:	6818      	ldr	r0, [r3, #0]
20000f20:	2302      	movs	r3, #2
20000f22:	425b      	negs	r3, r3
20000f24:	001a      	movs	r2, r3
20000f26:	2100      	movs	r1, #0
20000f28:	47a0      	blx	r4
				P2->objct->move(P2->objct);
20000f2a:	69bb      	ldr	r3, [r7, #24]
20000f2c:	681b      	ldr	r3, [r3, #0]
20000f2e:	69da      	ldr	r2, [r3, #28]
20000f30:	69bb      	ldr	r3, [r7, #24]
20000f32:	681b      	ldr	r3, [r3, #0]
20000f34:	0018      	movs	r0, r3
20000f36:	4790      	blx	r2
				break;
20000f38:	e010      	b.n	20000f5c <main+0xec>
			case 9: P2->objct->set_speed(P2->objct, 0, 2);
20000f3a:	69bb      	ldr	r3, [r7, #24]
20000f3c:	681b      	ldr	r3, [r3, #0]
20000f3e:	6a1c      	ldr	r4, [r3, #32]
20000f40:	69bb      	ldr	r3, [r7, #24]
20000f42:	681b      	ldr	r3, [r3, #0]
20000f44:	2202      	movs	r2, #2
20000f46:	2100      	movs	r1, #0
20000f48:	0018      	movs	r0, r3
20000f4a:	47a0      	blx	r4
				P2->objct->move(P2->objct);
20000f4c:	69bb      	ldr	r3, [r7, #24]
20000f4e:	681b      	ldr	r3, [r3, #0]
20000f50:	69da      	ldr	r2, [r3, #28]
20000f52:	69bb      	ldr	r3, [r7, #24]
20000f54:	681b      	ldr	r3, [r3, #0]
20000f56:	0018      	movs	r0, r3
20000f58:	4790      	blx	r2
				break;
20000f5a:	46c0      	nop			; (mov r8, r8)
		}
		if(P1->points >= WinPoints||P2->points >= WinPoints){ //Om någon har nåt poängen för att vinna
20000f5c:	69fb      	ldr	r3, [r7, #28]
20000f5e:	685b      	ldr	r3, [r3, #4]
20000f60:	2b08      	cmp	r3, #8
20000f62:	dc03      	bgt.n	20000f6c <main+0xfc>
20000f64:	69bb      	ldr	r3, [r7, #24]
20000f66:	685b      	ldr	r3, [r3, #4]
20000f68:	2b08      	cmp	r3, #8
20000f6a:	dd96      	ble.n	20000e9a <main+0x2a>
			char press[] = "Press 5 to restart";
20000f6c:	003b      	movs	r3, r7
20000f6e:	4a2e      	ldr	r2, [pc, #184]	; (20001028 <main+0x1b8>)
20000f70:	ca13      	ldmia	r2!, {r0, r1, r4}
20000f72:	c313      	stmia	r3!, {r0, r1, r4}
20000f74:	6811      	ldr	r1, [r2, #0]
20000f76:	6019      	str	r1, [r3, #0]
20000f78:	8891      	ldrh	r1, [r2, #4]
20000f7a:	8099      	strh	r1, [r3, #4]
20000f7c:	7992      	ldrb	r2, [r2, #6]
20000f7e:	719a      	strb	r2, [r3, #6]
			char restart = 1; //sätt restart variabeln till 1
20000f80:	2327      	movs	r3, #39	; 0x27
20000f82:	18fb      	adds	r3, r7, r3
20000f84:	2201      	movs	r2, #1
20000f86:	701a      	strb	r2, [r3, #0]
			if(P1->points >= WinPoints){ // Om player 1 har vunnit sätt Ascii displayerna till Player1 Wins
20000f88:	69fb      	ldr	r3, [r7, #28]
20000f8a:	685b      	ldr	r3, [r3, #4]
20000f8c:	2b08      	cmp	r3, #8
20000f8e:	dd10      	ble.n	20000fb2 <main+0x142>
				ascii_clear_dsplay();
20000f90:	f7ff fecc 	bl	20000d2c <ascii_clear_dsplay>
				print_to_ascii(Player1.winMsg, -1, 1);
20000f94:	2301      	movs	r3, #1
20000f96:	4259      	negs	r1, r3
20000f98:	4b24      	ldr	r3, [pc, #144]	; (2000102c <main+0x1bc>)
20000f9a:	2201      	movs	r2, #1
20000f9c:	0018      	movs	r0, r3
20000f9e:	f7ff fecd 	bl	20000d3c <print_to_ascii>
				print_to_ascii(press, -1, 2);
20000fa2:	2301      	movs	r3, #1
20000fa4:	4259      	negs	r1, r3
20000fa6:	003b      	movs	r3, r7
20000fa8:	2202      	movs	r2, #2
20000faa:	0018      	movs	r0, r3
20000fac:	f7ff fec6 	bl	20000d3c <print_to_ascii>
20000fb0:	e02d      	b.n	2000100e <main+0x19e>

			}
			else if(P2->points >= WinPoints){ // Om player 2 har vunnit sätt Ascii displayerna till Player2 Wins
20000fb2:	69bb      	ldr	r3, [r7, #24]
20000fb4:	685b      	ldr	r3, [r3, #4]
20000fb6:	2b08      	cmp	r3, #8
20000fb8:	dd29      	ble.n	2000100e <main+0x19e>
			ascii_clear_dsplay();
20000fba:	f7ff feb7 	bl	20000d2c <ascii_clear_dsplay>
			print_to_ascii(Player2.winMsg, -1, 1);
20000fbe:	2301      	movs	r3, #1
20000fc0:	4259      	negs	r1, r3
20000fc2:	4b1b      	ldr	r3, [pc, #108]	; (20001030 <main+0x1c0>)
20000fc4:	2201      	movs	r2, #1
20000fc6:	0018      	movs	r0, r3
20000fc8:	f7ff feb8 	bl	20000d3c <print_to_ascii>
			print_to_ascii(press, -1, 2);
20000fcc:	2301      	movs	r3, #1
20000fce:	4259      	negs	r1, r3
20000fd0:	003b      	movs	r3, r7
20000fd2:	2202      	movs	r2, #2
20000fd4:	0018      	movs	r0, r3
20000fd6:	f7ff feb1 	bl	20000d3c <print_to_ascii>
			}
			while(restart){ //Så länge inte knapp 5 på Keypaden har tryckts så står är spelet låst
20000fda:	e018      	b.n	2000100e <main+0x19e>
				char button = keyb(); //reads the keyboard.
20000fdc:	2516      	movs	r5, #22
20000fde:	197c      	adds	r4, r7, r5
20000fe0:	f7ff fce3 	bl	200009aa <keyb>
20000fe4:	0003      	movs	r3, r0
20000fe6:	7023      	strb	r3, [r4, #0]
20000fe8:	2227      	movs	r2, #39	; 0x27
20000fea:	18bb      	adds	r3, r7, r2
20000fec:	18ba      	adds	r2, r7, r2
20000fee:	7812      	ldrb	r2, [r2, #0]
20000ff0:	701a      	strb	r2, [r3, #0]
				if(button == 5){
20000ff2:	197b      	adds	r3, r7, r5
20000ff4:	781b      	ldrb	r3, [r3, #0]
20000ff6:	2b05      	cmp	r3, #5
20000ff8:	d109      	bne.n	2000100e <main+0x19e>
					game_init(BALL, P1, P2); // startar om spelet
20000ffa:	69ba      	ldr	r2, [r7, #24]
20000ffc:	69f9      	ldr	r1, [r7, #28]
20000ffe:	6a3b      	ldr	r3, [r7, #32]
20001000:	0018      	movs	r0, r3
20001002:	f7ff fed9 	bl	20000db8 <game_init>
					restart = 0; //Set restar to 0.
20001006:	2327      	movs	r3, #39	; 0x27
20001008:	18fb      	adds	r3, r7, r3
2000100a:	2200      	movs	r2, #0
2000100c:	701a      	strb	r2, [r3, #0]
			while(restart){ //Så länge inte knapp 5 på Keypaden har tryckts så står är spelet låst
2000100e:	2327      	movs	r3, #39	; 0x27
20001010:	18fb      	adds	r3, r7, r3
20001012:	781b      	ldrb	r3, [r3, #0]
20001014:	2b00      	cmp	r3, #0
20001016:	d1e1      	bne.n	20000fdc <main+0x16c>
		BALL->move(BALL); //sätter bollen i rörelse
20001018:	e73f      	b.n	20000e9a <main+0x2a>
2000101a:	46c0      	nop			; (mov r8, r8)
2000101c:	20001100 	andcs	r1, r0, r0, lsl #2
20001020:	2000112c 	andcs	r1, r0, ip, lsr #2
20001024:	2000114c 	andcs	r1, r0, ip, asr #2
20001028:	200011a0 	andcs	r1, r0, r0, lsr #3
2000102c:	2000113e 	andcs	r1, r0, lr, lsr r1
20001030:	2000115e 	andcs	r1, r0, lr, asr r1

20001034 <AsciiOutPrint>:
20001034:	00000000 	andeq	r0, r0, r0

20001038 <Segcodes>:
20001038:	4f5b063f 	svcmi	0x005b063f
2000103c:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001040:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001044:	71795e39 	cmnvc	r9, r9, lsr lr

20001048 <Key>:
20001048:	0a030201 	beq	200c1854 <Player2+0xc0708>
2000104c:	0b060504 	bleq	20182464 <Player2+0x181318>
20001050:	0c090807 	stceq	8, cr0, [r9], {7}
20001054:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001024 <main+0x1b4>

20001058 <ball_geometry>:
20001058:	0000000c 	andeq	r0, r0, ip
2000105c:	00000004 	andeq	r0, r0, r4
20001060:	00000004 	andeq	r0, r0, r4
20001064:	02000100 	andeq	r0, r0, #0, 2
20001068:	01010001 	tsteq	r1, r1
2000106c:	03010201 	movweq	r0, #4609	; 0x1201
20001070:	01020002 	tsteq	r2, r2
20001074:	03020202 	movweq	r0, #8706	; 0x2202
20001078:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
2000107c:	00000000 	andeq	r0, r0, r0

20001080 <bouncer_geometry>:
20001080:	0000000e 	andeq	r0, r0, lr
20001084:	00000002 	andeq	r0, r0, r2
20001088:	00000006 	andeq	r0, r0, r6
2000108c:	00010000 	andeq	r0, r1, r0
20001090:	01010100 	mrseq	r0, (UNDEF: 17)
20001094:	02010200 	andeq	r0, r1, #0, 4
20001098:	03010300 	movweq	r0, #4864	; 0x1300
2000109c:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200010a0:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
200010a4:	06010600 	streq	r0, [r1], -r0, lsl #12

200010a8 <left_bouncer>:
200010a8:	20001080 	andcs	r1, r0, r0, lsl #1
	...
200010b4:	0000000f 	andeq	r0, r0, pc
200010b8:	00000020 	andeq	r0, r0, r0, lsr #32
200010bc:	2000077d 	andcs	r0, r0, sp, ror r7
200010c0:	200007d3 	ldrdcs	r0, [r0], -r3
200010c4:	2000088f 	andcs	r0, r0, pc, lsl #17
200010c8:	2000075d 	andcs	r0, r0, sp, asr r7
200010cc:	20000829 	andcs	r0, r0, r9, lsr #16
200010d0:	00000000 	andeq	r0, r0, r0

200010d4 <right_bouncer>:
200010d4:	20001080 	andcs	r1, r0, r0, lsl #1
	...
200010e0:	00000071 	andeq	r0, r0, r1, ror r0
200010e4:	00000020 	andeq	r0, r0, r0, lsr #32
200010e8:	2000077d 	andcs	r0, r0, sp, ror r7
200010ec:	200007d3 	ldrdcs	r0, [r0], -r3
200010f0:	2000088f 	andcs	r0, r0, pc, lsl #17
200010f4:	2000075d 	andcs	r0, r0, sp, asr r7
200010f8:	20000829 	andcs	r0, r0, r9, lsr #16
200010fc:	00000000 	andeq	r0, r0, r0

20001100 <ball>:
20001100:	20001058 	andcs	r1, r0, r8, asr r0
	...
2000110c:	00000040 	andeq	r0, r0, r0, asr #32
20001110:	00000020 	andeq	r0, r0, r0, lsr #32
20001114:	2000077d 	andcs	r0, r0, sp, ror r7
20001118:	200007d3 	ldrdcs	r0, [r0], -r3
2000111c:	20000849 	andcs	r0, r0, r9, asr #16
20001120:	2000075d 	andcs	r0, r0, sp, asr r7
20001124:	20000829 	andcs	r0, r0, r9, lsr #16
20001128:	20000579 	andcs	r0, r0, r9, ror r5

2000112c <Player1>:
2000112c:	200010a8 	andcs	r1, r0, r8, lsr #1
20001130:	00000000 	andeq	r0, r0, r0
20001134:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
20001138:	3a317265 	bcc	20c5dad4 <Player2+0xc5c988>
2000113c:	6c500020 	mrrcvs	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
20001140:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
20001144:	69772031 	ldmdbvs	r7!, {r0, r4, r5, sp}^
20001148:	0000736e 	andeq	r7, r0, lr, ror #6

2000114c <Player2>:
2000114c:	200010d4 	ldrdcs	r1, [r0], -r4
20001150:	00000000 	andeq	r0, r0, r0
20001154:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
20001158:	3a327265 	bcc	20c9daf4 <Player2+0xc9c9a8>
2000115c:	4c500020 	mrrcmi	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
20001160:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
20001164:	69772032 	ldmdbvs	r7!, {r1, r4, r5, sp}^
20001168:	0000736e 	andeq	r7, r0, lr, ror #6
2000116c:	20000440 	andcs	r0, r0, r0, asr #8
20001170:	2000044a 	andcs	r0, r0, sl, asr #8
20001174:	20000454 	andcs	r0, r0, r4, asr r4
20001178:	2000045e 	andcs	r0, r0, lr, asr r4
2000117c:	20000468 	andcs	r0, r0, r8, ror #8
20001180:	20000472 	andcs	r0, r0, r2, ror r4
20001184:	2000047c 	andcs	r0, r0, ip, ror r4
20001188:	20000486 	andcs	r0, r0, r6, lsl #9
2000118c:	20000a42 	andcs	r0, r0, r2, asr #20
20001190:	20000a22 	andcs	r0, r0, r2, lsr #20
20001194:	20000a2a 	andcs	r0, r0, sl, lsr #20
20001198:	20000a32 	andcs	r0, r0, r2, lsr sl
2000119c:	20000a3a 	andcs	r0, r0, sl, lsr sl
200011a0:	73657250 	cmnvc	r5, #80, 4
200011a4:	20352073 	eorscs	r2, r5, r3, ror r0
200011a8:	72206f74 	eorvc	r6, r0, #116, 30	; 0x1d0
200011ac:	61747365 	cmnvs	r4, r5, ror #6
200011b0:	00007472 	andeq	r7, r0, r2, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000d51 	andeq	r0, r0, r1, asr sp
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000281 	andeq	r0, r0, r1, lsl #5
  10:	0005260c 	andeq	r2, r5, ip, lsl #12
  14:	00008800 	andeq	r8, r0, r0, lsl #16
	...
  24:	03540200 	cmpeq	r4, #0, 4
  28:	10010000 	andne	r0, r1, r0
  2c:	00000030 	andeq	r0, r0, r0, lsr r0
  30:	94070403 	strls	r0, [r7], #-1027	; 0xfffffbfd
  34:	02000003 	andeq	r0, r0, #3
  38:	00000375 	andeq	r0, r0, r5, ror r3
  3c:	00421101 	subeq	r1, r2, r1, lsl #2
  40:	02030000 	andeq	r0, r3, #0
  44:	00038e07 	andeq	r8, r3, r7, lsl #28
  48:	014c0200 	mrseq	r0, (UNDEF: 108)
  4c:	12010000 	andne	r0, r1, #0
  50:	00000054 	andeq	r0, r0, r4, asr r0
  54:	6b080103 	blvs	200468 <startup-0x1fdffb98>
  58:	04000002 	streq	r0, [r0], #-2
  5c:	000003a1 	andeq	r0, r0, r1, lsr #7
  60:	ec140118 	ldfs	f0, [r4], {24}
  64:	05000000 	streq	r0, [r0, #-0]
  68:	000004e7 	andeq	r0, r0, r7, ror #9
  6c:	00251501 	eoreq	r1, r5, r1, lsl #10
  70:	05000000 	streq	r0, [r0, #-0]
  74:	00000145 	andeq	r0, r0, r5, asr #2
  78:	00371601 	eorseq	r1, r7, r1, lsl #12
  7c:	05040000 	streq	r0, [r4, #-0]
  80:	000001da 	ldrdeq	r0, [r0], -sl
  84:	00371701 	eorseq	r1, r7, r1, lsl #14
  88:	05060000 	streq	r0, [r6, #-0]
  8c:	0000037e 	andeq	r0, r0, lr, ror r3
  90:	00251801 	eoreq	r1, r5, r1, lsl #16
  94:	05080000 	streq	r0, [r8, #-0]
  98:	000004b4 			; <UNDEFINED> instruction: 0x000004b4
  9c:	00251901 	eoreq	r1, r5, r1, lsl #18
  a0:	050c0000 	streq	r0, [ip, #-0]
  a4:	00000327 	andeq	r0, r0, r7, lsr #6
  a8:	00491a01 	subeq	r1, r9, r1, lsl #20
  ac:	05100000 	ldreq	r0, [r0, #-0]
  b0:	00000186 	andeq	r0, r0, r6, lsl #3
  b4:	00491b01 	subeq	r1, r9, r1, lsl #22
  b8:	05110000 	ldreq	r0, [r1, #-0]
  bc:	000001a1 	andeq	r0, r0, r1, lsr #3
  c0:	00371c01 	eorseq	r1, r7, r1, lsl #24
  c4:	05120000 	ldreq	r0, [r2, #-0]
  c8:	00000439 	andeq	r0, r0, r9, lsr r4
  cc:	00491d01 	subeq	r1, r9, r1, lsl #26
  d0:	05140000 	ldreq	r0, [r4, #-0]
  d4:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
  d8:	00491e01 	subeq	r1, r9, r1, lsl #28
  dc:	05150000 	ldreq	r0, [r5, #-0]
  e0:	00000577 	andeq	r0, r0, r7, ror r5
  e4:	00371f01 	eorseq	r1, r7, r1, lsl #30
  e8:	00160000 	andseq	r0, r6, r0
  ec:	0003a102 	andeq	sl, r3, r2, lsl #2
  f0:	5b210100 	blpl	8404f8 <startup-0x1f7bfb08>
  f4:	06000000 	streq	r0, [r0], -r0
  f8:	000000ec 	andeq	r0, r0, ip, ror #1
  fc:	0000d202 	andeq	sp, r0, r2, lsl #4
 100:	07220100 	streq	r0, [r2, -r0, lsl #2]!
 104:	07000001 	streq	r0, [r0, -r1]
 108:	0000f704 	andeq	pc, r0, r4, lsl #14
 10c:	00540800 	subseq	r0, r4, r0, lsl #16
 110:	011d0000 	tsteq	sp, r0
 114:	30090000 	andcc	r0, r9, r0
 118:	0f000000 	svceq	0x00000000
 11c:	00620a00 	rsbeq	r0, r2, r0, lsl #20
 120:	43010000 	movwmi	r0, #4096	; 0x1000
 124:	0000010d 	andeq	r0, r0, sp, lsl #2
 128:	10380305 	eorsne	r0, r8, r5, lsl #6
 12c:	4b0b2000 	blmi	2c8134 <startup-0x1fd37ecc>
 130:	01007965 	tsteq	r0, r5, ror #18
 134:	00010d44 	andeq	r0, r1, r4, asr #26
 138:	48030500 	stmdami	r3, {r8, sl}
 13c:	0a200010 	beq	800184 <startup-0x1f7ffe7c>
 140:	0000020f 	andeq	r0, r0, pc, lsl #4
 144:	01504501 	cmpeq	r0, r1, lsl #10
 148:	03050000 	movweq	r0, #20480	; 0x5000
 14c:	20001034 	andcs	r1, r0, r4, lsr r0
 150:	01560407 	cmpeq	r6, r7, lsl #8
 154:	01030000 	mrseq	r0, (UNDEF: 3)
 158:	00027408 	andeq	r7, r2, r8, lsl #8
 15c:	04210400 	strteq	r0, [r1], #-1024	; 0xfffffc00
 160:	01020000 	mrseq	r0, (UNDEF: 2)
 164:	00017e48 	andeq	r7, r1, r8, asr #28
 168:	00780c00 	rsbseq	r0, r8, r0, lsl #24
 16c:	00544901 	subseq	r4, r4, r1, lsl #18
 170:	0c000000 	stceq	0, cr0, [r0], {-0}
 174:	4a010079 	bmi	40360 <startup-0x1ffbfca0>
 178:	00000054 	andeq	r0, r0, r4, asr r0
 17c:	ae020001 	cdpge	0, 0, cr0, cr2, cr1, {0}
 180:	01000001 	tsteq	r0, r1
 184:	00015d4b 	andeq	r5, r1, fp, asr #26
 188:	00450400 	subeq	r0, r5, r0, lsl #8
 18c:	01280000 			; <UNDEFINED> instruction: 0x01280000
 190:	0001c54c 	andeq	ip, r1, ip, asr #10
 194:	03e20500 	mvneq	r0, #0, 10
 198:	4d010000 	stcmi	0, cr0, [r1, #-0]
 19c:	000001c5 	andeq	r0, r0, r5, asr #3
 1a0:	01b40500 			; <UNDEFINED> instruction: 0x01b40500
 1a4:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 1a8:	000001c5 	andeq	r0, r0, r5, asr #3
 1ac:	01ba0504 			; <UNDEFINED> instruction: 0x01ba0504
 1b0:	4f010000 	svcmi	0x00010000
 1b4:	000001c5 	andeq	r0, r0, r5, asr #3
 1b8:	78700c08 	ldmdavc	r0!, {r3, sl, fp}^
 1bc:	cc500100 	ldfgte	f0, [r0], {-0}
 1c0:	0c000001 	stceq	0, cr0, [r0], {1}
 1c4:	05040d00 	streq	r0, [r4, #-3328]	; 0xfffff300
 1c8:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1cc:	00017e08 	andeq	r7, r1, r8, lsl #28
 1d0:	0001dc00 	andeq	sp, r1, r0, lsl #24
 1d4:	00300900 	eorseq	r0, r0, r0, lsl #18
 1d8:	000d0000 	andeq	r0, sp, r0
 1dc:	00010e02 	andeq	r0, r1, r2, lsl #28
 1e0:	89510100 	ldmdbhi	r1, {r8}^
 1e4:	02000001 	andeq	r0, r0, #1
 1e8:	0000010d 	andeq	r0, r0, sp, lsl #2
 1ec:	01f25101 	mvnseq	r5, r1, lsl #2
 1f0:	04070000 	streq	r0, [r7], #-0
 1f4:	00000189 	andeq	r0, r0, r9, lsl #3
 1f8:	0003cf04 	andeq	ip, r3, r4, lsl #30
 1fc:	52012c00 	andpl	r2, r1, #0, 24
 200:	00000289 	andeq	r0, r0, r9, lsl #5
 204:	6f65670c 	svcvs	0x0065670c
 208:	e7530100 	ldrb	r0, [r3, -r0, lsl #2]
 20c:	00000001 	andeq	r0, r0, r1
 210:	0001e505 	andeq	lr, r1, r5, lsl #10
 214:	c5540100 	ldrbgt	r0, [r4, #-256]	; 0xffffff00
 218:	04000001 	streq	r0, [r0], #-1
 21c:	0001ea05 	andeq	lr, r1, r5, lsl #20
 220:	c5540100 	ldrbgt	r0, [r4, #-256]	; 0xffffff00
 224:	08000001 	stmdaeq	r0, {r0}
 228:	00000705 	andeq	r0, r0, r5, lsl #14
 22c:	c5550100 	ldrbgt	r0, [r5, #-256]	; 0xffffff00
 230:	0c000001 	stceq	0, cr0, [r0], {1}
 234:	0001c005 	andeq	ip, r1, r5
 238:	c5550100 	ldrbgt	r0, [r5, #-256]	; 0xffffff00
 23c:	10000001 	andne	r0, r0, r1
 240:	00044105 	andeq	r4, r4, r5, lsl #2
 244:	9f560100 	svcls	0x00560100
 248:	14000002 	strne	r0, [r0], #-2
 24c:	00017605 	andeq	r7, r1, r5, lsl #12
 250:	bb570100 	bllt	15c0658 <startup-0x1ea3f9a8>
 254:	18000002 	stmdane	r0, {r1}
 258:	00056d05 	andeq	r6, r5, r5, lsl #26
 25c:	d7580100 	ldrble	r0, [r8, -r0, lsl #2]
 260:	1c000002 	stcne	0, cr0, [r0], {2}
 264:	00044605 	andeq	r4, r4, r5, lsl #12
 268:	fd590100 	ldc2l	1, cr0, [r9, #-0]
 26c:	20000002 	andcs	r0, r0, r2
 270:	00008005 	andeq	r8, r0, r5
 274:	235a0100 	cmpcs	sl, #0, 2
 278:	24000003 	strcs	r0, [r0], #-3
 27c:	00006b05 	andeq	r6, r0, r5, lsl #22
 280:	3f5b0100 	svccc	0x005b0100
 284:	28000003 	stmdacs	r0, {r0, r1}
 288:	02940e00 	addseq	r0, r4, #0, 28
 28c:	940f0000 	strls	r0, [pc], #-0	; 294 <startup-0x1ffffd6c>
 290:	00000002 	andeq	r0, r0, r2
 294:	029a0407 	addseq	r0, sl, #117440512	; 0x7000000
 298:	72100000 	andsvc	r0, r0, #0
 29c:	07000005 	streq	r0, [r0, -r5]
 2a0:	00028904 	andeq	r8, r2, r4, lsl #18
 2a4:	02b00e00 	adcseq	r0, r0, #0, 28
 2a8:	b00f0000 	andlt	r0, pc, r0
 2ac:	00000002 	andeq	r0, r0, r2
 2b0:	02b60407 	adcseq	r0, r6, #117440512	; 0x7000000
 2b4:	72100000 	andsvc	r0, r0, #0
 2b8:	07000005 	streq	r0, [r0, -r5]
 2bc:	0002a504 	andeq	sl, r2, r4, lsl #10
 2c0:	02cc0e00 	sbceq	r0, ip, #0, 28
 2c4:	cc0f0000 	stcgt	0, cr0, [pc], {-0}
 2c8:	00000002 	andeq	r0, r0, r2
 2cc:	02d20407 	sbcseq	r0, r2, #117440512	; 0x7000000
 2d0:	72100000 	andsvc	r0, r0, #0
 2d4:	07000005 	streq	r0, [r0, -r5]
 2d8:	0002c104 	andeq	ip, r2, r4, lsl #2
 2dc:	02f20e00 	rscseq	r0, r2, #0, 28
 2e0:	f20f0000 	vhadd.s8	d0, d15, d0
 2e4:	0f000002 	svceq	0x00000002
 2e8:	000001c5 	andeq	r0, r0, r5, asr #3
 2ec:	0001c50f 	andeq	ip, r1, pc, lsl #10
 2f0:	04070000 	streq	r0, [r7], #-0
 2f4:	000002f8 	strdeq	r0, [r0], -r8
 2f8:	00057210 	andeq	r7, r5, r0, lsl r2
 2fc:	dd040700 	stcle	7, cr0, [r4, #-0]
 300:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 304:	00000318 	andeq	r0, r0, r8, lsl r3
 308:	0003180f 	andeq	r1, r3, pc, lsl #16
 30c:	01c50f00 	biceq	r0, r5, r0, lsl #30
 310:	c50f0000 	strgt	r0, [pc, #-0]	; 318 <startup-0x1ffffce8>
 314:	00000001 	andeq	r0, r0, r1
 318:	031e0407 	tsteq	lr, #117440512	; 0x7000000
 31c:	72100000 	andsvc	r0, r0, #0
 320:	07000005 	streq	r0, [r0, -r5]
 324:	00030304 	andeq	r0, r3, r4, lsl #6
 328:	03340e00 	teqeq	r4, #0, 28
 32c:	340f0000 	strcc	r0, [pc], #-0	; 334 <startup-0x1ffffccc>
 330:	00000003 	andeq	r0, r0, r3
 334:	033a0407 	teqeq	sl, #117440512	; 0x7000000
 338:	72100000 	andsvc	r0, r0, #0
 33c:	07000005 	streq	r0, [r0, -r5]
 340:	00032904 	andeq	r2, r3, r4, lsl #18
 344:	051f0200 	ldreq	r0, [pc, #-512]	; 14c <startup-0x1ffffeb4>
 348:	5c010000 	stcpl	0, cr0, [r1], {-0}
 34c:	000001f8 	strdeq	r0, [r0], -r8
 350:	00051e02 	andeq	r1, r5, r2, lsl #28
 354:	5b5c0100 	blpl	170075c <startup-0x1e8ff8a4>
 358:	07000003 	streq	r0, [r0, -r3]
 35c:	0001f804 	andeq	pc, r1, r4, lsl #16
 360:	01c50400 	biceq	r0, r5, r0, lsl #8
 364:	01200000 			; <UNDEFINED> instruction: 0x01200000
 368:	00039e5d 	andeq	r9, r3, sp, asr lr
 36c:	058f0500 	streq	r0, [pc, #1280]	; 874 <startup-0x1ffff78c>
 370:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
 374:	00000350 	andeq	r0, r0, r0, asr r3
 378:	04c30500 	strbeq	r0, [r3], #1280	; 0x500
 37c:	5f010000 	svcpl	0x00010000
 380:	000001c5 	andeq	r0, r0, r5, asr #3
 384:	01ef0504 	mvneq	r0, r4, lsl #10
 388:	60010000 	andvs	r0, r1, r0
 38c:	0000039e 	muleq	r0, lr, r3
 390:	03340508 	teqeq	r4, #8, 10	; 0x2000000
 394:	61010000 	mrsvs	r0, (UNDEF: 1)
 398:	000003ae 	andeq	r0, r0, lr, lsr #7
 39c:	56080012 			; <UNDEFINED> instruction: 0x56080012
 3a0:	ae000001 	cdpge	0, 0, cr0, cr0, cr1, {0}
 3a4:	09000003 	stmdbeq	r0, {r0, r1}
 3a8:	00000030 	andeq	r0, r0, r0, lsr r0
 3ac:	56080009 	strpl	r0, [r8], -r9
 3b0:	be000001 	cdplt	0, 0, cr0, cr0, cr1, {0}
 3b4:	09000003 	stmdbeq	r0, {r0, r1}
 3b8:	00000030 	andeq	r0, r0, r0, lsr r0
 3bc:	ad02000b 	stcge	0, cr0, [r2, #-44]	; 0xffffffd4
 3c0:	01000004 	tsteq	r0, r4
 3c4:	00036164 	andeq	r6, r3, r4, ror #2
 3c8:	04ac0200 	strteq	r0, [ip], #512	; 0x200
 3cc:	64010000 	strvs	r0, [r1], #-0
 3d0:	000003d4 	ldrdeq	r0, [r0], -r4
 3d4:	03610407 	cmneq	r1, #117440512	; 0x7000000
 3d8:	700a0000 	andvc	r0, sl, r0
 3dc:	01000004 	tsteq	r0, r4
 3e0:	0001dc77 	andeq	sp, r1, r7, ror ip
 3e4:	58030500 	stmdapl	r3, {r8, sl}
 3e8:	0a200010 	beq	800430 <startup-0x1f7ffbd0>
 3ec:	000000fc 	strdeq	r0, [r0], -ip
 3f0:	01dc8201 	bicseq	r8, ip, r1, lsl #4
 3f4:	03050000 	movweq	r0, #20480	; 0x5000
 3f8:	20001080 	andcs	r1, r0, r0, lsl #1
 3fc:	0001cd11 	andeq	ip, r1, r1, lsl sp
 400:	45900100 	ldrmi	r0, [r0, #256]	; 0x100
 404:	05000003 	streq	r0, [r0, #-3]
 408:	0010a803 	andseq	sl, r0, r3, lsl #16
 40c:	03d41120 	bicseq	r1, r4, #32, 2
 410:	9c010000 	stcls	0, cr0, [r1], {-0}
 414:	00000345 	andeq	r0, r0, r5, asr #6
 418:	10d40305 	sbcsne	r0, r4, r5, lsl #6
 41c:	81112000 	tsthi	r1, r0
 420:	01000001 	tsteq	r0, r1
 424:	000345a9 	andeq	r4, r3, r9, lsr #11
 428:	00030500 	andeq	r0, r3, r0, lsl #10
 42c:	11200011 			; <UNDEFINED> instruction: 0x11200011
 430:	00000279 	andeq	r0, r0, r9, ror r2
 434:	03beb601 			; <UNDEFINED> instruction: 0x03beb601
 438:	03050000 	movweq	r0, #20480	; 0x5000
 43c:	2000112c 	andcs	r1, r0, ip, lsr #2
 440:	00038611 	andeq	r8, r3, r1, lsl r6
 444:	bebc0100 	frdlte	f0, f4, f0
 448:	05000003 	streq	r0, [r0, #-3]
 44c:	00114c03 	andseq	r4, r1, r3, lsl #24
 450:	00c81220 	sbceq	r1, r8, r0, lsr #4
 454:	7a010000 	bvc	4045c <startup-0x1ffbfba4>
 458:	000e7002 	andeq	r7, lr, r2
 45c:	0001c420 	andeq	ip, r1, r0, lsr #8
 460:	e19c0100 	orrs	r0, ip, r0, lsl #2
 464:	13000004 	movwne	r0, #4
 468:	7b010063 	blvc	405fc <startup-0x1ffbfa04>
 46c:	00015602 	andeq	r5, r1, r2, lsl #12
 470:	5f910200 	svcpl	0x00910200
 474:	0000cd14 	andeq	ip, r0, r4, lsl sp
 478:	027c0100 	rsbseq	r0, ip, #0, 2
 47c:	00000350 	andeq	r0, r0, r0, asr r3
 480:	13689102 	cmnne	r8, #-2147483648	; 0x80000000
 484:	01003150 	tsteq	r0, r0, asr r1
 488:	03c9027d 	biceq	r0, r9, #-805306361	; 0xd0000007
 48c:	91020000 	mrsls	r0, (UNDEF: 2)
 490:	32501364 	subscc	r1, r0, #100, 6	; 0x90000001
 494:	027e0100 	rsbseq	r0, lr, #0, 2
 498:	000003c9 	andeq	r0, r0, r9, asr #7
 49c:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
 4a0:	20000f6c 	andcs	r0, r0, ip, ror #30
 4a4:	000000ac 	andeq	r0, r0, ip, lsr #1
 4a8:	0004e114 	andeq	lr, r4, r4, lsl r1
 4ac:	02970100 	addseq	r0, r7, #0, 2
 4b0:	000004e1 	andeq	r0, r0, r1, ror #9
 4b4:	14489102 	strbne	r9, [r8], #-258	; 0xfffffefe
 4b8:	00000235 	andeq	r0, r0, r5, lsr r2
 4bc:	56029801 	strpl	r9, [r2], -r1, lsl #16
 4c0:	02000001 	andeq	r0, r0, #1
 4c4:	dc156f91 	ldcle	15, cr6, [r5], {145}	; 0x91
 4c8:	3220000f 	eorcc	r0, r0, #15
 4cc:	14000000 	strne	r0, [r0], #-0
 4d0:	00000203 	andeq	r0, r0, r3, lsl #4
 4d4:	5602a501 	strpl	sl, [r2], -r1, lsl #10
 4d8:	02000001 	andeq	r0, r0, #1
 4dc:	00005e91 	muleq	r0, r1, lr
 4e0:	01560800 	cmpeq	r6, r0, lsl #16
 4e4:	04f10000 	ldrbteq	r0, [r1], #0
 4e8:	30090000 	andcc	r0, r9, r0
 4ec:	12000000 	andne	r0, r0, #0
 4f0:	050c1200 	streq	r1, [ip, #-512]	; 0xfffffe00
 4f4:	60010000 	andvs	r0, r1, r0
 4f8:	000db802 	andeq	fp, sp, r2, lsl #16
 4fc:	0000b820 	andeq	fp, r0, r0, lsr #16
 500:	339c0100 	orrscc	r0, ip, #0, 2
 504:	16000005 	strne	r0, [r0], -r5
 508:	000000cd 	andeq	r0, r0, sp, asr #1
 50c:	50026001 	andpl	r6, r2, r1
 510:	02000003 	andeq	r0, r0, #3
 514:	50177491 	mulspl	r7, r1, r4
 518:	60010031 	andvs	r0, r1, r1, lsr r0
 51c:	0003c902 	andeq	ip, r3, r2, lsl #18
 520:	70910200 	addsvc	r0, r1, r0, lsl #4
 524:	00325017 	eorseq	r5, r2, r7, lsl r0
 528:	c9026001 	stmdbgt	r2, {r0, sp, lr}
 52c:	02000003 	andeq	r0, r0, #3
 530:	18006c91 	stmdane	r0, {r0, r4, r7, sl, fp, sp, lr}
 534:	000003a6 	andeq	r0, r0, r6, lsr #7
 538:	92025b01 	andls	r5, r2, #1024	; 0x400
 53c:	2620000d 	strtcs	r0, [r0], -sp
 540:	01000000 	mrseq	r0, (UNDEF: 0)
 544:	04fd129c 	ldrbteq	r1, [sp], #668	; 0x29c
 548:	50010000 	andpl	r0, r1, r0
 54c:	000d3c02 	andeq	r3, sp, r2, lsl #24
 550:	00005620 	andeq	r5, r0, r0, lsr #12
 554:	859c0100 	ldrhi	r0, [ip, #256]	; 0x100
 558:	16000005 	strne	r0, [r0], -r5
 55c:	0000019c 	muleq	r0, ip, r1
 560:	50025001 	andpl	r5, r2, r1
 564:	02000001 	andeq	r0, r0, #1
 568:	78177491 	ldmdavc	r7, {r0, r4, r7, sl, ip, sp, lr}
 56c:	02500100 	subseq	r0, r0, #0, 2
 570:	00000585 	andeq	r0, r0, r5, lsl #11
 574:	17739102 	ldrbne	r9, [r3, -r2, lsl #2]!
 578:	50010069 	andpl	r0, r1, r9, rrx
 57c:	00015602 	andeq	r5, r1, r2, lsl #12
 580:	72910200 	addsvc	r0, r1, #0, 4
 584:	06010300 	streq	r0, [r1], -r0, lsl #6
 588:	0000026d 	andeq	r0, r0, sp, ror #4
 58c:	00013219 	andeq	r3, r1, r9, lsl r2
 590:	024c0100 	subeq	r0, ip, #0, 2
 594:	20000d2c 	andcs	r0, r0, ip, lsr #26
 598:	00000010 	andeq	r0, r0, r0, lsl r0
 59c:	ed1a9c01 	ldc	12, cr9, [sl, #-4]
 5a0:	01000004 	tsteq	r0, r4
 5a4:	00540243 	subseq	r0, r4, r3, asr #4
 5a8:	0cec0000 	stcleq	0, cr0, [ip]
 5ac:	00402000 	subeq	r2, r0, r0
 5b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 5b4:	000005c7 	andeq	r0, r0, r7, asr #11
 5b8:	00767213 	rsbseq	r7, r6, r3, lsl r2
 5bc:	54024401 	strpl	r4, [r2], #-1025	; 0xfffffbff
 5c0:	02000000 	andeq	r0, r0, #0
 5c4:	1a007791 	bne	1e410 <startup-0x1ffe1bf0>
 5c8:	0000040f 	andeq	r0, r0, pc, lsl #8
 5cc:	54023b01 	strpl	r3, [r2], #-2817	; 0xfffff4ff
 5d0:	ac000000 	stcge	0, cr0, [r0], {-0}
 5d4:	4020000c 	eormi	r0, r0, ip
 5d8:	01000000 	mrseq	r0, (UNDEF: 0)
 5dc:	0005ef9c 	muleq	r5, ip, pc	; <UNPREDICTABLE>
 5e0:	00721300 	rsbseq	r1, r2, r0, lsl #6
 5e4:	54023f01 	strpl	r3, [r2], #-3841	; 0xfffff0ff
 5e8:	02000000 	andeq	r0, r0, #0
 5ec:	1a006f91 	bne	1c438 <startup-0x1ffe3bc8>
 5f0:	000003f9 	strdeq	r0, [r0], -r9
 5f4:	54023301 	strpl	r3, [r2], #-769	; 0xfffffcff
 5f8:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
 5fc:	3420000c 	strtcc	r0, [r0], #-12
 600:	01000000 	mrseq	r0, (UNDEF: 0)
 604:	0006179c 	muleq	r6, ip, r7
 608:	00721300 	rsbseq	r1, r2, r0, lsl #6
 60c:	54023701 	strpl	r3, [r2], #-1793	; 0xfffff8ff
 610:	02000000 	andeq	r0, r0, #0
 614:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 618:	00000428 	andeq	r0, r0, r8, lsr #8
 61c:	4e022e01 	cdpmi	14, 0, cr2, cr2, cr1, {0}
 620:	2a20000c 	bcs	800658 <startup-0x1f7ff9a8>
 624:	01000000 	mrseq	r0, (UNDEF: 0)
 628:	00063d9c 	muleq	r6, ip, sp
 62c:	02661600 	rsbeq	r1, r6, #0, 12
 630:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 634:	00005402 	andeq	r5, r0, r2, lsl #8
 638:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 63c:	048a1200 	streq	r1, [sl], #512	; 0x200
 640:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 644:	000c2402 	andeq	r2, ip, r2, lsl #8
 648:	00002a20 	andeq	r2, r0, r0, lsr #20
 64c:	639c0100 	orrsvs	r0, ip, #0, 2
 650:	16000006 	strne	r0, [r0], -r6
 654:	000000e8 	andeq	r0, r0, r8, ror #1
 658:	54022901 	strpl	r2, [r2], #-2305	; 0xfffff6ff
 65c:	02000000 	andeq	r0, r0, #0
 660:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 664:	000004ca 	andeq	r0, r0, sl, asr #9
 668:	f4022301 	vst2.8	{d2-d5}, [r2], r1
 66c:	3020000b 	eorcc	r0, r0, fp
 670:	01000000 	mrseq	r0, (UNDEF: 0)
 674:	0006879c 	muleq	r6, ip, r7
 678:	00631700 	rsbeq	r1, r3, r0, lsl #14
 67c:	54022301 	strpl	r2, [r2], #-769	; 0xfffffcff
 680:	02000000 	andeq	r0, r0, #0
 684:	1b007791 	blne	1e4d0 <startup-0x1ffe1b30>
 688:	00000244 	andeq	r0, r0, r4, asr #4
 68c:	ac021c01 	stcge	12, cr1, [r2], {1}
 690:	4820000b 	stmdami	r0!, {r0, r1, r3}
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	0006b89c 	muleq	r6, ip, r8
 69c:	00781700 	rsbseq	r1, r8, r0, lsl #14
 6a0:	54021c01 	strpl	r1, [r2], #-3073	; 0xfffff3ff
 6a4:	02000000 	andeq	r0, r0, #0
 6a8:	63136f91 	tstvs	r3, #580	; 0x244
 6ac:	021d0100 	andseq	r0, sp, #0, 2
 6b0:	00000054 	andeq	r0, r0, r4, asr r0
 6b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6b8:	00004f1b 	andeq	r4, r0, fp, lsl pc
 6bc:	02160100 	andseq	r0, r6, #0, 2
 6c0:	20000b6a 	andcs	r0, r0, sl, ror #22
 6c4:	00000042 	andeq	r0, r0, r2, asr #32
 6c8:	06e99c01 	strbteq	r9, [r9], r1, lsl #24
 6cc:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 6d0:	02160100 	andseq	r0, r6, #0, 2
 6d4:	00000054 	andeq	r0, r0, r4, asr r0
 6d8:	136f9102 	cmnne	pc, #-2147483648	; 0x80000000
 6dc:	17010063 	strne	r0, [r1, -r3, rrx]
 6e0:	00005402 	andeq	r5, r0, r2, lsl #8
 6e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6e8:	01541200 	cmpeq	r4, r0, lsl #4
 6ec:	0f010000 	svceq	0x00010000
 6f0:	000b2e02 	andeq	r2, fp, r2, lsl #28
 6f4:	00003c20 	andeq	r3, r0, r0, lsr #24
 6f8:	1b9c0100 	blne	fe700b00 <Player2+0xde6ff9b4>
 6fc:	17000007 	strne	r0, [r0, -r7]
 700:	0f010063 	svceq	0x00010063
 704:	00005402 	andeq	r5, r0, r2, lsl #8
 708:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 70c:	0004281c 	andeq	r2, r4, ip, lsl r8
 710:	02120100 	andseq	r0, r2, #0, 2
 714:	000001c5 	andeq	r0, r0, r5, asr #3
 718:	1200001d 	andne	r0, r0, #29
 71c:	0000018f 	andeq	r0, r0, pc, lsl #3
 720:	f6020801 			; <UNDEFINED> instruction: 0xf6020801
 724:	3820000a 	stmdacc	r0!, {r1, r3}
 728:	01000000 	mrseq	r0, (UNDEF: 0)
 72c:	00075b9c 	muleq	r7, ip, fp
 730:	00781700 	rsbseq	r1, r8, r0, lsl #14
 734:	c5020801 	strgt	r0, [r2, #-2049]	; 0xfffff7ff
 738:	02000001 	andeq	r0, r0, #1
 73c:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
 740:	02080100 	andeq	r0, r8, #0, 2
 744:	000001c5 	andeq	r0, r0, r5, asr #3
 748:	14689102 	strbtne	r9, [r8], #-258	; 0xfffffefe
 74c:	0000033b 	andeq	r0, r0, fp, lsr r3
 750:	c5020901 	strgt	r0, [r2, #-2305]	; 0xfffff6ff
 754:	02000001 	andeq	r0, r0, #1
 758:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
 75c:	00000584 	andeq	r0, r0, r4, lsl #11
 760:	b001fe01 	andlt	pc, r1, r1, lsl #28
 764:	4620000a 	strtmi	r0, [r0], -sl
 768:	01000000 	mrseq	r0, (UNDEF: 0)
 76c:	03af1e9c 			; <UNDEFINED> instruction: 0x03af1e9c
 770:	ed010000 	stc	0, cr0, [r1, #-0]
 774:	0001c501 	andeq	ip, r1, r1, lsl #10
 778:	000a5c00 	andeq	r5, sl, r0, lsl #24
 77c:	00005420 	andeq	r5, r0, r0, lsr #8
 780:	959c0100 	ldrls	r0, [ip, #256]	; 0x100
 784:	13000007 	movwne	r0, #7
 788:	ee010063 	cdp	0, 0, cr0, cr1, cr3, {3}
 78c:	00005401 	andeq	r5, r0, r1, lsl #8
 790:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 794:	02291b00 	eoreq	r1, r9, #0, 22
 798:	e4010000 	str	r0, [r1], #-0
 79c:	000a0401 	andeq	r0, sl, r1, lsl #8
 7a0:	00005820 	andeq	r5, r0, r0, lsr #16
 7a4:	bb9c0100 	bllt	fe700bac <Player2+0xde6ffa60>
 7a8:	17000007 	strne	r0, [r0, -r7]
 7ac:	00776f72 	rsbseq	r6, r7, r2, ror pc
 7b0:	5601e401 	strpl	lr, [r1], -r1, lsl #8
 7b4:	02000001 	andeq	r0, r0, #1
 7b8:	1a007791 	bne	1e604 <startup-0x1ffe19fc>
 7bc:	0000020a 	andeq	r0, r0, sl, lsl #4
 7c0:	5401d801 	strpl	sp, [r1], #-2049	; 0xfffff7ff
 7c4:	aa000000 	bge	7cc <startup-0x1ffff834>
 7c8:	5a200009 	bpl	8007f4 <startup-0x1f7ff80c>
 7cc:	01000000 	mrseq	r0, (UNDEF: 0)
 7d0:	00083a9c 	muleq	r8, ip, sl
 7d4:	6f721300 	svcvs	0x00721300
 7d8:	d9010077 	stmdble	r1, {r0, r1, r2, r4, r5, r6}
 7dc:	0001c501 	andeq	ip, r1, r1, lsl #10
 7e0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7e4:	00001214 	andeq	r1, r0, r4, lsl r2
 7e8:	01d90100 	bicseq	r0, r9, r0, lsl #2
 7ec:	000001c5 	andeq	r0, r0, r5, asr #3
 7f0:	1f709102 	svcne	0x00709102
 7f4:	00000229 	andeq	r0, r0, r9, lsr #4
 7f8:	c501db01 	strgt	sp, [r1, #-2817]	; 0xfffff4ff
 7fc:	05000001 	streq	r0, [r0, #-1]
 800:	1d000008 	stcne	0, cr0, [r0, #-32]	; 0xffffffe0
 804:	09b61500 	ldmibeq	r6!, {r8, sl, ip}
 808:	002e2000 	eoreq	r2, lr, r0
 80c:	291f0000 	ldmdbcs	pc, {}	; <UNPREDICTABLE>
 810:	01000002 	tsteq	r0, r2
 814:	01c501db 	ldrdeq	r0, [r5, #27]
 818:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
 81c:	001d0000 	andseq	r0, sp, r0
 820:	0009be15 	andeq	fp, r9, r5, lsl lr
 824:	00002620 	andeq	r2, r0, r0, lsr #12
 828:	03af1c00 			; <UNDEFINED> instruction: 0x03af1c00
 82c:	dc010000 	stcle	0, cr0, [r1], {-0}
 830:	0001c501 	andeq	ip, r1, r1, lsl #10
 834:	00001d00 	andeq	r1, r0, r0, lsl #26
 838:	1d120000 	ldcne	0, cr0, [r2, #-0]
 83c:	01000002 	tsteq	r0, r2
 840:	098601cf 	stmibeq	r6, {r0, r1, r2, r3, r6, r7, r8}
 844:	00242000 	eoreq	r2, r4, r0
 848:	9c010000 	stcls	0, cr0, [r1], {-0}
 84c:	0000085f 	andeq	r0, r0, pc, asr r8
 850:	00736d17 	rsbseq	r6, r3, r7, lsl sp
 854:	3001cf01 	andcc	ip, r1, r1, lsl #30
 858:	02000000 	andeq	r0, r0, #0
 85c:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
 860:	000000f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 864:	5201c701 	andpl	ip, r1, #262144	; 0x40000
 868:	34200009 	strtcc	r0, [r0], #-9
 86c:	01000000 	mrseq	r0, (UNDEF: 0)
 870:	00089b9c 	muleq	r8, ip, fp
 874:	73751700 	cmnvc	r5, #0, 14
 878:	01c70100 	biceq	r0, r7, r0, lsl #2
 87c:	00000030 	andeq	r0, r0, r0, lsr r0
 880:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 884:	2000095a 	andcs	r0, r0, sl, asr r9
 888:	00000024 	andeq	r0, r0, r4, lsr #32
 88c:	01006913 	tsteq	r0, r3, lsl r9
 890:	01c501c8 	biceq	r0, r5, r8, asr #3
 894:	91020000 	mrsls	r0, (UNDEF: 2)
 898:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
 89c:	0000035d 	andeq	r0, r0, sp, asr r3
 8a0:	4001c301 	andmi	ip, r1, r1, lsl #6
 8a4:	12200009 	eorne	r0, r0, #9
 8a8:	01000000 	mrseq	r0, (UNDEF: 0)
 8ac:	047e189c 	ldrbteq	r1, [lr], #-2204	; 0xfffff764
 8b0:	bb010000 	bllt	408b8 <startup-0x1ffbf748>
 8b4:	0008fc01 	andeq	pc, r8, r1, lsl #24
 8b8:	00004420 	andeq	r4, r0, r0, lsr #8
 8bc:	129c0100 	addsne	r0, ip, #0, 2
 8c0:	000001f6 	strdeq	r0, [r0], -r6
 8c4:	8e01a901 	vmlahi.f16	s20, s2, s2	; <UNPREDICTABLE>
 8c8:	6e200008 	cdpvs	0, 2, cr0, cr0, cr8, {0}
 8cc:	01000000 	mrseq	r0, (UNDEF: 0)
 8d0:	0008e39c 	muleq	r8, ip, r3
 8d4:	004f1700 	subeq	r1, pc, r0, lsl #14
 8d8:	5001a901 	andpl	sl, r1, r1, lsl #18
 8dc:	02000003 	andeq	r0, r0, #3
 8e0:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
 8e4:	0000017c 	andeq	r0, r0, ip, ror r1
 8e8:	4801a201 	stmdami	r1, {r0, r9, sp, pc}
 8ec:	46200008 	strtmi	r0, [r0], -r8
 8f0:	01000000 	mrseq	r0, (UNDEF: 0)
 8f4:	0009079c 	muleq	r9, ip, r7
 8f8:	004f1700 	subeq	r1, pc, r0, lsl #14
 8fc:	5001a201 	andpl	sl, r1, r1, lsl #4
 900:	02000003 	andeq	r0, r0, #3
 904:	1b007491 	blne	1db50 <startup-0x1ffe24b0>
 908:	00000080 	andeq	r0, r0, r0, lsl #1
 90c:	28019e01 	stmdacs	r1, {r0, r9, sl, fp, ip, pc}
 910:	20200008 	eorcs	r0, r0, r8
 914:	01000000 	mrseq	r0, (UNDEF: 0)
 918:	0009459c 	muleq	r9, ip, r5
 91c:	004f1700 	subeq	r1, pc, r0, lsl #14
 920:	50019e01 	andpl	r9, r1, r1, lsl #28
 924:	02000003 	andeq	r0, r0, #3
 928:	78177491 	ldmdavc	r7, {r0, r4, r7, sl, ip, sp, lr}
 92c:	019e0100 	orrseq	r0, lr, r0, lsl #2
 930:	000001c5 	andeq	r0, r0, r5, asr #3
 934:	17709102 	ldrbne	r9, [r0, -r2, lsl #2]!
 938:	9e010079 	mcrls	0, 0, r0, cr1, cr9, {3}
 93c:	0001c501 	andeq	ip, r1, r1, lsl #10
 940:	6c910200 	lfmvs	f0, 4, [r1], {0}
 944:	04631200 	strbteq	r1, [r3], #-512	; 0xfffffe00
 948:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 94c:	0007d201 	andeq	sp, r7, r1, lsl #4
 950:	00005620 	andeq	r5, r0, r0, lsr #12
 954:	809c0100 	addshi	r0, ip, r0, lsl #2
 958:	17000009 	strne	r0, [r0, -r9]
 95c:	9901004f 	stmdbls	r1, {r0, r1, r2, r3, r6}
 960:	00035001 	andeq	r5, r3, r1
 964:	6c910200 	lfmvs	f0, 4, [r1], {0}
 968:	0007da15 	andeq	sp, r7, r5, lsl sl
 96c:	00004620 	andeq	r4, r0, r0, lsr #12
 970:	00691300 	rsbeq	r1, r9, r0, lsl #6
 974:	c5019a01 	strgt	r9, [r1, #-2561]	; 0xfffff5ff
 978:	02000001 	andeq	r0, r0, #1
 97c:	00007491 	muleq	r0, r1, r4
 980:	00036912 	andeq	r6, r3, r2, lsl r9
 984:	01940100 	orrseq	r0, r4, r0, lsl #2
 988:	2000077c 	andcs	r0, r0, ip, ror r7
 98c:	00000056 	andeq	r0, r0, r6, asr r0
 990:	09bb9c01 	ldmibeq	fp!, {r0, sl, fp, ip, pc}
 994:	4f170000 	svcmi	0x00170000
 998:	01940100 	orrseq	r0, r4, r0, lsl #2
 99c:	00000350 	andeq	r0, r0, r0, asr r3
 9a0:	156c9102 	strbne	r9, [ip, #-258]!	; 0xfffffefe
 9a4:	20000784 	andcs	r0, r0, r4, lsl #15
 9a8:	00000046 	andeq	r0, r0, r6, asr #32
 9ac:	01006913 	tsteq	r0, r3, lsl r9
 9b0:	01c50195 			; <UNDEFINED> instruction: 0x01c50195
 9b4:	91020000 	mrsls	r0, (UNDEF: 2)
 9b8:	1b000074 	blne	b90 <startup-0x1ffff470>
 9bc:	00000343 	andeq	r0, r0, r3, asr #6
 9c0:	5c019001 	stcpl	0, cr9, [r1], {1}
 9c4:	20200007 	eorcs	r0, r0, r7
 9c8:	01000000 	mrseq	r0, (UNDEF: 0)
 9cc:	0009fd9c 	muleq	r9, ip, sp
 9d0:	004f1700 	subeq	r1, pc, r0, lsl #14
 9d4:	50019001 	andpl	r9, r1, r1
 9d8:	02000003 	andeq	r0, r0, #3
 9dc:	3d167491 	cfldrscc	mvf7, [r6, #-580]	; 0xfffffdbc
 9e0:	01000002 	tsteq	r0, r2
 9e4:	01c50190 			; <UNDEFINED> instruction: 0x01c50190
 9e8:	91020000 	mrsls	r0, (UNDEF: 2)
 9ec:	00001670 	andeq	r1, r0, r0, ror r6
 9f0:	90010000 	andls	r0, r1, r0
 9f4:	0001c501 	andeq	ip, r1, r1, lsl #10
 9f8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 9fc:	006b1200 	rsbeq	r1, fp, r0, lsl #4
 a00:	6b010000 	blvs	40a08 <startup-0x1ffbf5f8>
 a04:	00057801 	andeq	r7, r5, r1, lsl #16
 a08:	0001e420 	andeq	lr, r1, r0, lsr #8
 a0c:	9b9c0100 	blls	fe700e14 <Player2+0xde6ffcc8>
 a10:	1700000a 	strne	r0, [r0, -sl]
 a14:	6b01004f 	blvs	40b58 <startup-0x1ffbf4a8>
 a18:	00035001 	andeq	r5, r3, r1
 a1c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 a20:	00058820 	andeq	r8, r5, r0, lsr #16
 a24:	00004420 	andeq	r4, r0, r0, lsr #8
 a28:	000a5f00 	andeq	r5, sl, r0, lsl #30
 a2c:	01321f00 	teqeq	r2, r0, lsl #30
 a30:	6f010000 	svcvs	0x00010000
 a34:	0001c501 	andeq	ip, r1, r1, lsl #10
 a38:	000a3f00 	andeq	r3, sl, r0, lsl #30
 a3c:	1f001d00 	svcne	0x00001d00
 a40:	000004fd 	strdeq	r0, [r0], -sp
 a44:	c5017001 	strgt	r7, [r1, #-1]
 a48:	51000001 	tstpl	r0, r1
 a4c:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
 a50:	021d2100 	andseq	r2, sp, #0, 2
 a54:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
 a58:	000001c5 	andeq	r0, r0, r5, asr #3
 a5c:	1500001d 	strne	r0, [r0, #-29]	; 0xffffffe3
 a60:	200005d6 	ldrdcs	r0, [r0], -r6
 a64:	00000044 	andeq	r0, r0, r4, asr #32
 a68:	0001321f 	andeq	r3, r1, pc, lsl r2
 a6c:	016f0100 	cmneq	pc, r0, lsl #2
 a70:	000001c5 	andeq	r0, r0, r5, asr #3
 a74:	00000a7a 	andeq	r0, r0, sl, ror sl
 a78:	fd1f001d 	ldc2	0, cr0, [pc, #-116]	; a0c <startup-0x1ffff5f4>
 a7c:	01000004 	tsteq	r0, r4
 a80:	01c50170 	biceq	r0, r5, r0, ror r1
 a84:	0a8c0000 	beq	fe300a8c <Player2+0xde2ff940>
 a88:	001d0000 	andseq	r0, sp, r0
 a8c:	00021d21 	andeq	r1, r2, r1, lsr #26
 a90:	c5e90100 	strbgt	r0, [r9, #256]!	; 0x100
 a94:	1d000001 	stcne	0, cr0, [r0, #-4]
 a98:	12000000 	andne	r0, r0, #0
 a9c:	0000000c 	andeq	r0, r0, ip
 aa0:	e4014601 	str	r4, [r1], #-1537	; 0xfffff9ff
 aa4:	94200003 	strtls	r0, [r0], #-3
 aa8:	01000001 	tsteq	r0, r1
 aac:	000b159c 	muleq	fp, ip, r5
 ab0:	00781700 	rsbseq	r1, r8, r0, lsl #14
 ab4:	c5014601 	strgt	r4, [r1, #-1537]	; 0xfffff9ff
 ab8:	02000001 	andeq	r0, r0, #1
 abc:	79175c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, ip, lr}
 ac0:	01460100 	mrseq	r0, (UNDEF: 86)
 ac4:	000001c5 	andeq	r0, r0, r5, asr #3
 ac8:	17589102 	ldrbne	r9, [r8, -r2, lsl #2]
 acc:	00746573 	rsbseq	r6, r4, r3, ror r5
 ad0:	c5014601 	strgt	r4, [r1, #-1537]	; 0xfffff9ff
 ad4:	02000001 	andeq	r0, r0, #1
 ad8:	2f145491 	svccs	0x00145491
 adc:	01000003 	tsteq	r0, r3
 ae0:	00490147 	subeq	r0, r9, r7, asr #2
 ae4:	91020000 	mrsls	r0, (UNDEF: 2)
 ae8:	0063136f 	rsbeq	r1, r3, pc, ror #6
 aec:	49014701 	stmdbmi	r1, {r0, r8, r9, sl, lr}
 af0:	02000000 	andeq	r0, r0, #0
 af4:	04146791 	ldreq	r6, [r4], #-1937	; 0xfffff86f
 af8:	01000004 	tsteq	r0, r4
 afc:	00490147 	subeq	r0, r9, r7, asr #2
 b00:	91020000 	mrsls	r0, (UNDEF: 2)
 b04:	0019146e 	andseq	r1, r9, lr, ror #8
 b08:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 b0c:	0001c501 	andeq	ip, r1, r1, lsl #10
 b10:	68910200 	ldmvs	r1, {r9}
 b14:	011d1200 	tsteq	sp, r0, lsl #4
 b18:	3b010000 	blcc	40b20 <startup-0x1ffbf4e0>
 b1c:	00037e01 	andeq	r7, r3, r1, lsl #28
 b20:	00006620 	andeq	r6, r0, r0, lsr #12
 b24:	469c0100 	ldrmi	r0, [ip], r0, lsl #2
 b28:	1300000b 	movwne	r0, #11
 b2c:	3c010069 	stccc	0, cr0, [r1], {105}	; 0x69
 b30:	00004901 	andeq	r4, r0, r1, lsl #18
 b34:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 b38:	01006a13 	tsteq	r0, r3, lsl sl
 b3c:	0049013c 	subeq	r0, r9, ip, lsr r1
 b40:	91020000 	mrsls	r0, (UNDEF: 2)
 b44:	1f220076 	svcne	0x00220076
 b48:	01000000 	mrseq	r0, (UNDEF: 0)
 b4c:	03380134 	teqeq	r8, #52, 2
 b50:	00462000 	subeq	r2, r6, r0
 b54:	9c010000 	stcls	0, cr0, [r1], {-0}
 b58:	00000b7b 	andeq	r0, r0, fp, ror fp
 b5c:	00026616 	andeq	r6, r2, r6, lsl r6
 b60:	01340100 	teqeq	r4, r0, lsl #2
 b64:	00000049 	andeq	r0, r0, r9, asr #32
 b68:	16779102 	ldrbtne	r9, [r7], -r2, lsl #2
 b6c:	00000404 	andeq	r0, r0, r4, lsl #8
 b70:	49013401 	stmdbmi	r1, {r0, sl, ip, sp}
 b74:	02000000 	andeq	r0, r0, #0
 b78:	22007691 	andcs	r7, r0, #152043520	; 0x9100000
 b7c:	000000da 	ldrdeq	r0, [r0], -sl
 b80:	f8012e01 			; <UNDEFINED> instruction: 0xf8012e01
 b84:	40200002 	eormi	r0, r0, r2
 b88:	01000000 	mrseq	r0, (UNDEF: 0)
 b8c:	000bb09c 	muleq	fp, ip, r0
 b90:	00e81600 	rsceq	r1, r8, r0, lsl #12
 b94:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 b98:	00004901 	andeq	r4, r0, r1, lsl #18
 b9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ba0:	00040416 	andeq	r0, r4, r6, lsl r4
 ba4:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
 ba8:	00000049 	andeq	r0, r0, r9, asr #32
 bac:	00769102 	rsbseq	r9, r6, r2, lsl #2
 bb0:	00031922 	andeq	r1, r3, r2, lsr #18
 bb4:	011e0100 	tsteq	lr, r0, lsl #2
 bb8:	2000028a 	andcs	r0, r0, sl, lsl #5
 bbc:	0000006e 	andeq	r0, r0, lr, rrx
 bc0:	0bf29c01 	bleq	ffca7bcc <Player2+0xdfca6a80>
 bc4:	17160000 	ldrne	r0, [r6, -r0]
 bc8:	01000001 	tsteq	r0, r1
 bcc:	0049011e 	subeq	r0, r9, lr, lsl r1
 bd0:	91020000 	mrsls	r0, (UNDEF: 2)
 bd4:	04041677 	streq	r1, [r4], #-1655	; 0xfffff989
 bd8:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 bdc:	00004901 	andeq	r4, r0, r1, lsl #18
 be0:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 be4:	00035d21 	andeq	r5, r3, r1, lsr #26
 be8:	c5f90100 	ldrbgt	r0, [r9, #256]!	; 0x100
 bec:	1d000001 	stcne	0, cr0, [r0, #-4]
 bf0:	59230000 	stmdbpl	r3!, {}	; <UNPREDICTABLE>
 bf4:	01000002 	tsteq	r0, r2
 bf8:	0049011a 	subeq	r0, r9, sl, lsl r1
 bfc:	02600000 	rsbeq	r0, r0, #0
 c00:	002a2000 	eoreq	r2, sl, r0
 c04:	9c010000 	stcls	0, cr0, [r1], {-0}
 c08:	00000c1c 	andeq	r0, r0, ip, lsl ip
 c0c:	00040416 	andeq	r0, r4, r6, lsl r4
 c10:	011a0100 	tsteq	sl, r0, lsl #2
 c14:	00000049 	andeq	r0, r0, r9, asr #32
 c18:	00779102 	rsbseq	r9, r7, r2, lsl #2
 c1c:	0003ec23 	andeq	lr, r3, r3, lsr #24
 c20:	01040100 	mrseq	r0, (UNDEF: 20)
 c24:	00000049 	andeq	r0, r0, r9, asr #32
 c28:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 c2c:	00000090 	muleq	r0, r0, r0
 c30:	0c609c01 	stcleq	12, cr9, [r0], #-4
 c34:	04160000 	ldreq	r0, [r6], #-0
 c38:	01000004 	tsteq	r0, r4
 c3c:	00490104 	subeq	r0, r9, r4, lsl #2
 c40:	91020000 	mrsls	r0, (UNDEF: 2)
 c44:	0063136f 	rsbeq	r1, r3, pc, ror #6
 c48:	49010501 	stmdbmi	r1, {r0, r8, sl}
 c4c:	02000000 	andeq	r0, r0, #0
 c50:	5d217791 	stcpl	7, cr7, [r1, #-580]!	; 0xfffffdbc
 c54:	01000003 	tsteq	r0, r3
 c58:	0001c5f9 	strdeq	ip, [r1], -r9
 c5c:	00001d00 	andeq	r1, r0, r0, lsl #26
 c60:	00045024 	andeq	r5, r4, r4, lsr #32
 c64:	66f30100 	ldrbtvs	r0, [r3], r0, lsl #2
 c68:	6a200001 	bvs	800c74 <startup-0x1f7ff38c>
 c6c:	01000000 	mrseq	r0, (UNDEF: 0)
 c70:	000c8f9c 	muleq	ip, ip, pc	; <UNPREDICTABLE>
 c74:	00632500 	rsbeq	r2, r3, r0, lsl #10
 c78:	0049f401 	subeq	pc, r9, r1, lsl #8
 c7c:	91020000 	mrsls	r0, (UNDEF: 2)
 c80:	035d2177 	cmpeq	sp, #-1073741795	; 0xc000001d
 c84:	f9010000 			; <UNDEFINED> instruction: 0xf9010000
 c88:	000001c5 	andeq	r0, r0, r5, asr #3
 c8c:	2600001d 			; <UNDEFINED> instruction: 0x2600001d
 c90:	00000032 	andeq	r0, r0, r2, lsr r0
 c94:	010ae501 	tsteq	sl, r1, lsl #10
 c98:	005c2000 	subseq	r2, ip, r0
 c9c:	9c010000 	stcls	0, cr0, [r1], {-0}
 ca0:	00000cc3 	andeq	r0, r0, r3, asr #25
 ca4:	0000f027 	andeq	pc, r0, r7, lsr #32
 ca8:	c5e70100 	strbgt	r0, [r7, #256]!	; 0x100
 cac:	b5000001 	strlt	r0, [r0, #-1]
 cb0:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
 cb4:	021d2100 	andseq	r2, sp, #0, 2
 cb8:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
 cbc:	000001c5 	andeq	r0, r0, r5, asr #3
 cc0:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
 cc4:	0000049a 	muleq	r0, sl, r4
 cc8:	00b0d301 	adcseq	sp, r0, r1, lsl #6
 ccc:	005a2000 	subseq	r2, sl, r0
 cd0:	9c010000 	stcls	0, cr0, [r1], {-0}
 cd4:	00000ce7 	andeq	r0, r0, r7, ror #25
 cd8:	00040428 	andeq	r0, r4, r8, lsr #8
 cdc:	49d30100 	ldmibmi	r3, {r8}^
 ce0:	02000000 	andeq	r0, r0, #0
 ce4:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 ce8:	00000165 	andeq	r0, r0, r5, ror #2
 cec:	0060cc01 	rsbeq	ip, r0, r1, lsl #24
 cf0:	00502000 	subseq	r2, r0, r0
 cf4:	9c010000 	stcls	0, cr0, [r1], {-0}
 cf8:	00000d15 	andeq	r0, r0, r5, lsl sp
 cfc:	0100782a 	tsteq	r0, sl, lsr #16
 d00:	000049cc 	andeq	r4, r0, ip, asr #19
 d04:	6f910200 	svcvs	0x00910200
 d08:	01006325 	tsteq	r0, r5, lsr #6
 d0c:	000049cd 	andeq	r4, r0, sp, asr #19
 d10:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 d14:	03ba2900 			; <UNDEFINED> instruction: 0x03ba2900
 d18:	c5010000 	strgt	r0, [r1, #-0]
 d1c:	20000010 	andcs	r0, r0, r0, lsl r0
 d20:	00000050 	andeq	r0, r0, r0, asr r0
 d24:	0d439c01 	stcleq	12, cr9, [r3, #-4]
 d28:	782a0000 	stmdavc	sl!, {}	; <UNPREDICTABLE>
 d2c:	49c50100 	stmibmi	r5, {r8}^
 d30:	02000000 	andeq	r0, r0, #0
 d34:	63256f91 			; <UNDEFINED> instruction: 0x63256f91
 d38:	49c60100 	stmibmi	r6, {r8}^
 d3c:	02000000 	andeq	r0, r0, #0
 d40:	2b007791 	blcs	1eb8c <startup-0x1ffe1474>
 d44:	00000516 	andeq	r0, r0, r6, lsl r5
 d48:	00000701 	andeq	r0, r0, r1, lsl #14
 d4c:	000c2000 	andeq	r2, ip, r0
 d50:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	00001349 	andeq	r1, r0, r9, asr #6
  20:	0b002403 	bleq	9034 <startup-0x1fff6fcc>
  24:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  28:	0400000e 	streq	r0, [r0], #-14
  2c:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  30:	0b3a0b0b 	bleq	e82c64 <startup-0x1f17d39c>
  34:	13010b3b 	movwne	r0, #6971	; 0x1b3b
  38:	0d050000 	stceq	0, cr0, [r5, #-0]
  3c:	3a0e0300 	bcc	380c44 <startup-0x1fc7f3bc>
  40:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  44:	000b3813 	andeq	r3, fp, r3, lsl r8
  48:	00350600 	eorseq	r0, r5, r0, lsl #12
  4c:	00001349 	andeq	r1, r0, r9, asr #6
  50:	0b000f07 	bleq	3c74 <startup-0x1fffc38c>
  54:	0013490b 	andseq	r4, r3, fp, lsl #18
  58:	01010800 	tsteq	r1, r0, lsl #16
  5c:	13011349 	movwne	r1, #4937	; 0x1349
  60:	21090000 	mrscs	r0, (UNDEF: 9)
  64:	2f134900 	svccs	0x00134900
  68:	0a00000b 	beq	9c <startup-0x1fffff64>
  6c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  70:	0b3b0b3a 	bleq	ec2d60 <startup-0x1f13d2a0>
  74:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  78:	00001802 	andeq	r1, r0, r2, lsl #16
  7c:	0300340b 	movweq	r3, #1035	; 0x40b
  80:	3b0b3a08 	blcc	2ce8a8 <startup-0x1fd31758>
  84:	3f13490b 	svccc	0x0013490b
  88:	00180219 	andseq	r0, r8, r9, lsl r2
  8c:	000d0c00 	andeq	r0, sp, r0, lsl #24
  90:	0b3a0803 	bleq	e820a4 <startup-0x1f17df5c>
  94:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  98:	00000b38 	andeq	r0, r0, r8, lsr fp
  9c:	0b00240d 	bleq	90d8 <startup-0x1fff6f28>
  a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  a4:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
  a8:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  ac:	00001301 	andeq	r1, r0, r1, lsl #6
  b0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
  b4:	10000013 	andne	r0, r0, r3, lsl r0
  b8:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
  bc:	0000193c 	andeq	r1, r0, ip, lsr r9
  c0:	03003411 	movweq	r3, #1041	; 0x411
  c4:	3b0b3a0e 	blcc	2ce904 <startup-0x1fd316fc>
  c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  cc:	12000018 	andne	r0, r0, #24
  d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  d4:	0b3a0e03 	bleq	e838e8 <startup-0x1f17c718>
  d8:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
  e0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  e4:	00130119 	andseq	r0, r3, r9, lsl r1
  e8:	00341300 	eorseq	r1, r4, r0, lsl #6
  ec:	0b3a0803 	bleq	e82100 <startup-0x1f17df00>
  f0:	1349053b 	movtne	r0, #38203	; 0x953b
  f4:	00001802 	andeq	r1, r0, r2, lsl #16
  f8:	03003414 	movweq	r3, #1044	; 0x414
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	02134905 	andseq	r4, r3, #81920	; 0x14000
 104:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 108:	0111010b 	tsteq	r1, fp, lsl #2
 10c:	00000612 	andeq	r0, r0, r2, lsl r6
 110:	03000516 	movweq	r0, #1302	; 0x516
 114:	3b0b3a0e 	blcc	2ce954 <startup-0x1fd316ac>
 118:	02134905 	andseq	r4, r3, #81920	; 0x14000
 11c:	17000018 	smladne	r0, r8, r0, r0
 120:	08030005 	stmdaeq	r3, {r0, r2}
 124:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 128:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 12c:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 130:	03193f00 	tsteq	r9, #0, 30
 134:	3b0b3a0e 	blcc	2ce974 <startup-0x1fd3168c>
 138:	11192705 	tstne	r9, r5, lsl #14
 13c:	40061201 	andmi	r1, r6, r1, lsl #4
 140:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 144:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 148:	03193f00 	tsteq	r9, #0, 30
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	11192705 	tstne	r9, r5, lsl #14
 154:	40061201 	andmi	r1, r6, r1, lsl #4
 158:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 15c:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 160:	03193f01 	tsteq	r9, #1, 30
 164:	3b0b3a0e 	blcc	2ce9a4 <startup-0x1fd3165c>
 168:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 16c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 170:	96184006 	ldrls	r4, [r8], -r6
 174:	13011942 	movwne	r1, #6466	; 0x1942
 178:	2e1b0000 	cdpcs	0, 1, cr0, cr11, cr0, {0}
 17c:	03193f01 	tsteq	r9, #1, 30
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	11192705 	tstne	r9, r5, lsl #14
 188:	40061201 	andmi	r1, r6, r1, lsl #4
 18c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 190:	00001301 	andeq	r1, r0, r1, lsl #6
 194:	3f012e1c 	svccc	0x00012e1c
 198:	3a0e0319 	bcc	380e04 <startup-0x1fc7f1fc>
 19c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a0:	00193c13 	andseq	r3, r9, r3, lsl ip
 1a4:	00181d00 	andseq	r1, r8, r0, lsl #26
 1a8:	2e1e0000 	cdpcs	0, 1, cr0, cr14, cr0, {0}
 1ac:	03193f01 	tsteq	r9, #1, 30
 1b0:	3b0b3a0e 	blcc	2ce9f0 <startup-0x1fd31610>
 1b4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
 1b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1bc:	97184006 	ldrls	r4, [r8, -r6]
 1c0:	13011942 	movwne	r1, #6466	; 0x1942
 1c4:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1c8:	03193f01 	tsteq	r9, #1, 30
 1cc:	3b0b3a0e 	blcc	2cea0c <startup-0x1fd315f4>
 1d0:	3c134905 			; <UNDEFINED> instruction: 0x3c134905
 1d4:	00130119 	andseq	r0, r3, r9, lsl r1
 1d8:	010b2000 	mrseq	r2, (UNDEF: 11)
 1dc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e0:	00001301 	andeq	r1, r0, r1, lsl #6
 1e4:	3f012e21 	svccc	0x00012e21
 1e8:	3a0e0319 	bcc	380e54 <startup-0x1fc7f1ac>
 1ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1f0:	00193c13 	andseq	r3, r9, r3, lsl ip
 1f4:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 1f8:	0b3a0e03 	bleq	e83a0c <startup-0x1f17c5f4>
 1fc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 200:	06120111 			; <UNDEFINED> instruction: 0x06120111
 204:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 208:	00130119 	andseq	r0, r3, r9, lsl r1
 20c:	012e2300 			; <UNDEFINED> instruction: 0x012e2300
 210:	0b3a0e03 	bleq	e83a24 <startup-0x1f17c5dc>
 214:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
 218:	01111349 	tsteq	r1, r9, asr #6
 21c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 220:	01194296 			; <UNDEFINED> instruction: 0x01194296
 224:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 228:	0e03012e 	adfeqsp	f0, f3, #0.5
 22c:	0b3b0b3a 	bleq	ec2f1c <startup-0x1f13d0e4>
 230:	01111927 	tsteq	r1, r7, lsr #18
 234:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 238:	01194296 			; <UNDEFINED> instruction: 0x01194296
 23c:	25000013 	strcs	r0, [r0, #-19]	; 0xffffffed
 240:	08030034 	stmdaeq	r3, {r2, r4, r5}
 244:	0b3b0b3a 	bleq	ec2f34 <startup-0x1f13d0cc>
 248:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 24c:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 250:	03193f01 	tsteq	r9, #1, 30
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	1119270b 	tstne	r9, fp, lsl #14
 25c:	40061201 	andmi	r1, r6, r1, lsl #4
 260:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 264:	00001301 	andeq	r1, r0, r1, lsl #6
 268:	3f012e27 	svccc	0x00012e27
 26c:	3a0e0319 	bcc	380ed8 <startup-0x1fc7f128>
 270:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 274:	01193c13 	tsteq	r9, r3, lsl ip
 278:	28000013 	stmdacs	r0, {r0, r1, r4}
 27c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 280:	0b3b0b3a 	bleq	ec2f70 <startup-0x1f13d090>
 284:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 288:	2e290000 	cdpcs	0, 2, cr0, cr9, cr0, {0}
 28c:	3a0e0301 	bcc	380e98 <startup-0x1fc7f168>
 290:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 294:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 298:	97184006 	ldrls	r4, [r8, -r6]
 29c:	13011942 	movwne	r1, #6466	; 0x1942
 2a0:	052a0000 	streq	r0, [sl, #-0]!
 2a4:	3a080300 	bcc	200eac <startup-0x1fdff154>
 2a8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	00180213 	andseq	r0, r8, r3, lsl r2
 2b0:	002e2b00 	eoreq	r2, lr, r0, lsl #22
 2b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2b8:	0b3b0b3a 	bleq	ec2fa8 <startup-0x1f13d058>
 2bc:	01111927 	tsteq	r1, r7, lsr #18
 2c0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2c4:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001024 	andeq	r1, r0, r4, lsr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20001034 	andcs	r1, r0, r4, lsr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000310 	andeq	r0, r0, r0, lsl r3
   4:	005d0002 	subseq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6e616164 	powvssz	f6, f1, f4
  28:	2f657264 	svccs	0x00657264
  2c:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
  30:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
  34:	61642f73 	smcvs	17139	; 0x42f3
  38:	37313074 			; <UNDEFINED> instruction: 0x37313074
  3c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
  40:	20726574 	rsbscs	r6, r2, r4, ror r5
  44:	2f293428 	svccs	0x00293428
  48:	30746164 	rsbscc	r6, r4, r4, ror #2
  4c:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
  50:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
  54:	4f502f72 	svcmi	0x00502f72
  58:	0000474e 	andeq	r4, r0, lr, asr #14
  5c:	676e6f70 			; <UNDEFINED> instruction: 0x676e6f70
  60:	0100632e 	tsteq	r0, lr, lsr #6
  64:	00000000 	andeq	r0, r0, r0
  68:	00000205 	andeq	r0, r0, r5, lsl #4
  6c:	13192000 	tstne	r9, #0
  70:	0003025e 	andeq	r0, r3, lr, asr r2
  74:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
  78:	00001002 	andeq	r1, r0, r2
  7c:	01c40320 	biceq	r0, r4, r0, lsr #6
  80:	67596801 	ldrbvs	r6, [r9, -r1, lsl #16]
  84:	68674bc9 	stmdavs	r7!, {r0, r3, r6, r7, r8, r9, fp, lr}^
  88:	4bbb6759 	blmi	feed9df4 <Player2+0xdeed8ca8>
  8c:	10036775 	andne	r6, r3, r5, ror r7
  90:	20700374 	rsbscs	r0, r0, r4, ror r3
  94:	034a1003 	movteq	r1, #40963	; 0xa003
  98:	223d2072 	eorscs	r2, sp, #114	; 0x72
  9c:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
  a0:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
  a4:	3d3d2f4b 	ldccc	15, cr2, [sp, #-300]!	; 0xfffffed4
  a8:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  ac:	4b4b4b4b 	blmi	12d2de0 <startup-0x1ed2d220>
  b0:	3e3d3d4b 	cdpcc	13, 3, cr3, cr13, cr11, {2}
  b4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  b8:	752f3d30 	strvc	r3, [pc, #-3376]!	; fffff390 <Player2+0xdfffe244>
  bc:	25452f3d 	strbcs	r2, [r5, #-3901]	; 0xfffff0c3
  c0:	689f3d22 	ldmvs	pc, {r1, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
  c4:	593d3d3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, sl, fp, ip, sp}
  c8:	592f3d2f 	stmdbpl	pc!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}	; <UNPREDICTABLE>
  cc:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
  d0:	303d5930 	eorscc	r5, sp, r0, lsr r9
  d4:	5967ad3d 	stmdbpl	r7!, {r0, r2, r3, r4, r5, r8, sl, fp, sp, pc}^
  d8:	4b914b67 	blmi	fe452e7c <Player2+0xde451d30>
  dc:	2f3d2f59 	svccs	0x003d2f59
  e0:	303d593d 	eorscc	r5, sp, sp, lsr r9
  e4:	75303d59 	ldrvc	r3, [r0, #-3417]!	; 0xfffff2a7
  e8:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
  ec:	3d914b83 	vldrcc	d4, [r1, #524]	; 0x20c
  f0:	833d3d59 	teqhi	sp, #5696	; 0x1640
  f4:	9f4b3e4b 	svcls	0x004b3e4b
  f8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
  fc:	02004b03 	andeq	r4, r0, #3072	; 0xc00
 100:	00490304 	subeq	r0, r9, r4, lsl #6
 104:	06010402 	streq	r0, [r1], -r2, lsl #8
 108:	04020058 	streq	r0, [r2], #-88	; 0xffffffa8
 10c:	00470602 	subeq	r0, r7, r2, lsl #12
 110:	06010402 	streq	r0, [r1], -r2, lsl #8
 114:	4c510658 	mrrcmi	6, 5, r0, r1, cr8
 118:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 11c:	004a0601 	subeq	r0, sl, r1, lsl #12
 120:	4a020402 	bmi	81130 <startup-0x1ff7eed0>
 124:	03040200 	movweq	r0, #16896	; 0x4200
 128:	754b064a 	strbvc	r0, [fp, #-1610]	; 0xfffff9b6
 12c:	59591308 	ldmdbpl	r9, {r3, r8, r9, ip}^
 130:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 134:	673d5a59 			; <UNDEFINED> instruction: 0x673d5a59
 138:	4b4d4b3d 	blmi	1352e34 <startup-0x1ecad1cc>
 13c:	91c9c93e 	bicls	ip, r9, lr, lsr r9
 140:	91a03dbb 	lsrls	r3, fp	; <illegal shifter operand>
 144:	03ac6203 			; <UNDEFINED> instruction: 0x03ac6203
 148:	4c85201f 	stcmi	0, cr2, [r5], {31}
 14c:	912f594b 			; <UNDEFINED> instruction: 0x912f594b
 150:	1c036791 	stcne	7, cr6, [r3], {145}	; 0x91
 154:	2067033c 	rsbcs	r0, r7, ip, lsr r3
 158:	912f594b 			; <UNDEFINED> instruction: 0x912f594b
 15c:	13036791 	movwne	r6, #14225	; 0x3791
 160:	2071033c 	rsbscs	r0, r1, ip, lsr r3
 164:	01040200 	mrseq	r0, R12_usr
 168:	91064a06 	tstls	r6, r6, lsl #20
 16c:	04020069 	streq	r0, [r2], #-105	; 0xffffff97
 170:	00ac0601 	adceq	r0, ip, r1, lsl #12
 174:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 178:	03040200 	movweq	r0, #16896	; 0x4200
 17c:	598306c8 	stmibpl	r3, {r3, r6, r7, r9, sl}
 180:	020085ad 	andeq	r8, r0, #725614592	; 0x2b400000
 184:	ac060104 	stfges	f0, [r6], {4}
 188:	02040200 	andeq	r0, r4, #0, 4
 18c:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 190:	8306c803 	movwhi	ip, #26627	; 0x6803
 194:	d776ad59 			; <UNDEFINED> instruction: 0xd776ad59
 198:	4b3d3d67 	blmi	f4f73c <startup-0x1f0b08c4>
 19c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1a0:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 1a4:	8f080304 	svchi	0x00080304
 1a8:	01040200 	mrseq	r0, R12_usr
 1ac:	3f063c06 	svccc	0x00063c06
 1b0:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 1b4:	003d0304 	eorseq	r0, sp, r4, lsl #6
 1b8:	08030402 	stmdaeq	r3, {r1, sl}
 1bc:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
 1c0:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 1c4:	3d674b3f 	fstmdbxcc	r7!, {d20-d50}	;@ Deprecated
 1c8:	4b4b4b3d 	blmi	12d2ec4 <startup-0x1ed2d13c>
 1cc:	4b757559 	blmi	1d5d738 <startup-0x1e2a28c8>
 1d0:	004c4b4b 	subeq	r4, ip, fp, asr #22
 1d4:	06010402 	streq	r0, [r1], -r2, lsl #8
 1d8:	844b064a 	strbhi	r0, [fp], #-1610	; 0xfffff9b6
 1dc:	01040200 	mrseq	r0, R12_usr
 1e0:	4b069006 	blmi	1a4200 <startup-0x1fe5be00>
 1e4:	4d4c3d79 	stclmi	13, cr3, [ip, #-484]	; 0xfffffe1c
 1e8:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 1ec:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 1f0:	06200601 	strteq	r0, [r0], -r1, lsl #12
 1f4:	2f9f3d67 	svccs	0x009f3d67
 1f8:	4b3d2f2f 	blmi	f4bebc <startup-0x1f0b4144>
 1fc:	03040200 	movweq	r0, #16896	; 0x4200
 200:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 204:	02002f03 	andeq	r2, r0, #3, 30
 208:	002f0304 	eoreq	r0, pc, r4, lsl #6
 20c:	2f030402 	svccs	0x00030402
 210:	03040200 	movweq	r0, #16896	; 0x4200
 214:	0402002a 	streq	r0, [r2], #-42	; 0xffffffd6
 218:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 21c:	a04e4b50 	subge	r4, lr, r0, asr fp
 220:	4b3d3e4d 	blmi	f4fb5c <startup-0x1f0b04a4>
 224:	02003d75 	andeq	r3, r0, #7488	; 0x1d40
 228:	008c0204 	addeq	r0, ip, r4, lsl #4
 22c:	06010402 	streq	r0, [r1], -r2, lsl #8
 230:	3d43063c 	stclcc	6, cr0, [r3, #-240]	; 0xffffff10
 234:	91676721 	cmnls	r7, r1, lsr #14
 238:	4b4b4b4b 	blmi	12d2f6c <startup-0x1ed2d094>
 23c:	4b3e914c 	blmi	fa4774 <startup-0x1f05b88c>
 240:	01040200 	mrseq	r0, R12_usr
 244:	2f065806 	svccs	0x00065806
 248:	01040200 	mrseq	r0, R12_usr
 24c:	2f065806 	svccs	0x00065806
 250:	01040200 	mrseq	r0, R12_usr
 254:	2f065806 	svccs	0x00065806
 258:	01040200 	mrseq	r0, R12_usr
 25c:	2f065806 	svccs	0x00065806
 260:	66090321 	strvs	r0, [r9], -r1, lsr #6
 264:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 268:	06200601 	strteq	r0, [r0], -r1, lsl #12
 26c:	3d3d3d83 	ldccc	13, cr3, [sp, #-524]!	; 0xfffffdf4
 270:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 274:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 278:	674b9f3e 	smlaldxvs	r9, fp, lr, pc	; <UNPREDICTABLE>
 27c:	01040200 	mrseq	r0, R12_usr
 280:	83062006 	movwhi	r2, #24582	; 0x6006
 284:	4c3d593d 			; <UNDEFINED> instruction: 0x4c3d593d
 288:	59ad5968 	stmibpl	sp!, {r3, r5, r6, r8, fp, ip, lr}
 28c:	e5596867 	ldrb	r6, [r9, #-2151]	; 0xfffff799
 290:	3d67684b 	stclcc	8, cr6, [r7, #-300]!	; 0xfffffed4
 294:	673d2f4b 	ldrvs	r2, [sp, -fp, asr #30]!
 298:	593d3d67 	ldmdbpl	sp!, {r0, r1, r2, r5, r6, r8, sl, fp, ip, sp}
 29c:	3d3d674b 	ldccc	7, cr6, [sp, #-300]!	; 0xfffffed4
 2a0:	3d3d4b59 	fldmdbxcc	sp!, {d4-d47}	;@ Deprecated
 2a4:	3d4b2f2f 	stclcc	15, cr2, [fp, #-188]	; 0xffffff44
 2a8:	3d3d752f 	cfldr32cc	mvfx7, [sp, #-188]!	; 0xffffff44
 2ac:	3d593d3d 	ldclcc	13, cr3, [r9, #-244]	; 0xffffff0c
 2b0:	3d3e9f2f 	ldccc	15, cr9, [lr, #-188]!	; 0xffffff44
 2b4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 2b8:	3d2fbb2f 	fstmdbxcc	pc!, {d11-d33}	;@ Deprecated
 2bc:	2167bb3e 	cmncs	r7, lr, lsr fp
 2c0:	5b4b4c73 	blpl	12d3494 <startup-0x1ed2cb6c>
 2c4:	3d3d304d 	ldccc	0, cr3, [sp, #-308]!	; 0xfffffecc
 2c8:	3e3d68ad 	cdpcc	8, 3, cr6, cr13, cr13, {5}
 2cc:	4d4b4b4b 	vstrmi	d20, [fp, #-300]	; 0xfffffed4
 2d0:	aead2f31 	mcrge	15, 5, r2, cr13, cr1, {1}
 2d4:	59677775 	stmdbpl	r7!, {r0, r2, r4, r5, r6, r8, r9, sl, ip, sp, lr}^
 2d8:	2f2f3eca 	svccs	0x002f3eca
 2dc:	2f2f2f30 	svccs	0x002f2f30
 2e0:	673d5968 	ldrvs	r5, [sp, -r8, ror #18]!
 2e4:	21759fc9 	cmncs	r5, r9, asr #31
 2e8:	9f217591 	svcls	0x00217591
 2ec:	75912175 	ldrvc	r2, [r1, #373]	; 0x175
 2f0:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 2f4:	064a0601 	strbeq	r0, [sl], -r1, lsl #12
 2f8:	4b4b9f4b 	blmi	12e802c <startup-0x1ed17fd4>
 2fc:	4b85752f 	blmi	fe15d7c0 <Player2+0xde15c674>
 300:	2176752f 	cmncs	r6, pc, lsr #10
 304:	46674bad 	strbtmi	r4, [r7], -sp, lsr #23
 308:	01040200 	mrseq	r0, R12_usr
 30c:	02586103 	subseq	r6, r8, #-1073741824	; 0xc0000000
 310:	0101000e 	tsteq	r1, lr

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	70007964 	andvc	r7, r0, r4, ror #18
   8:	0078736f 	rsbseq	r7, r8, pc, ror #6
   c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  10:	6f63006c 	svcvs	0x0063006c
  14:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
  18:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
  1c:	67007865 	strvs	r7, [r0, -r5, ror #16]
  20:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  24:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  28:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  2c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  30:	72670061 	rsbvc	r0, r7, #97	; 0x61
  34:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  38:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
  3c:	61697469 	cmnvs	r9, r9, ror #8
  40:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
  44:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
  48:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  4c:	61007972 	tstvs	r0, r2, ror r9
  50:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  54:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
  58:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  5c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
  60:	65530074 	ldrbvs	r0, [r3, #-116]	; 0xffffff8c
  64:	646f6367 	strbtvs	r6, [pc], #-871	; 6c <startup-0x1fffff94>
  68:	63007365 	movwvs	r7, #869	; 0x365
  6c:	6b636568 	blvs	18d9614 <startup-0x1e7269ec>
  70:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
  74:	6f635f6c 	svcvs	0x00635f6c
  78:	73696c6c 	cmnvc	r9, #108, 24	; 0x6c00
  7c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
  80:	5f746573 	svcpl	0x00746573
  84:	00736f70 	rsbseq	r6, r3, r0, ror pc
  88:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  8c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  90:	6161645c 	cmnvs	r1, ip, asr r4
  94:	6572646e 	ldrbvs	r6, [r2, #-1134]!	; 0xfffffb92
  98:	776f445c 			; <UNDEFINED> instruction: 0x776f445c
  9c:	616f6c6e 	cmnvs	pc, lr, ror #24
  a0:	645c7364 	ldrbvs	r7, [ip], #-868	; 0xfffffc9c
  a4:	31307461 	teqcc	r0, r1, ror #8
  a8:	616d2d37 	cmnvs	sp, r7, lsr sp
  ac:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
  b0:	29342820 	ldmdbcs	r4!, {r5, fp, sp}
  b4:	7461645c 	strbtvc	r6, [r1], #-1116	; 0xfffffba4
  b8:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
  bc:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
  c0:	505c7265 	subspl	r7, ip, r5, ror #4
  c4:	00474e4f 	subeq	r4, r7, pc, asr #28
  c8:	6e69616d 	powvsez	f6, f1, #5.0
  cc:	4c414200 	sfmmi	f4, 2, [r1], {-0}
  d0:	7067004c 	rsbvc	r0, r7, ip, asr #32
  d4:	74706f69 	ldrbtvc	r6, [r0], #-3945	; 0xfffff097
  d8:	72670072 	rsbvc	r0, r7, #114	; 0x72
  dc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  e0:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  e4:	5f657469 	svcpl	0x00657469
  e8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  ec:	00646e61 	rsbeq	r6, r4, r1, ror #28
  f0:	616c6564 	cmnvs	ip, r4, ror #10
  f4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  f8:	006f726b 	rsbeq	r7, pc, fp, ror #4
  fc:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 100:	5f726563 	svcpl	0x00726563
 104:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff70 <Player2+0xdfffee24>
 108:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 10c:	45475000 	strbmi	r5, [r7, #-0]
 110:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
 114:	76005952 			; <UNDEFINED> instruction: 0x76005952
 118:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
 11c:	61726700 	cmnvs	r2, r0, lsl #14
 120:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 124:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 128:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
 12c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
 130:	7361006e 	cmnvc	r1, #110	; 0x6e
 134:	5f696963 	svcpl	0x00696963
 138:	61656c63 	cmnvs	r5, r3, ror #24
 13c:	73645f72 	cmnvc	r4, #456	; 0x1c8
 140:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
 144:	79746f00 	ldmdbvc	r4!, {r8, r9, sl, fp, sp, lr}^
 148:	00726570 	rsbseq	r6, r2, r0, ror r5
 14c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 150:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 154:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 158:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 15c:	5f657469 	svcpl	0x00657469
 160:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 164:	61726700 	cmnvs	r2, r0, lsl #14
 168:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 16c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 170:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 174:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 178:	00726165 	rsbseq	r6, r2, r5, ror #2
 17c:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 180:	6c61625f 	sfmvs	f6, 2, [r1], #-380	; 0xfffffe84
 184:	6469006c 	strbtvs	r0, [r9], #-108	; 0xffffff94
 188:	69685f72 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 18c:	61006867 	tstvs	r0, r7, ror #16
 190:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 194:	746f675f 	strbtvc	r6, [pc], #-1887	; 19c <startup-0x1ffffe64>
 198:	0079786f 	rsbseq	r7, r9, pc, ror #16
 19c:	656e696c 	strbvs	r6, [lr, #-2412]!	; 0xfffff694
 1a0:	72646900 	rsbvc	r6, r4, #0, 18
 1a4:	7365725f 	cmnvc	r5, #-268435451	; 0xf0000005
 1a8:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 1ac:	4f500064 	svcmi	0x00500064
 1b0:	00544e49 	subseq	r4, r4, r9, asr #28
 1b4:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 1b8:	69730058 	ldmdbvs	r3!, {r3, r4, r6}^
 1bc:	0059657a 	subseq	r6, r9, sl, ror r5
 1c0:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 1c4:	6c507400 	cfldrdvs	mvd7, [r0], {-0}
 1c8:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 1cc:	66656c00 	strbtvs	r6, [r5], -r0, lsl #24
 1d0:	6f625f74 	svcvs	0x00625f74
 1d4:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
 1d8:	746f0072 	strbtvc	r0, [pc], #-114	; 1e0 <startup-0x1ffffe20>
 1dc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
 1e0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 1e4:	72696400 	rsbvc	r6, r9, #0, 8
 1e8:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 1ec:	50007972 	andpl	r7, r0, r2, ror r9
 1f0:	69637341 	stmdbvs	r3!, {r0, r6, r8, r9, ip, sp, lr}^
 1f4:	6f6d0069 	svcvs	0x006d0069
 1f8:	625f6576 	subsvs	r6, pc, #494927872	; 0x1d800000
 1fc:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
 200:	62007265 	andvs	r7, r0, #1342177286	; 0x50000006
 204:	6f747475 	svcvs	0x00747475
 208:	656b006e 	strbvs	r0, [fp, #-110]!	; 0xffffff92
 20c:	41006279 	tstmi	r0, r9, ror r2
 210:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 214:	5074754f 	rsbspl	r7, r4, pc, asr #10
 218:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 21c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 220:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 166 <startup-0x1ffffe9a>	; <UNPREDICTABLE>
 224:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 228:	74634100 	strbtvc	r4, [r3], #-256	; 0xffffff00
 22c:	74617669 	strbtvc	r7, [r1], #-1641	; 0xfffff997
 230:	776f5265 	strbvc	r5, [pc, -r5, ror #4]!
 234:	73657200 	cmnvc	r5, #0, 4
 238:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 23c:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 240:	00786465 	rsbseq	r6, r8, r5, ror #8
 244:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 248:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 24c:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 250:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 254:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 258:	61726700 	cmnvs	r2, r0, lsl #14
 25c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 260:	6165725f 	cmnvs	r5, pc, asr r2
 264:	61645f64 	cmnvs	r4, r4, ror #30
 268:	75006174 	strvc	r6, [r0, #-372]	; 0xfffffe8c
 26c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 270:	2064656e 	rsbcs	r6, r4, lr, ror #10
 274:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 278:	616c5000 	cmnvs	ip, r0
 27c:	31726579 	cmncc	r2, r9, ror r5
 280:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 284:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 288:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 28c:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 290:	30373130 	eorscc	r3, r7, r0, lsr r1
 294:	20343039 	eorscs	r3, r4, r9, lsr r0
 298:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 29c:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 2a0:	415b2029 	cmpmi	fp, r9, lsr #32
 2a4:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff55a <Player2+0xdfffe40e>
 2a8:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 2ac:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 2b0:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 2b4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 2b8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 2bc:	6f697369 	svcvs	0x00697369
 2c0:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 2c4:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 2c8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 2cc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 2d0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 2d4:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 2d8:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 2dc:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 2e0:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 2e4:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 2e8:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 2ec:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 2f0:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 2f4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 2f8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 2fc:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 300:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 304:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 308:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 30c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 310:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 314:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 318:	61726700 	cmnvs	r2, r0, lsl #14
 31c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 320:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 324:	69006574 	stmdbvs	r0, {r2, r4, r5, r6, r8, sl, sp, lr}
 328:	6c5f7264 	lfmvs	f7, 2, [pc], {100}	; 0x64
 32c:	6d00776f 	stcvs	7, cr7, [r0, #-444]	; 0xfffffe44
 330:	006b7361 	rsbeq	r7, fp, r1, ror #6
 334:	4d6e6977 			; <UNDEFINED> instruction: 0x4d6e6977
 338:	61006773 	tstvs	r0, r3, ror r7
 33c:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 340:	73007373 	movwvc	r7, #883	; 0x373
 344:	6f5f7465 	svcvs	0x005f7465
 348:	63656a62 	cmnvs	r5, #401408	; 0x62000
 34c:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 350:	00646565 	rsbeq	r6, r4, r5, ror #10
 354:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 358:	745f3233 	ldrbvc	r3, [pc], #-563	; 360 <startup-0x1ffffca0>
 35c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 360:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffffa07 <Player2+0xdfffe8bb>
 364:	736e3030 	cmnvc	lr, #48	; 0x30
 368:	61726400 	cmnvs	r2, r0, lsl #8
 36c:	626f5f77 	rsbvs	r5, pc, #476	; 0x1dc
 370:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 374:	6e697500 	cdpvs	5, 6, cr7, cr9, cr0, {0}
 378:	5f363174 	svcpl	0x00363174
 37c:	536f0074 	cmnpl	pc, #116	; 0x74
 380:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 384:	6c500072 	mrrcvs	0, 7, r0, r0, cr2	; <UNPREDICTABLE>
 388:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
 38c:	68730032 	ldmdavs	r3!, {r1, r4, r5}^
 390:	2074726f 	rsbscs	r7, r4, pc, ror #4
 394:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 398:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 39c:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 3a0:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 3a4:	6e69004f 	cdpvs	0, 6, cr0, cr9, cr15, {2}
 3a8:	615f7469 	cmpvs	pc, r9, ror #8
 3ac:	52007070 	andpl	r7, r0, #112	; 0x70
 3b0:	43646165 	cmnmi	r4, #1073741849	; 0x40000019
 3b4:	6d756c6f 	ldclvs	12, cr6, [r5, #-444]!	; 0xfffffe44
 3b8:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 3bc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3c0:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 3c4:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 3c8:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 3cc:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 3d0:	006a624f 	rsbeq	r6, sl, pc, asr #4
 3d4:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 3d8:	6f625f74 	svcvs	0x00625f74
 3dc:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
 3e0:	756e0072 	strbvc	r0, [lr, #-114]!	; 0xffffff8e
 3e4:	696f506d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 3e8:	0073746e 	rsbseq	r7, r3, lr, ror #8
 3ec:	70617267 	rsbvc	r7, r1, r7, ror #4
 3f0:	5f636968 	svcpl	0x00636968
 3f4:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 3f8:	63736100 	cmnvs	r3, #0, 2
 3fc:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 400:	5f646165 	svcpl	0x00646165
 404:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 408:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 40c:	61007265 	tstvs	r0, r5, ror #4
 410:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 414:	6165725f 	cmnvs	r5, pc, asr r2
 418:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 41c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 420:	6f707400 	svcvs	0x00707400
 424:	00746e69 	rsbseq	r6, r4, r9, ror #28
 428:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 42c:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 430:	5f657469 	svcpl	0x00657469
 434:	61746164 	cmnvs	r4, r4, ror #2
 438:	72646f00 	rsbvc	r6, r4, #0, 30
 43c:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
 440:	61726400 	cmnvs	r2, r0, lsl #8
 444:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 448:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 44c:	00646565 	rsbeq	r6, r4, r5, ror #10
 450:	70617267 	rsbvc	r7, r1, r7, ror #4
 454:	5f636968 	svcpl	0x00636968
 458:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 45c:	6165725f 	cmnvs	r5, pc, asr r2
 460:	63007964 	movwvs	r7, #2404	; 0x964
 464:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 468:	6a626f5f 	bvs	189c1ec <startup-0x1e763e14>
 46c:	00746365 	rsbseq	r6, r4, r5, ror #6
 470:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 474:	6f65675f 	svcvs	0x0065675f
 478:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 47c:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 480:	5f79616c 	svcpl	0x0079616c
 484:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 488:	73610073 	cmnvc	r1, #115	; 0x73
 48c:	5f696963 	svcpl	0x00696963
 490:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 494:	4d435f65 	stclmi	15, cr5, [r3, #-404]	; 0xfffffe6c
 498:	65730044 	ldrbvs	r0, [r3, #-68]!	; 0xffffffbc
 49c:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 4a0:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 4a4:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2dc <startup-0x1ffffd24>
 4a8:	0072656c 	rsbseq	r6, r2, ip, ror #10
 4ac:	414c5050 	qdaddmi	r5, r0, ip
 4b0:	00524559 	subseq	r4, r2, r9, asr r5
 4b4:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 4b8:	646f0072 	strbtvs	r0, [pc], #-114	; 4c0 <startup-0x1ffffb40>
 4bc:	69685f72 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4c0:	70006867 	andvc	r6, r0, r7, ror #16
 4c4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 4c8:	73610073 	cmnvc	r1, #115	; 0x73
 4cc:	5f696963 	svcpl	0x00696963
 4d0:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4d4:	6f635f65 	svcvs	0x00635f65
 4d8:	6f72746e 	svcvs	0x0072746e
 4dc:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4e0:	65727000 	ldrbvs	r7, [r2, #-0]!
 4e4:	6d007373 	stcvs	3, cr7, [r0, #-460]	; 0xfffffe34
 4e8:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 4ec:	63736100 	cmnvs	r3, #0, 2
 4f0:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 4f4:	5f646165 	svcpl	0x00646165
 4f8:	61746164 	cmnvs	r4, r4, ror #2
 4fc:	69727000 	ldmdbvs	r2!, {ip, sp, lr}^
 500:	745f746e 	ldrbvc	r7, [pc], #-1134	; 508 <startup-0x1ffffaf8>
 504:	73615f6f 	cmnvc	r1, #444	; 0x1bc
 508:	00696963 	rsbeq	r6, r9, r3, ror #18
 50c:	656d6167 	strbvs	r6, [sp, #-359]!	; 0xfffffe99
 510:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 514:	74730074 	ldrbtvc	r0, [r3], #-116	; 0xffffff8c
 518:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 51c:	4f500070 	svcmi	0x00500070
 520:	43454a42 	movtmi	r4, #23106	; 0x5a42
 524:	3a430054 	bcc	10c067c <startup-0x1ef3f984>
 528:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 52c:	642f7372 	strtvs	r7, [pc], #-882	; 534 <startup-0x1ffffacc>
 530:	646e6161 	strbtvs	r6, [lr], #-353	; 0xfffffe9f
 534:	442f6572 	strtmi	r6, [pc], #-1394	; 53c <startup-0x1ffffac4>
 538:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
 53c:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
 540:	7461642f 	strbtvc	r6, [r1], #-1071	; 0xfffffbd1
 544:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 548:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 54c:	28207265 	stmdacs	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 550:	642f2934 	strtvs	r2, [pc], #-2356	; 558 <startup-0x1ffffaa8>
 554:	31307461 	teqcc	r0, r1, ror #8
 558:	616d2d37 	cmnvs	sp, r7, lsr sp
 55c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 560:	4e4f502f 	cdpmi	0, 4, cr5, cr15, cr15, {1}
 564:	6f702f47 	svcvs	0x00702f47
 568:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
 56c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 570:	6f740065 	svcvs	0x00740065
 574:	6f006a62 	svcvs	0x00006a62
 578:	725f7264 	subsvc	r7, pc, #100, 4	; 0x40000006
 57c:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 580:	00646576 	rsbeq	r6, r4, r6, ror r5
 584:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 588:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 58c:	6f007469 	svcvs	0x00007469
 590:	74636a62 	strbtvc	r6, [r3], #-2658	; 0xfffff59e
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <Player2+0xdfffe1c2>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000050 	andeq	r0, r0, r0, asr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000060 	andcs	r0, r0, r0, rrx
  4c:	00000050 	andeq	r0, r0, r0, asr r0
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	180e4101 	stmdane	lr, {r0, r8, lr}
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
  6c:	0000005a 	andeq	r0, r0, sl, asr r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	2000010a 	andcs	r0, r0, sl, lsl #2
  8c:	0000005c 	andeq	r0, r0, ip, asr r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	20000166 	andcs	r0, r0, r6, ror #2
  a8:	0000006a 	andeq	r0, r0, sl, rrx
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c8:	00000090 	muleq	r0, r0, r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	180e4101 	stmdane	lr, {r0, r8, lr}
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000260 	andcs	r0, r0, r0, ror #4
  e8:	0000002a 	andeq	r0, r0, sl, lsr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	2000028a 	andcs	r0, r0, sl, lsl #5
 108:	0000006e 	andeq	r0, r0, lr, rrx
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200002f8 	strdcs	r0, [r0], -r8
 128:	00000040 	andeq	r0, r0, r0, asr #32
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	100e4101 	andne	r4, lr, r1, lsl #2
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	20000338 	andcs	r0, r0, r8, lsr r3
 148:	00000046 	andeq	r0, r0, r6, asr #32
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	2000037e 	andcs	r0, r0, lr, ror r3
 168:	00000066 	andeq	r0, r0, r6, rrx
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	00000024 	andeq	r0, r0, r4, lsr #32
 180:	00000000 	andeq	r0, r0, r0
 184:	200003e4 	andcs	r0, r0, r4, ror #7
 188:	00000194 	muleq	r0, r4, r1
 18c:	40100e41 	andsmi	r0, r0, r1, asr #28
 190:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 194:	02874003 	addeq	r4, r7, #3
 198:	41018e40 	tstmi	r1, r0, asr #28
 19c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 1a0:	00000007 	andeq	r0, r0, r7
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	20000578 	andcs	r0, r0, r8, ror r5
 1b0:	000001e4 	andeq	r0, r0, r4, ror #3
 1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1bc:	018e4002 	orreq	r4, lr, r2
 1c0:	41180e41 	tstmi	r8, r1, asr #28
 1c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	2000075c 	andcs	r0, r0, ip, asr r7
 1d4:	00000020 	andeq	r0, r0, r0, lsr #32
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1e4:	00070d41 	andeq	r0, r7, r1, asr #26
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	2000077c 	andcs	r0, r0, ip, ror r7
 1f4:	00000056 	andeq	r0, r0, r6, asr r0
 1f8:	40080e41 	andmi	r0, r8, r1, asr #28
 1fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 200:	180e4101 	stmdane	lr, {r0, r8, lr}
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	200007d2 	ldrdcs	r0, [r0], -r2
 214:	00000056 	andeq	r0, r0, r6, asr r0
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	180e4101 	stmdane	lr, {r0, r8, lr}
 224:	00070d41 	andeq	r0, r7, r1, asr #26
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	20000828 	andcs	r0, r0, r8, lsr #16
 234:	00000020 	andeq	r0, r0, r0, lsr #32
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	180e4101 	stmdane	lr, {r0, r8, lr}
 244:	00070d41 	andeq	r0, r7, r1, asr #26
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	20000848 	andcs	r0, r0, r8, asr #16
 254:	00000046 	andeq	r0, r0, r6, asr #32
 258:	40080e41 	andmi	r0, r8, r1, asr #28
 25c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 260:	100e4101 	andne	r4, lr, r1, lsl #2
 264:	00070d41 	andeq	r0, r7, r1, asr #26
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	2000088e 	andcs	r0, r0, lr, lsl #17
 274:	0000006e 	andeq	r0, r0, lr, rrx
 278:	40080e41 	andmi	r0, r8, r1, asr #28
 27c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 280:	100e4101 	andne	r4, lr, r1, lsl #2
 284:	00070d41 	andeq	r0, r7, r1, asr #26
 288:	00000018 	andeq	r0, r0, r8, lsl r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	200008fc 	strdcs	r0, [r0], -ip
 294:	00000044 	andeq	r0, r0, r4, asr #32
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	20000940 	andcs	r0, r0, r0, asr #18
 2b0:	00000012 	andeq	r0, r0, r2, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000000 	andeq	r0, r0, r0
 2c8:	20000952 	andcs	r0, r0, r2, asr r9
 2cc:	00000034 	andeq	r0, r0, r4, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	00000000 	andeq	r0, r0, r0
 2e8:	20000986 	andcs	r0, r0, r6, lsl #19
 2ec:	00000024 	andeq	r0, r0, r4, lsr #32
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	100e4101 	andne	r4, lr, r1, lsl #2
 2fc:	00070d41 	andeq	r0, r7, r1, asr #26
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000000 	andeq	r0, r0, r0
 308:	200009aa 	andcs	r0, r0, sl, lsr #19
 30c:	0000005a 	andeq	r0, r0, sl, asr r0
 310:	40080e41 	andmi	r0, r8, r1, asr #28
 314:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 318:	100e4101 	andne	r4, lr, r1, lsl #2
 31c:	00070d41 	andeq	r0, r7, r1, asr #26
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000000 	andeq	r0, r0, r0
 328:	20000a04 	andcs	r0, r0, r4, lsl #20
 32c:	00000058 	andeq	r0, r0, r8, asr r0
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	100e4101 	andne	r4, lr, r1, lsl #2
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000000 	andeq	r0, r0, r0
 348:	20000a5c 	andcs	r0, r0, ip, asr sl
 34c:	00000054 	andeq	r0, r0, r4, asr r0
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	100e4101 	andne	r4, lr, r1, lsl #2
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	00000018 	andeq	r0, r0, r8, lsl r0
 364:	00000000 	andeq	r0, r0, r0
 368:	20000ab0 			; <UNDEFINED> instruction: 0x20000ab0
 36c:	00000046 	andeq	r0, r0, r6, asr #32
 370:	40080e41 	andmi	r0, r8, r1, asr #28
 374:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 378:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 37c:	0000001c 	andeq	r0, r0, ip, lsl r0
 380:	00000000 	andeq	r0, r0, r0
 384:	20000af6 	strdcs	r0, [r0], -r6
 388:	00000038 	andeq	r0, r0, r8, lsr r0
 38c:	40080e41 	andmi	r0, r8, r1, asr #28
 390:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 394:	180e4101 	stmdane	lr, {r0, r8, lr}
 398:	00070d41 	andeq	r0, r7, r1, asr #26
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	20000b2e 	andcs	r0, r0, lr, lsr #22
 3a8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	100e4101 	andne	r4, lr, r1, lsl #2
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	20000b6a 	andcs	r0, r0, sl, ror #22
 3c8:	00000042 	andeq	r0, r0, r2, asr #32
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	20000bac 	andcs	r0, r0, ip, lsr #23
 3e8:	00000048 	andeq	r0, r0, r8, asr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	00000000 	andeq	r0, r0, r0
 404:	20000bf4 	strdcs	r0, [r0], -r4
 408:	00000030 	andeq	r0, r0, r0, lsr r0
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	100e4101 	andne	r4, lr, r1, lsl #2
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	20000c24 	andcs	r0, r0, r4, lsr #24
 428:	0000002a 	andeq	r0, r0, sl, lsr #32
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	100e4101 	andne	r4, lr, r1, lsl #2
 438:	00070d41 	andeq	r0, r7, r1, asr #26
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	00000000 	andeq	r0, r0, r0
 444:	20000c4e 	andcs	r0, r0, lr, asr #24
 448:	0000002a 	andeq	r0, r0, sl, lsr #32
 44c:	40080e41 	andmi	r0, r8, r1, asr #28
 450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 454:	100e4101 	andne	r4, lr, r1, lsl #2
 458:	00070d41 	andeq	r0, r7, r1, asr #26
 45c:	0000001c 	andeq	r0, r0, ip, lsl r0
 460:	00000000 	andeq	r0, r0, r0
 464:	20000c78 	andcs	r0, r0, r8, ror ip
 468:	00000034 	andeq	r0, r0, r4, lsr r0
 46c:	40080e41 	andmi	r0, r8, r1, asr #28
 470:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 474:	100e4101 	andne	r4, lr, r1, lsl #2
 478:	00070d41 	andeq	r0, r7, r1, asr #26
 47c:	00000020 	andeq	r0, r0, r0, lsr #32
 480:	00000000 	andeq	r0, r0, r0
 484:	20000cac 	andcs	r0, r0, ip, lsr #25
 488:	00000040 	andeq	r0, r0, r0, asr #32
 48c:	400c0e41 	andmi	r0, ip, r1, asr #28
 490:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 494:	018e4002 	orreq	r4, lr, r2
 498:	41180e41 	tstmi	r8, r1, asr #28
 49c:	0000070d 	andeq	r0, r0, sp, lsl #14
 4a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4a4:	00000000 	andeq	r0, r0, r0
 4a8:	20000cec 	andcs	r0, r0, ip, ror #25
 4ac:	00000040 	andeq	r0, r0, r0, asr #32
 4b0:	40080e41 	andmi	r0, r8, r1, asr #28
 4b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4b8:	100e4101 	andne	r4, lr, r1, lsl #2
 4bc:	00070d41 	andeq	r0, r7, r1, asr #26
 4c0:	00000018 	andeq	r0, r0, r8, lsl r0
 4c4:	00000000 	andeq	r0, r0, r0
 4c8:	20000d2c 	andcs	r0, r0, ip, lsr #26
 4cc:	00000010 	andeq	r0, r0, r0, lsl r0
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	20000d3c 	andcs	r0, r0, ip, lsr sp
 4e8:	00000056 	andeq	r0, r0, r6, asr r0
 4ec:	40080e41 	andmi	r0, r8, r1, asr #28
 4f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f4:	100e4101 	andne	r4, lr, r1, lsl #2
 4f8:	00070d41 	andeq	r0, r7, r1, asr #26
 4fc:	00000018 	andeq	r0, r0, r8, lsl r0
 500:	00000000 	andeq	r0, r0, r0
 504:	20000d92 	mulcs	r0, r2, sp
 508:	00000026 	andeq	r0, r0, r6, lsr #32
 50c:	40080e41 	andmi	r0, r8, r1, asr #28
 510:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 514:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 518:	0000001c 	andeq	r0, r0, ip, lsl r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	20000db8 			; <UNDEFINED> instruction: 0x20000db8
 524:	000000b8 	strheq	r0, [r0], -r8
 528:	40080e41 	andmi	r0, r8, r1, asr #28
 52c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 530:	180e4101 	stmdane	lr, {r0, r8, lr}
 534:	00070d41 	andeq	r0, r7, r1, asr #26
 538:	00000024 	andeq	r0, r0, r4, lsr #32
 53c:	00000000 	andeq	r0, r0, r0
 540:	20000e70 	andcs	r0, r0, r0, ror lr
 544:	000001c4 	andeq	r0, r0, r4, asr #3
 548:	40100e41 	andsmi	r0, r0, r1, asr #28
 54c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 550:	02874003 	addeq	r4, r7, #3
 554:	41018e40 	tstmi	r1, r0, asr #28
 558:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 55c:	00000007 	andeq	r0, r0, r7
