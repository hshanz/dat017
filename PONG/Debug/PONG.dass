
./Debug/PONG.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 ff42 	bl	20000e8c <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_ctrl_bit_set>:
	.winMsg = "PLayer2 wins",
};

//                      Functions
// LCD functions
static void graphic_ctrl_bit_set(uint8_t x) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = GPIO_E.odr_low;
2000001c:	4a0f      	ldr	r2, [pc, #60]	; (2000005c <graphic_ctrl_bit_set+0x4c>)
2000001e:	200f      	movs	r0, #15
20000020:	183b      	adds	r3, r7, r0
20000022:	7d12      	ldrb	r2, [r2, #20]
20000024:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
20000026:	183b      	adds	r3, r7, r0
20000028:	183a      	adds	r2, r7, r0
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	2104      	movs	r1, #4
2000002e:	438a      	bics	r2, r1
20000030:	701a      	strb	r2, [r3, #0]
c |= (~B_SELECT & x);
20000032:	1dfb      	adds	r3, r7, #7
20000034:	781b      	ldrb	r3, [r3, #0]
20000036:	b25b      	sxtb	r3, r3
20000038:	2204      	movs	r2, #4
2000003a:	4393      	bics	r3, r2
2000003c:	b25a      	sxtb	r2, r3
2000003e:	183b      	adds	r3, r7, r0
20000040:	781b      	ldrb	r3, [r3, #0]
20000042:	b25b      	sxtb	r3, r3
20000044:	4313      	orrs	r3, r2
20000046:	b25a      	sxtb	r2, r3
20000048:	183b      	adds	r3, r7, r0
2000004a:	701a      	strb	r2, [r3, #0]
GPIO_E.odr_low = c;
2000004c:	4a03      	ldr	r2, [pc, #12]	; (2000005c <graphic_ctrl_bit_set+0x4c>)
2000004e:	183b      	adds	r3, r7, r0
20000050:	781b      	ldrb	r3, [r3, #0]
20000052:	7513      	strb	r3, [r2, #20]
}
20000054:	46c0      	nop			; (mov r8, r8)
20000056:	46bd      	mov	sp, r7
20000058:	b004      	add	sp, #16
2000005a:	bd80      	pop	{r7, pc}
2000005c:	40021000 	andmi	r1, r2, r0

20000060 <graphic_ctrl_bit_clear>:
static void graphic_ctrl_bit_clear(uint8_t x) {
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	0002      	movs	r2, r0
20000068:	1dfb      	adds	r3, r7, #7
2000006a:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = GPIO_E.odr_low;
2000006c:	4a0f      	ldr	r2, [pc, #60]	; (200000ac <graphic_ctrl_bit_clear+0x4c>)
2000006e:	200f      	movs	r0, #15
20000070:	183b      	adds	r3, r7, r0
20000072:	7d12      	ldrb	r2, [r2, #20]
20000074:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
20000076:	183b      	adds	r3, r7, r0
20000078:	183a      	adds	r2, r7, r0
2000007a:	7812      	ldrb	r2, [r2, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	438a      	bics	r2, r1
20000080:	701a      	strb	r2, [r3, #0]
c &= ~x;
20000082:	1dfb      	adds	r3, r7, #7
20000084:	781b      	ldrb	r3, [r3, #0]
20000086:	b25b      	sxtb	r3, r3
20000088:	43db      	mvns	r3, r3
2000008a:	b25b      	sxtb	r3, r3
2000008c:	183a      	adds	r2, r7, r0
2000008e:	7812      	ldrb	r2, [r2, #0]
20000090:	b252      	sxtb	r2, r2
20000092:	4013      	ands	r3, r2
20000094:	b25a      	sxtb	r2, r3
20000096:	183b      	adds	r3, r7, r0
20000098:	701a      	strb	r2, [r3, #0]
GPIO_E.odr_low = c;
2000009a:	4a04      	ldr	r2, [pc, #16]	; (200000ac <graphic_ctrl_bit_clear+0x4c>)
2000009c:	183b      	adds	r3, r7, r0
2000009e:	781b      	ldrb	r3, [r3, #0]
200000a0:	7513      	strb	r3, [r2, #20]
}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	46bd      	mov	sp, r7
200000a6:	b004      	add	sp, #16
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	40021000 	andmi	r1, r2, r0

200000b0 <select_controller>:
static void select_controller(uint8_t controller){
200000b0:	b580      	push	{r7, lr}
200000b2:	b082      	sub	sp, #8
200000b4:	af00      	add	r7, sp, #0
200000b6:	0002      	movs	r2, r0
200000b8:	1dfb      	adds	r3, r7, #7
200000ba:	701a      	strb	r2, [r3, #0]
	switch(controller){
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	781b      	ldrb	r3, [r3, #0]
200000c0:	2b18      	cmp	r3, #24
200000c2:	d01a      	beq.n	200000fa <select_controller+0x4a>
200000c4:	dc1d      	bgt.n	20000102 <select_controller+0x52>
200000c6:	2b10      	cmp	r3, #16
200000c8:	d010      	beq.n	200000ec <select_controller+0x3c>
200000ca:	dc1a      	bgt.n	20000102 <select_controller+0x52>
200000cc:	2b00      	cmp	r3, #0
200000ce:	d002      	beq.n	200000d6 <select_controller+0x26>
200000d0:	2b08      	cmp	r3, #8
200000d2:	d004      	beq.n	200000de <select_controller+0x2e>
			break;
		case B_CS1|B_CS2 :
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200000d4:	e015      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200000d6:	2018      	movs	r0, #24
200000d8:	f7ff ffc2 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000dc:	e011      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
200000de:	2008      	movs	r0, #8
200000e0:	f7ff ff96 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200000e4:	2010      	movs	r0, #16
200000e6:	f7ff ffbb 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000ea:	e00a      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
200000ec:	2010      	movs	r0, #16
200000ee:	f7ff ff8f 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
200000f2:	2008      	movs	r0, #8
200000f4:	f7ff ffb4 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000f8:	e003      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200000fa:	2018      	movs	r0, #24
200000fc:	f7ff ff88 	bl	20000010 <graphic_ctrl_bit_set>
			break;
20000100:	46c0      	nop			; (mov r8, r8)
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}

2000010a <graphic_initialize>:
void graphic_initialize(void) {
2000010a:	b580      	push	{r7, lr}
2000010c:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000010e:	2040      	movs	r0, #64	; 0x40
20000110:	f7ff ff7e 	bl	20000010 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000114:	200a      	movs	r0, #10
20000116:	f000 fc0a 	bl	2000092e <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
2000011a:	2078      	movs	r0, #120	; 0x78
2000011c:	f7ff ffa0 	bl	20000060 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000120:	201e      	movs	r0, #30
20000122:	f000 fc1f 	bl	20000964 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000126:	2020      	movs	r0, #32
20000128:	f7ff ff72 	bl	20000010 <graphic_ctrl_bit_set>
	delay_milli(100);
2000012c:	2064      	movs	r0, #100	; 0x64
2000012e:	f000 fc19 	bl	20000964 <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
20000132:	2118      	movs	r1, #24
20000134:	203e      	movs	r0, #62	; 0x3e
20000136:	f000 f8df 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
2000013a:	2118      	movs	r1, #24
2000013c:	203f      	movs	r0, #63	; 0x3f
2000013e:	f000 f8db 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
20000142:	2118      	movs	r1, #24
20000144:	20c0      	movs	r0, #192	; 0xc0
20000146:	f000 f8d7 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
2000014a:	2118      	movs	r1, #24
2000014c:	2040      	movs	r0, #64	; 0x40
2000014e:	f000 f8d3 	bl	200002f8 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
20000152:	2118      	movs	r1, #24
20000154:	20b8      	movs	r0, #184	; 0xb8
20000156:	f000 f8cf 	bl	200002f8 <graphic_write_command>
	select_controller(0);
2000015a:	2000      	movs	r0, #0
2000015c:	f7ff ffa8 	bl	200000b0 <select_controller>
}
20000160:	46c0      	nop			; (mov r8, r8)
20000162:	46bd      	mov	sp, r7
20000164:	bd80      	pop	{r7, pc}

20000166 <graphic_wait_ready>:
static void graphic_wait_ready(void) {
20000166:	b580      	push	{r7, lr}
20000168:	b082      	sub	sp, #8
2000016a:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000016c:	2040      	movs	r0, #64	; 0x40
2000016e:	f7ff ff77 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555; // 15-8 inputs, 7-0 outputs
20000172:	4b14      	ldr	r3, [pc, #80]	; (200001c4 <graphic_wait_ready+0x5e>)
20000174:	4a14      	ldr	r2, [pc, #80]	; (200001c8 <graphic_wait_ready+0x62>)
20000176:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
20000178:	2001      	movs	r0, #1
2000017a:	f7ff ff71 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
2000017e:	2002      	movs	r0, #2
20000180:	f7ff ff46 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000184:	f000 fbca 	bl	2000091c <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000188:	2040      	movs	r0, #64	; 0x40
2000018a:	f7ff ff41 	bl	20000010 <graphic_ctrl_bit_set>
		delay_500ns();
2000018e:	f000 fbc5 	bl	2000091c <delay_500ns>
		c = GPIO_E.idr_high & LCD_BUSY;
20000192:	4b0c      	ldr	r3, [pc, #48]	; (200001c4 <graphic_wait_ready+0x5e>)
20000194:	7c5b      	ldrb	r3, [r3, #17]
20000196:	b2da      	uxtb	r2, r3
20000198:	1dfb      	adds	r3, r7, #7
2000019a:	217f      	movs	r1, #127	; 0x7f
2000019c:	438a      	bics	r2, r1
2000019e:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff5d 	bl	20000060 <graphic_ctrl_bit_clear>
		delay_500ns();
200001a6:	f000 fbb9 	bl	2000091c <delay_500ns>
		if( c == 0 ) break;
200001aa:	1dfb      	adds	r3, r7, #7
200001ac:	781b      	ldrb	r3, [r3, #0]
200001ae:	2b00      	cmp	r3, #0
200001b0:	d000      	beq.n	200001b4 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200001b2:	e7e9      	b.n	20000188 <graphic_wait_ready+0x22>
		if( c == 0 ) break;
200001b4:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E.moder = 0x55555555; // 15-0 outputs
200001b6:	4b03      	ldr	r3, [pc, #12]	; (200001c4 <graphic_wait_ready+0x5e>)
200001b8:	4a04      	ldr	r2, [pc, #16]	; (200001cc <graphic_wait_ready+0x66>)
200001ba:	601a      	str	r2, [r3, #0]
}
200001bc:	46c0      	nop			; (mov r8, r8)
200001be:	46bd      	mov	sp, r7
200001c0:	b002      	add	sp, #8
200001c2:	bd80      	pop	{r7, pc}
200001c4:	40021000 	andmi	r1, r2, r0
200001c8:	00005555 	andeq	r5, r0, r5, asr r5
200001cc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001d0 <graphic_read>:
static uint8_t graphic_read(uint8_t controller) {
200001d0:	b580      	push	{r7, lr}
200001d2:	b084      	sub	sp, #16
200001d4:	af00      	add	r7, sp, #0
200001d6:	0002      	movs	r2, r0
200001d8:	1dfb      	adds	r3, r7, #7
200001da:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200001dc:	2040      	movs	r0, #64	; 0x40
200001de:	f7ff ff3f 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x00005555; // 15-8 inputs, 7-0 outputs
200001e2:	4b1c      	ldr	r3, [pc, #112]	; (20000254 <graphic_read+0x84>)
200001e4:	4a1c      	ldr	r2, [pc, #112]	; (20000258 <graphic_read+0x88>)
200001e6:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
200001e8:	2003      	movs	r0, #3
200001ea:	f7ff ff11 	bl	20000010 <graphic_ctrl_bit_set>
	select_controller(controller);
200001ee:	1dfb      	adds	r3, r7, #7
200001f0:	781b      	ldrb	r3, [r3, #0]
200001f2:	0018      	movs	r0, r3
200001f4:	f7ff ff5c 	bl	200000b0 <select_controller>
	delay_500ns();
200001f8:	f000 fb90 	bl	2000091c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200001fc:	2040      	movs	r0, #64	; 0x40
200001fe:	f7ff ff07 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000202:	f000 fb8b 	bl	2000091c <delay_500ns>
	c = GPIO_E.idr_high;
20000206:	4a13      	ldr	r2, [pc, #76]	; (20000254 <graphic_read+0x84>)
20000208:	230f      	movs	r3, #15
2000020a:	18fb      	adds	r3, r7, r3
2000020c:	7c52      	ldrb	r2, [r2, #17]
2000020e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000210:	2040      	movs	r0, #64	; 0x40
20000212:	f7ff ff25 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E.moder = 0x55555555; // 15-0 outputs
20000216:	4b0f      	ldr	r3, [pc, #60]	; (20000254 <graphic_read+0x84>)
20000218:	4a10      	ldr	r2, [pc, #64]	; (2000025c <graphic_read+0x8c>)
2000021a:	601a      	str	r2, [r3, #0]
	if( controller & B_CS1 ) {
2000021c:	1dfb      	adds	r3, r7, #7
2000021e:	781b      	ldrb	r3, [r3, #0]
20000220:	2208      	movs	r2, #8
20000222:	4013      	ands	r3, r2
20000224:	d004      	beq.n	20000230 <graphic_read+0x60>
		select_controller(B_CS1);
20000226:	2008      	movs	r0, #8
20000228:	f7ff ff42 	bl	200000b0 <select_controller>
		graphic_wait_ready();
2000022c:	f7ff ff9b 	bl	20000166 <graphic_wait_ready>
	}
	if( controller & B_CS2 ) {
20000230:	1dfb      	adds	r3, r7, #7
20000232:	781b      	ldrb	r3, [r3, #0]
20000234:	2210      	movs	r2, #16
20000236:	4013      	ands	r3, r2
20000238:	d004      	beq.n	20000244 <graphic_read+0x74>
		select_controller(B_CS2);
2000023a:	2010      	movs	r0, #16
2000023c:	f7ff ff38 	bl	200000b0 <select_controller>
		graphic_wait_ready();
20000240:	f7ff ff91 	bl	20000166 <graphic_wait_ready>
	}
return c;
20000244:	230f      	movs	r3, #15
20000246:	18fb      	adds	r3, r7, r3
20000248:	781b      	ldrb	r3, [r3, #0]
}
2000024a:	0018      	movs	r0, r3
2000024c:	46bd      	mov	sp, r7
2000024e:	b004      	add	sp, #16
20000250:	bd80      	pop	{r7, pc}
20000252:	46c0      	nop			; (mov r8, r8)
20000254:	40021000 	andmi	r1, r2, r0
20000258:	00005555 	andeq	r5, r0, r5, asr r5
2000025c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000260 <graphic_read_data>:
static uint8_t graphic_read_data(uint8_t controller) {
20000260:	b580      	push	{r7, lr}
20000262:	b082      	sub	sp, #8
20000264:	af00      	add	r7, sp, #0
20000266:	0002      	movs	r2, r0
20000268:	1dfb      	adds	r3, r7, #7
2000026a:	701a      	strb	r2, [r3, #0]
graphic_read(controller);
2000026c:	1dfb      	adds	r3, r7, #7
2000026e:	781b      	ldrb	r3, [r3, #0]
20000270:	0018      	movs	r0, r3
20000272:	f7ff ffad 	bl	200001d0 <graphic_read>
return graphic_read(controller);
20000276:	1dfb      	adds	r3, r7, #7
20000278:	781b      	ldrb	r3, [r3, #0]
2000027a:	0018      	movs	r0, r3
2000027c:	f7ff ffa8 	bl	200001d0 <graphic_read>
20000280:	0003      	movs	r3, r0
}
20000282:	0018      	movs	r0, r3
20000284:	46bd      	mov	sp, r7
20000286:	b002      	add	sp, #8
20000288:	bd80      	pop	{r7, pc}

2000028a <graphic_write>:
static void graphic_write(uint8_t value, uint8_t controller) {
2000028a:	b580      	push	{r7, lr}
2000028c:	b082      	sub	sp, #8
2000028e:	af00      	add	r7, sp, #0
20000290:	0002      	movs	r2, r0
20000292:	1dfb      	adds	r3, r7, #7
20000294:	701a      	strb	r2, [r3, #0]
20000296:	1dbb      	adds	r3, r7, #6
20000298:	1c0a      	adds	r2, r1, #0
2000029a:	701a      	strb	r2, [r3, #0]
	GPIO_E.odr_high = value;
2000029c:	4a15      	ldr	r2, [pc, #84]	; (200002f4 <graphic_write+0x6a>)
2000029e:	1dfb      	adds	r3, r7, #7
200002a0:	781b      	ldrb	r3, [r3, #0]
200002a2:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
200002a4:	1dbb      	adds	r3, r7, #6
200002a6:	781b      	ldrb	r3, [r3, #0]
200002a8:	0018      	movs	r0, r3
200002aa:	f7ff ff01 	bl	200000b0 <select_controller>
	delay_500ns();
200002ae:	f000 fb35 	bl	2000091c <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002b2:	2040      	movs	r0, #64	; 0x40
200002b4:	f7ff feac 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
200002b8:	f000 fb30 	bl	2000091c <delay_500ns>
	graphic_ctrl_bit_clear( B_E );
200002bc:	2040      	movs	r0, #64	; 0x40
200002be:	f7ff fecf 	bl	20000060 <graphic_ctrl_bit_clear>
	if(controller & B_CS1) {
200002c2:	1dbb      	adds	r3, r7, #6
200002c4:	781b      	ldrb	r3, [r3, #0]
200002c6:	2208      	movs	r2, #8
200002c8:	4013      	ands	r3, r2
200002ca:	d004      	beq.n	200002d6 <graphic_write+0x4c>
		select_controller( B_CS1);
200002cc:	2008      	movs	r0, #8
200002ce:	f7ff feef 	bl	200000b0 <select_controller>
		graphic_wait_ready();
200002d2:	f7ff ff48 	bl	20000166 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200002d6:	1dbb      	adds	r3, r7, #6
200002d8:	781b      	ldrb	r3, [r3, #0]
200002da:	2210      	movs	r2, #16
200002dc:	4013      	ands	r3, r2
200002de:	d004      	beq.n	200002ea <graphic_write+0x60>
		select_controller( B_CS2);
200002e0:	2010      	movs	r0, #16
200002e2:	f7ff fee5 	bl	200000b0 <select_controller>
		graphic_wait_ready();
200002e6:	f7ff ff3e 	bl	20000166 <graphic_wait_ready>
	}
}
200002ea:	46c0      	nop			; (mov r8, r8)
200002ec:	46bd      	mov	sp, r7
200002ee:	b002      	add	sp, #8
200002f0:	bd80      	pop	{r7, pc}
200002f2:	46c0      	nop			; (mov r8, r8)
200002f4:	40021000 	andmi	r1, r2, r0

200002f8 <graphic_write_command>:
static void graphic_write_command(uint8_t command, uint8_t controller) {
200002f8:	b580      	push	{r7, lr}
200002fa:	b082      	sub	sp, #8
200002fc:	af00      	add	r7, sp, #0
200002fe:	0002      	movs	r2, r0
20000300:	1dfb      	adds	r3, r7, #7
20000302:	701a      	strb	r2, [r3, #0]
20000304:	1dbb      	adds	r3, r7, #6
20000306:	1c0a      	adds	r2, r1, #0
20000308:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000030a:	2040      	movs	r0, #64	; 0x40
2000030c:	f7ff fea8 	bl	20000060 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000310:	1dbb      	adds	r3, r7, #6
20000312:	781b      	ldrb	r3, [r3, #0]
20000314:	0018      	movs	r0, r3
20000316:	f7ff fecb 	bl	200000b0 <select_controller>
	graphic_ctrl_bit_clear(B_RS|B_RW);
2000031a:	2003      	movs	r0, #3
2000031c:	f7ff fea0 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000320:	1dbb      	adds	r3, r7, #6
20000322:	781a      	ldrb	r2, [r3, #0]
20000324:	1dfb      	adds	r3, r7, #7
20000326:	781b      	ldrb	r3, [r3, #0]
20000328:	0011      	movs	r1, r2
2000032a:	0018      	movs	r0, r3
2000032c:	f7ff ffad 	bl	2000028a <graphic_write>
}
20000330:	46c0      	nop			; (mov r8, r8)
20000332:	46bd      	mov	sp, r7
20000334:	b002      	add	sp, #8
20000336:	bd80      	pop	{r7, pc}

20000338 <graphic_write_data>:
static void graphic_write_data(uint8_t data, uint8_t controller) {
20000338:	b580      	push	{r7, lr}
2000033a:	b082      	sub	sp, #8
2000033c:	af00      	add	r7, sp, #0
2000033e:	0002      	movs	r2, r0
20000340:	1dfb      	adds	r3, r7, #7
20000342:	701a      	strb	r2, [r3, #0]
20000344:	1dbb      	adds	r3, r7, #6
20000346:	1c0a      	adds	r2, r1, #0
20000348:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000034a:	2040      	movs	r0, #64	; 0x40
2000034c:	f7ff fe88 	bl	20000060 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000350:	1dbb      	adds	r3, r7, #6
20000352:	781b      	ldrb	r3, [r3, #0]
20000354:	0018      	movs	r0, r3
20000356:	f7ff feab 	bl	200000b0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000035a:	2001      	movs	r0, #1
2000035c:	f7ff fe58 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000360:	2002      	movs	r0, #2
20000362:	f7ff fe7d 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
20000366:	1dbb      	adds	r3, r7, #6
20000368:	781a      	ldrb	r2, [r3, #0]
2000036a:	1dfb      	adds	r3, r7, #7
2000036c:	781b      	ldrb	r3, [r3, #0]
2000036e:	0011      	movs	r1, r2
20000370:	0018      	movs	r0, r3
20000372:	f7ff ff8a 	bl	2000028a <graphic_write>
}
20000376:	46c0      	nop			; (mov r8, r8)
20000378:	46bd      	mov	sp, r7
2000037a:	b002      	add	sp, #8
2000037c:	bd80      	pop	{r7, pc}

2000037e <graphic_clear_screen>:
void graphic_clear_screen(void) {
2000037e:	b580      	push	{r7, lr}
20000380:	b082      	sub	sp, #8
20000382:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
20000384:	1dbb      	adds	r3, r7, #6
20000386:	2200      	movs	r2, #0
20000388:	701a      	strb	r2, [r3, #0]
2000038a:	e023      	b.n	200003d4 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
2000038c:	1dbb      	adds	r3, r7, #6
2000038e:	781b      	ldrb	r3, [r3, #0]
20000390:	2248      	movs	r2, #72	; 0x48
20000392:	4252      	negs	r2, r2
20000394:	4313      	orrs	r3, r2
20000396:	b2db      	uxtb	r3, r3
20000398:	2118      	movs	r1, #24
2000039a:	0018      	movs	r0, r3
2000039c:	f7ff ffac 	bl	200002f8 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200003a0:	2118      	movs	r1, #24
200003a2:	2040      	movs	r0, #64	; 0x40
200003a4:	f7ff ffa8 	bl	200002f8 <graphic_write_command>
		for(i = 0; i <= 63; i++){
200003a8:	1dfb      	adds	r3, r7, #7
200003aa:	2200      	movs	r2, #0
200003ac:	701a      	strb	r2, [r3, #0]
200003ae:	e008      	b.n	200003c2 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200003b0:	2118      	movs	r1, #24
200003b2:	2000      	movs	r0, #0
200003b4:	f7ff ffc0 	bl	20000338 <graphic_write_data>
		for(i = 0; i <= 63; i++){
200003b8:	1dfb      	adds	r3, r7, #7
200003ba:	781a      	ldrb	r2, [r3, #0]
200003bc:	1dfb      	adds	r3, r7, #7
200003be:	3201      	adds	r2, #1
200003c0:	701a      	strb	r2, [r3, #0]
200003c2:	1dfb      	adds	r3, r7, #7
200003c4:	781b      	ldrb	r3, [r3, #0]
200003c6:	2b3f      	cmp	r3, #63	; 0x3f
200003c8:	d9f2      	bls.n	200003b0 <graphic_clear_screen+0x32>
	for(j = 0; j < 8; j++) {
200003ca:	1dbb      	adds	r3, r7, #6
200003cc:	781a      	ldrb	r2, [r3, #0]
200003ce:	1dbb      	adds	r3, r7, #6
200003d0:	3201      	adds	r2, #1
200003d2:	701a      	strb	r2, [r3, #0]
200003d4:	1dbb      	adds	r3, r7, #6
200003d6:	781b      	ldrb	r3, [r3, #0]
200003d8:	2b07      	cmp	r3, #7
200003da:	d9d7      	bls.n	2000038c <graphic_clear_screen+0xe>
		}
	}
}
200003dc:	46c0      	nop			; (mov r8, r8)
200003de:	46c0      	nop			; (mov r8, r8)
200003e0:	46bd      	mov	sp, r7
200003e2:	b002      	add	sp, #8
200003e4:	bd80      	pop	{r7, pc}

200003e6 <pixel>:

void pixel(int x, int y, int set) {
200003e6:	b5f0      	push	{r4, r5, r6, r7, lr}
200003e8:	b089      	sub	sp, #36	; 0x24
200003ea:	af00      	add	r7, sp, #0
200003ec:	60f8      	str	r0, [r7, #12]
200003ee:	60b9      	str	r1, [r7, #8]
200003f0:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200003f2:	68fb      	ldr	r3, [r7, #12]
200003f4:	2b00      	cmp	r3, #0
200003f6:	dc00      	bgt.n	200003fa <pixel+0x14>
200003f8:	e0b5      	b.n	20000566 <pixel+0x180>
200003fa:	68bb      	ldr	r3, [r7, #8]
200003fc:	2b00      	cmp	r3, #0
200003fe:	dc00      	bgt.n	20000402 <pixel+0x1c>
20000400:	e0b1      	b.n	20000566 <pixel+0x180>
20000402:	68fb      	ldr	r3, [r7, #12]
20000404:	2b80      	cmp	r3, #128	; 0x80
20000406:	dd00      	ble.n	2000040a <pixel+0x24>
20000408:	e0ad      	b.n	20000566 <pixel+0x180>
2000040a:	68bb      	ldr	r3, [r7, #8]
2000040c:	2b40      	cmp	r3, #64	; 0x40
2000040e:	dd00      	ble.n	20000412 <pixel+0x2c>
20000410:	e0a9      	b.n	20000566 <pixel+0x180>
	index = (y-1)/8;
20000412:	68bb      	ldr	r3, [r7, #8]
20000414:	3b01      	subs	r3, #1
20000416:	2b00      	cmp	r3, #0
20000418:	da00      	bge.n	2000041c <pixel+0x36>
2000041a:	3307      	adds	r3, #7
2000041c:	10db      	asrs	r3, r3, #3
2000041e:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20000420:	68bb      	ldr	r3, [r7, #8]
20000422:	3b01      	subs	r3, #1
20000424:	4a52      	ldr	r2, [pc, #328]	; (20000570 <pixel+0x18a>)
20000426:	4013      	ands	r3, r2
20000428:	d504      	bpl.n	20000434 <pixel+0x4e>
2000042a:	3b01      	subs	r3, #1
2000042c:	2208      	movs	r2, #8
2000042e:	4252      	negs	r2, r2
20000430:	4313      	orrs	r3, r2
20000432:	3301      	adds	r3, #1
20000434:	2b07      	cmp	r3, #7
20000436:	d82c      	bhi.n	20000492 <pixel+0xac>
20000438:	009a      	lsls	r2, r3, #2
2000043a:	4b4e      	ldr	r3, [pc, #312]	; (20000574 <pixel+0x18e>)
2000043c:	18d3      	adds	r3, r2, r3
2000043e:	681b      	ldr	r3, [r3, #0]
20000440:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000442:	231f      	movs	r3, #31
20000444:	18fb      	adds	r3, r7, r3
20000446:	2201      	movs	r2, #1
20000448:	701a      	strb	r2, [r3, #0]
2000044a:	e022      	b.n	20000492 <pixel+0xac>
		case 1: mask = 2; break;
2000044c:	231f      	movs	r3, #31
2000044e:	18fb      	adds	r3, r7, r3
20000450:	2202      	movs	r2, #2
20000452:	701a      	strb	r2, [r3, #0]
20000454:	e01d      	b.n	20000492 <pixel+0xac>
		case 2: mask = 4; break;
20000456:	231f      	movs	r3, #31
20000458:	18fb      	adds	r3, r7, r3
2000045a:	2204      	movs	r2, #4
2000045c:	701a      	strb	r2, [r3, #0]
2000045e:	e018      	b.n	20000492 <pixel+0xac>
		case 3: mask = 8; break;
20000460:	231f      	movs	r3, #31
20000462:	18fb      	adds	r3, r7, r3
20000464:	2208      	movs	r2, #8
20000466:	701a      	strb	r2, [r3, #0]
20000468:	e013      	b.n	20000492 <pixel+0xac>
		case 4: mask = 0x10; break;
2000046a:	231f      	movs	r3, #31
2000046c:	18fb      	adds	r3, r7, r3
2000046e:	2210      	movs	r2, #16
20000470:	701a      	strb	r2, [r3, #0]
20000472:	e00e      	b.n	20000492 <pixel+0xac>
		case 5: mask = 0x20; break;
20000474:	231f      	movs	r3, #31
20000476:	18fb      	adds	r3, r7, r3
20000478:	2220      	movs	r2, #32
2000047a:	701a      	strb	r2, [r3, #0]
2000047c:	e009      	b.n	20000492 <pixel+0xac>
		case 6: mask = 0x40; break;
2000047e:	231f      	movs	r3, #31
20000480:	18fb      	adds	r3, r7, r3
20000482:	2240      	movs	r2, #64	; 0x40
20000484:	701a      	strb	r2, [r3, #0]
20000486:	e004      	b.n	20000492 <pixel+0xac>
		case 7: mask = 0x80; break;
20000488:	231f      	movs	r3, #31
2000048a:	18fb      	adds	r3, r7, r3
2000048c:	2280      	movs	r2, #128	; 0x80
2000048e:	701a      	strb	r2, [r3, #0]
20000490:	46c0      	nop			; (mov r8, r8)
	}
		if(set == 0)
20000492:	687b      	ldr	r3, [r7, #4]
20000494:	2b00      	cmp	r3, #0
20000496:	d105      	bne.n	200004a4 <pixel+0xbe>
			mask = ~mask;
20000498:	221f      	movs	r2, #31
2000049a:	18bb      	adds	r3, r7, r2
2000049c:	18ba      	adds	r2, r7, r2
2000049e:	7812      	ldrb	r2, [r2, #0]
200004a0:	43d2      	mvns	r2, r2
200004a2:	701a      	strb	r2, [r3, #0]
		if(x > 64){
200004a4:	68fb      	ldr	r3, [r7, #12]
200004a6:	2b40      	cmp	r3, #64	; 0x40
200004a8:	dd07      	ble.n	200004ba <pixel+0xd4>
			controller = B_CS2;
200004aa:	231e      	movs	r3, #30
200004ac:	18fb      	adds	r3, r7, r3
200004ae:	2210      	movs	r2, #16
200004b0:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200004b2:	68fb      	ldr	r3, [r7, #12]
200004b4:	3b41      	subs	r3, #65	; 0x41
200004b6:	60fb      	str	r3, [r7, #12]
200004b8:	e006      	b.n	200004c8 <pixel+0xe2>
		} 
		else {
		controller = B_CS1;
200004ba:	231e      	movs	r3, #30
200004bc:	18fb      	adds	r3, r7, r3
200004be:	2208      	movs	r2, #8
200004c0:	701a      	strb	r2, [r3, #0]
		x = x-1;
200004c2:	68fb      	ldr	r3, [r7, #12]
200004c4:	3b01      	subs	r3, #1
200004c6:	60fb      	str	r3, [r7, #12]
		}
		graphic_write_command(LCD_SET_ADD | x, controller );
200004c8:	68fb      	ldr	r3, [r7, #12]
200004ca:	b25b      	sxtb	r3, r3
200004cc:	2240      	movs	r2, #64	; 0x40
200004ce:	4313      	orrs	r3, r2
200004d0:	b25b      	sxtb	r3, r3
200004d2:	b2da      	uxtb	r2, r3
200004d4:	251e      	movs	r5, #30
200004d6:	197b      	adds	r3, r7, r5
200004d8:	781b      	ldrb	r3, [r3, #0]
200004da:	0019      	movs	r1, r3
200004dc:	0010      	movs	r0, r2
200004de:	f7ff ff0b 	bl	200002f8 <graphic_write_command>
		graphic_write_command(LCD_SET_PAGE | index, controller );
200004e2:	69bb      	ldr	r3, [r7, #24]
200004e4:	b25b      	sxtb	r3, r3
200004e6:	2248      	movs	r2, #72	; 0x48
200004e8:	4252      	negs	r2, r2
200004ea:	4313      	orrs	r3, r2
200004ec:	b25b      	sxtb	r3, r3
200004ee:	b2da      	uxtb	r2, r3
200004f0:	197b      	adds	r3, r7, r5
200004f2:	781b      	ldrb	r3, [r3, #0]
200004f4:	0019      	movs	r1, r3
200004f6:	0010      	movs	r0, r2
200004f8:	f7ff fefe 	bl	200002f8 <graphic_write_command>
		c = graphic_read_data(controller);
200004fc:	2617      	movs	r6, #23
200004fe:	19bc      	adds	r4, r7, r6
20000500:	197b      	adds	r3, r7, r5
20000502:	781b      	ldrb	r3, [r3, #0]
20000504:	0018      	movs	r0, r3
20000506:	f7ff feab 	bl	20000260 <graphic_read_data>
2000050a:	0003      	movs	r3, r0
2000050c:	7023      	strb	r3, [r4, #0]
		graphic_write_command(LCD_SET_ADD | x, controller);
2000050e:	68fb      	ldr	r3, [r7, #12]
20000510:	b25b      	sxtb	r3, r3
20000512:	2240      	movs	r2, #64	; 0x40
20000514:	4313      	orrs	r3, r2
20000516:	b25b      	sxtb	r3, r3
20000518:	b2da      	uxtb	r2, r3
2000051a:	197b      	adds	r3, r7, r5
2000051c:	781b      	ldrb	r3, [r3, #0]
2000051e:	0019      	movs	r1, r3
20000520:	0010      	movs	r0, r2
20000522:	f7ff fee9 	bl	200002f8 <graphic_write_command>
		if(set)
20000526:	687b      	ldr	r3, [r7, #4]
20000528:	2b00      	cmp	r3, #0
2000052a:	d008      	beq.n	2000053e <pixel+0x158>
			mask = mask | c;
2000052c:	221f      	movs	r2, #31
2000052e:	18bb      	adds	r3, r7, r2
20000530:	18b9      	adds	r1, r7, r2
20000532:	19ba      	adds	r2, r7, r6
20000534:	7809      	ldrb	r1, [r1, #0]
20000536:	7812      	ldrb	r2, [r2, #0]
20000538:	430a      	orrs	r2, r1
2000053a:	701a      	strb	r2, [r3, #0]
2000053c:	e008      	b.n	20000550 <pixel+0x16a>
		else
			mask = mask & c;
2000053e:	221f      	movs	r2, #31
20000540:	18bb      	adds	r3, r7, r2
20000542:	18ba      	adds	r2, r7, r2
20000544:	2117      	movs	r1, #23
20000546:	1879      	adds	r1, r7, r1
20000548:	7812      	ldrb	r2, [r2, #0]
2000054a:	7809      	ldrb	r1, [r1, #0]
2000054c:	400a      	ands	r2, r1
2000054e:	701a      	strb	r2, [r3, #0]
		graphic_write_data(mask, controller);
20000550:	231e      	movs	r3, #30
20000552:	18fb      	adds	r3, r7, r3
20000554:	781a      	ldrb	r2, [r3, #0]
20000556:	231f      	movs	r3, #31
20000558:	18fb      	adds	r3, r7, r3
2000055a:	781b      	ldrb	r3, [r3, #0]
2000055c:	0011      	movs	r1, r2
2000055e:	0018      	movs	r0, r3
20000560:	f7ff feea 	bl	20000338 <graphic_write_data>
20000564:	e000      	b.n	20000568 <pixel+0x182>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000566:	46c0      	nop			; (mov r8, r8)
}
20000568:	46bd      	mov	sp, r7
2000056a:	b009      	add	sp, #36	; 0x24
2000056c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2000056e:	46c0      	nop			; (mov r8, r8)
20000570:	80000007 	andhi	r0, r0, r7
20000574:	20001190 	mulcs	r0, r0, r1

20000578 <check_ball_collision>:

// Game object funcions.
void check_ball_collision(POBJECT O){ //Check if the ball hits anything.
20000578:	b590      	push	{r4, r7, lr}
2000057a:	b083      	sub	sp, #12
2000057c:	af00      	add	r7, sp, #0
2000057e:	6078      	str	r0, [r7, #4]
	// Check if hits left side. if it does P2 get point.
	if(O->posx < 1){
20000580:	687b      	ldr	r3, [r7, #4]
20000582:	68db      	ldr	r3, [r3, #12]
20000584:	2b00      	cmp	r3, #0
20000586:	dc22      	bgt.n	200005ce <check_ball_collision+0x56>
		Player2.points = Player2.points + 1;
20000588:	4b66      	ldr	r3, [pc, #408]	; (20000724 <check_ball_collision+0x1ac>)
2000058a:	685b      	ldr	r3, [r3, #4]
2000058c:	1c5a      	adds	r2, r3, #1
2000058e:	4b65      	ldr	r3, [pc, #404]	; (20000724 <check_ball_collision+0x1ac>)
20000590:	605a      	str	r2, [r3, #4]
		ascii_clear_dsplay();
20000592:	f000 fbcf 	bl	20000d34 <ascii_clear_dsplay>
		print_to_ascii(Player1.PAscii, ('0' + Player1.points), 1);
20000596:	4b64      	ldr	r3, [pc, #400]	; (20000728 <check_ball_collision+0x1b0>)
20000598:	685b      	ldr	r3, [r3, #4]
2000059a:	3330      	adds	r3, #48	; 0x30
2000059c:	0019      	movs	r1, r3
2000059e:	4b63      	ldr	r3, [pc, #396]	; (2000072c <check_ball_collision+0x1b4>)
200005a0:	2201      	movs	r2, #1
200005a2:	0018      	movs	r0, r3
200005a4:	f000 fbce 	bl	20000d44 <print_to_ascii>
		print_to_ascii(Player2.PAscii, ('0' + Player2.points), 2);
200005a8:	4b5e      	ldr	r3, [pc, #376]	; (20000724 <check_ball_collision+0x1ac>)
200005aa:	685b      	ldr	r3, [r3, #4]
200005ac:	3330      	adds	r3, #48	; 0x30
200005ae:	0019      	movs	r1, r3
200005b0:	4b5f      	ldr	r3, [pc, #380]	; (20000730 <check_ball_collision+0x1b8>)
200005b2:	2202      	movs	r2, #2
200005b4:	0018      	movs	r0, r3
200005b6:	f000 fbc5 	bl	20000d44 <print_to_ascii>
		O->set_pos(O,LCD_WIDTH/2,LCD_HEIGHT/2);
200005ba:	687b      	ldr	r3, [r7, #4]
200005bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200005be:	6878      	ldr	r0, [r7, #4]
200005c0:	2220      	movs	r2, #32
200005c2:	2140      	movs	r1, #64	; 0x40
200005c4:	4798      	blx	r3
		delay_milli(200);
200005c6:	20c8      	movs	r0, #200	; 0xc8
200005c8:	f000 f9cc 	bl	20000964 <delay_milli>
	//If the ball hits player1's paddle, change direction.
	else if(O->posx >= Player2.objct->posx - 6 && Player2.objct->posy -2 <= O->posy && O->posy <= Player2.objct->posy + Player2.objct->geo->sizeY +1 && O->posx < Player2.objct->posx + 4 ){
		O->dirx = -(O->dirx);
		O->set_pos(O, Player2.objct->posx - 5, O->posy);
	}
}
200005cc:	e0a5      	b.n	2000071a <check_ball_collision+0x1a2>
	else if(O->posx > LCD_WIDTH){
200005ce:	687b      	ldr	r3, [r7, #4]
200005d0:	68db      	ldr	r3, [r3, #12]
200005d2:	2b80      	cmp	r3, #128	; 0x80
200005d4:	dd22      	ble.n	2000061c <check_ball_collision+0xa4>
		Player1.points = Player1.points + 1;
200005d6:	4b54      	ldr	r3, [pc, #336]	; (20000728 <check_ball_collision+0x1b0>)
200005d8:	685b      	ldr	r3, [r3, #4]
200005da:	1c5a      	adds	r2, r3, #1
200005dc:	4b52      	ldr	r3, [pc, #328]	; (20000728 <check_ball_collision+0x1b0>)
200005de:	605a      	str	r2, [r3, #4]
		ascii_clear_dsplay();
200005e0:	f000 fba8 	bl	20000d34 <ascii_clear_dsplay>
		print_to_ascii(Player1.PAscii, ('0' + Player1.points), 1);
200005e4:	4b50      	ldr	r3, [pc, #320]	; (20000728 <check_ball_collision+0x1b0>)
200005e6:	685b      	ldr	r3, [r3, #4]
200005e8:	3330      	adds	r3, #48	; 0x30
200005ea:	0019      	movs	r1, r3
200005ec:	4b4f      	ldr	r3, [pc, #316]	; (2000072c <check_ball_collision+0x1b4>)
200005ee:	2201      	movs	r2, #1
200005f0:	0018      	movs	r0, r3
200005f2:	f000 fba7 	bl	20000d44 <print_to_ascii>
		print_to_ascii(Player2.PAscii, ('0' + Player2.points), 2);
200005f6:	4b4b      	ldr	r3, [pc, #300]	; (20000724 <check_ball_collision+0x1ac>)
200005f8:	685b      	ldr	r3, [r3, #4]
200005fa:	3330      	adds	r3, #48	; 0x30
200005fc:	0019      	movs	r1, r3
200005fe:	4b4c      	ldr	r3, [pc, #304]	; (20000730 <check_ball_collision+0x1b8>)
20000600:	2202      	movs	r2, #2
20000602:	0018      	movs	r0, r3
20000604:	f000 fb9e 	bl	20000d44 <print_to_ascii>
		O->set_pos(O,LCD_WIDTH/2,LCD_HEIGHT/2);
20000608:	687b      	ldr	r3, [r7, #4]
2000060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
2000060c:	6878      	ldr	r0, [r7, #4]
2000060e:	2220      	movs	r2, #32
20000610:	2140      	movs	r1, #64	; 0x40
20000612:	4798      	blx	r3
		delay_milli(200);
20000614:	20c8      	movs	r0, #200	; 0xc8
20000616:	f000 f9a5 	bl	20000964 <delay_milli>
}
2000061a:	e07e      	b.n	2000071a <check_ball_collision+0x1a2>
	else if(O->posy < 3 || O->posy >= LCD_HEIGHT - O->geo->sizeY){
2000061c:	687b      	ldr	r3, [r7, #4]
2000061e:	691b      	ldr	r3, [r3, #16]
20000620:	2b02      	cmp	r3, #2
20000622:	dd08      	ble.n	20000636 <check_ball_collision+0xbe>
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	691a      	ldr	r2, [r3, #16]
20000628:	687b      	ldr	r3, [r7, #4]
2000062a:	681b      	ldr	r3, [r3, #0]
2000062c:	689b      	ldr	r3, [r3, #8]
2000062e:	2140      	movs	r1, #64	; 0x40
20000630:	1acb      	subs	r3, r1, r3
20000632:	429a      	cmp	r2, r3
20000634:	db05      	blt.n	20000642 <check_ball_collision+0xca>
		O->diry = -(O->diry);
20000636:	687b      	ldr	r3, [r7, #4]
20000638:	689b      	ldr	r3, [r3, #8]
2000063a:	425a      	negs	r2, r3
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	609a      	str	r2, [r3, #8]
20000640:	e06b      	b.n	2000071a <check_ball_collision+0x1a2>
	else if(O->posx <= Player1.objct->posx + 6 && Player1.objct->posy -2 <= O->posy && O->posy <= Player1.objct->posy + Player1.objct->geo->sizeY +1 && O->posx > Player1.objct->posx - 4 ){
20000642:	687b      	ldr	r3, [r7, #4]
20000644:	68da      	ldr	r2, [r3, #12]
20000646:	4b38      	ldr	r3, [pc, #224]	; (20000728 <check_ball_collision+0x1b0>)
20000648:	681b      	ldr	r3, [r3, #0]
2000064a:	68db      	ldr	r3, [r3, #12]
2000064c:	3306      	adds	r3, #6
2000064e:	429a      	cmp	r2, r3
20000650:	dc2d      	bgt.n	200006ae <check_ball_collision+0x136>
20000652:	4b35      	ldr	r3, [pc, #212]	; (20000728 <check_ball_collision+0x1b0>)
20000654:	681b      	ldr	r3, [r3, #0]
20000656:	691b      	ldr	r3, [r3, #16]
20000658:	1e9a      	subs	r2, r3, #2
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	691b      	ldr	r3, [r3, #16]
2000065e:	429a      	cmp	r2, r3
20000660:	dc25      	bgt.n	200006ae <check_ball_collision+0x136>
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	691a      	ldr	r2, [r3, #16]
20000666:	4b30      	ldr	r3, [pc, #192]	; (20000728 <check_ball_collision+0x1b0>)
20000668:	681b      	ldr	r3, [r3, #0]
2000066a:	6919      	ldr	r1, [r3, #16]
2000066c:	4b2e      	ldr	r3, [pc, #184]	; (20000728 <check_ball_collision+0x1b0>)
2000066e:	681b      	ldr	r3, [r3, #0]
20000670:	681b      	ldr	r3, [r3, #0]
20000672:	689b      	ldr	r3, [r3, #8]
20000674:	18cb      	adds	r3, r1, r3
20000676:	3301      	adds	r3, #1
20000678:	429a      	cmp	r2, r3
2000067a:	dc18      	bgt.n	200006ae <check_ball_collision+0x136>
2000067c:	4b2a      	ldr	r3, [pc, #168]	; (20000728 <check_ball_collision+0x1b0>)
2000067e:	681b      	ldr	r3, [r3, #0]
20000680:	68db      	ldr	r3, [r3, #12]
20000682:	1eda      	subs	r2, r3, #3
20000684:	687b      	ldr	r3, [r7, #4]
20000686:	68db      	ldr	r3, [r3, #12]
20000688:	429a      	cmp	r2, r3
2000068a:	dc10      	bgt.n	200006ae <check_ball_collision+0x136>
		O->dirx = -(O->dirx);
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	685b      	ldr	r3, [r3, #4]
20000690:	425a      	negs	r2, r3
20000692:	687b      	ldr	r3, [r7, #4]
20000694:	605a      	str	r2, [r3, #4]
		O->set_pos(O, Player1.objct->posx + 5, O->posy);
20000696:	687b      	ldr	r3, [r7, #4]
20000698:	6a5c      	ldr	r4, [r3, #36]	; 0x24
2000069a:	4b23      	ldr	r3, [pc, #140]	; (20000728 <check_ball_collision+0x1b0>)
2000069c:	681b      	ldr	r3, [r3, #0]
2000069e:	68db      	ldr	r3, [r3, #12]
200006a0:	1d59      	adds	r1, r3, #5
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	691a      	ldr	r2, [r3, #16]
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	0018      	movs	r0, r3
200006aa:	47a0      	blx	r4
200006ac:	e035      	b.n	2000071a <check_ball_collision+0x1a2>
	else if(O->posx >= Player2.objct->posx - 6 && Player2.objct->posy -2 <= O->posy && O->posy <= Player2.objct->posy + Player2.objct->geo->sizeY +1 && O->posx < Player2.objct->posx + 4 ){
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	68da      	ldr	r2, [r3, #12]
200006b2:	4b1c      	ldr	r3, [pc, #112]	; (20000724 <check_ball_collision+0x1ac>)
200006b4:	681b      	ldr	r3, [r3, #0]
200006b6:	68db      	ldr	r3, [r3, #12]
200006b8:	3b06      	subs	r3, #6
200006ba:	429a      	cmp	r2, r3
200006bc:	db2d      	blt.n	2000071a <check_ball_collision+0x1a2>
200006be:	4b19      	ldr	r3, [pc, #100]	; (20000724 <check_ball_collision+0x1ac>)
200006c0:	681b      	ldr	r3, [r3, #0]
200006c2:	691b      	ldr	r3, [r3, #16]
200006c4:	1e9a      	subs	r2, r3, #2
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	691b      	ldr	r3, [r3, #16]
200006ca:	429a      	cmp	r2, r3
200006cc:	dc25      	bgt.n	2000071a <check_ball_collision+0x1a2>
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	691a      	ldr	r2, [r3, #16]
200006d2:	4b14      	ldr	r3, [pc, #80]	; (20000724 <check_ball_collision+0x1ac>)
200006d4:	681b      	ldr	r3, [r3, #0]
200006d6:	6919      	ldr	r1, [r3, #16]
200006d8:	4b12      	ldr	r3, [pc, #72]	; (20000724 <check_ball_collision+0x1ac>)
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	689b      	ldr	r3, [r3, #8]
200006e0:	18cb      	adds	r3, r1, r3
200006e2:	3301      	adds	r3, #1
200006e4:	429a      	cmp	r2, r3
200006e6:	dc18      	bgt.n	2000071a <check_ball_collision+0x1a2>
200006e8:	4b0e      	ldr	r3, [pc, #56]	; (20000724 <check_ball_collision+0x1ac>)
200006ea:	681b      	ldr	r3, [r3, #0]
200006ec:	68db      	ldr	r3, [r3, #12]
200006ee:	1cda      	adds	r2, r3, #3
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	68db      	ldr	r3, [r3, #12]
200006f4:	429a      	cmp	r2, r3
200006f6:	db10      	blt.n	2000071a <check_ball_collision+0x1a2>
		O->dirx = -(O->dirx);
200006f8:	687b      	ldr	r3, [r7, #4]
200006fa:	685b      	ldr	r3, [r3, #4]
200006fc:	425a      	negs	r2, r3
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	605a      	str	r2, [r3, #4]
		O->set_pos(O, Player2.objct->posx - 5, O->posy);
20000702:	687b      	ldr	r3, [r7, #4]
20000704:	6a5c      	ldr	r4, [r3, #36]	; 0x24
20000706:	4b07      	ldr	r3, [pc, #28]	; (20000724 <check_ball_collision+0x1ac>)
20000708:	681b      	ldr	r3, [r3, #0]
2000070a:	68db      	ldr	r3, [r3, #12]
2000070c:	1f59      	subs	r1, r3, #5
2000070e:	687b      	ldr	r3, [r7, #4]
20000710:	691a      	ldr	r2, [r3, #16]
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	0018      	movs	r0, r3
20000716:	47a0      	blx	r4
}
20000718:	e7ff      	b.n	2000071a <check_ball_collision+0x1a2>
2000071a:	46c0      	nop			; (mov r8, r8)
2000071c:	46bd      	mov	sp, r7
2000071e:	b003      	add	sp, #12
20000720:	bd90      	pop	{r4, r7, pc}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	20001170 	andcs	r1, r0, r0, ror r1
20000728:	20001150 	andcs	r1, r0, r0, asr r1
2000072c:	20001158 	andcs	r1, r0, r8, asr r1
20000730:	20001178 	andcs	r1, r0, r8, ror r1

20000734 <set_object_speed>:
void set_object_speed(POBJECT O, int speedx, int speedy){
20000734:	b580      	push	{r7, lr}
20000736:	b084      	sub	sp, #16
20000738:	af00      	add	r7, sp, #0
2000073a:	60f8      	str	r0, [r7, #12]
2000073c:	60b9      	str	r1, [r7, #8]
2000073e:	607a      	str	r2, [r7, #4]
	O->dirx = speedx;
20000740:	68fb      	ldr	r3, [r7, #12]
20000742:	68ba      	ldr	r2, [r7, #8]
20000744:	605a      	str	r2, [r3, #4]
	O->diry = speedy;
20000746:	68fb      	ldr	r3, [r7, #12]
20000748:	687a      	ldr	r2, [r7, #4]
2000074a:	609a      	str	r2, [r3, #8]
}
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	b004      	add	sp, #16
20000752:	bd80      	pop	{r7, pc}

20000754 <draw_object>:
void draw_object(POBJECT O){
20000754:	b580      	push	{r7, lr}
20000756:	b084      	sub	sp, #16
20000758:	af00      	add	r7, sp, #0
2000075a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS ;i++){
2000075c:	2300      	movs	r3, #0
2000075e:	60fb      	str	r3, [r7, #12]
20000760:	e01c      	b.n	2000079c <draw_object+0x48>
		pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 1);
20000762:	687b      	ldr	r3, [r7, #4]
20000764:	68da      	ldr	r2, [r3, #12]
20000766:	687b      	ldr	r3, [r7, #4]
20000768:	6819      	ldr	r1, [r3, #0]
2000076a:	68fb      	ldr	r3, [r7, #12]
2000076c:	3304      	adds	r3, #4
2000076e:	005b      	lsls	r3, r3, #1
20000770:	18cb      	adds	r3, r1, r3
20000772:	3304      	adds	r3, #4
20000774:	781b      	ldrb	r3, [r3, #0]
20000776:	18d0      	adds	r0, r2, r3
20000778:	687b      	ldr	r3, [r7, #4]
2000077a:	691a      	ldr	r2, [r3, #16]
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	6819      	ldr	r1, [r3, #0]
20000780:	68fb      	ldr	r3, [r7, #12]
20000782:	3304      	adds	r3, #4
20000784:	005b      	lsls	r3, r3, #1
20000786:	18cb      	adds	r3, r1, r3
20000788:	3305      	adds	r3, #5
2000078a:	781b      	ldrb	r3, [r3, #0]
2000078c:	18d3      	adds	r3, r2, r3
2000078e:	2201      	movs	r2, #1
20000790:	0019      	movs	r1, r3
20000792:	f7ff fe28 	bl	200003e6 <pixel>
	for(int i = 0; i < MAX_POINTS ;i++){
20000796:	68fb      	ldr	r3, [r7, #12]
20000798:	3301      	adds	r3, #1
2000079a:	60fb      	str	r3, [r7, #12]
2000079c:	68fb      	ldr	r3, [r7, #12]
2000079e:	2b0d      	cmp	r3, #13
200007a0:	dddf      	ble.n	20000762 <draw_object+0xe>
	}
}
200007a2:	46c0      	nop			; (mov r8, r8)
200007a4:	46c0      	nop			; (mov r8, r8)
200007a6:	46bd      	mov	sp, r7
200007a8:	b004      	add	sp, #16
200007aa:	bd80      	pop	{r7, pc}

200007ac <clear_object>:
void clear_object(POBJECT O){
200007ac:	b580      	push	{r7, lr}
200007ae:	b084      	sub	sp, #16
200007b0:	af00      	add	r7, sp, #0
200007b2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++){
200007b4:	2300      	movs	r3, #0
200007b6:	60fb      	str	r3, [r7, #12]
200007b8:	e01c      	b.n	200007f4 <clear_object+0x48>
		pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 0);
200007ba:	687b      	ldr	r3, [r7, #4]
200007bc:	68da      	ldr	r2, [r3, #12]
200007be:	687b      	ldr	r3, [r7, #4]
200007c0:	6819      	ldr	r1, [r3, #0]
200007c2:	68fb      	ldr	r3, [r7, #12]
200007c4:	3304      	adds	r3, #4
200007c6:	005b      	lsls	r3, r3, #1
200007c8:	18cb      	adds	r3, r1, r3
200007ca:	3304      	adds	r3, #4
200007cc:	781b      	ldrb	r3, [r3, #0]
200007ce:	18d0      	adds	r0, r2, r3
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	691a      	ldr	r2, [r3, #16]
200007d4:	687b      	ldr	r3, [r7, #4]
200007d6:	6819      	ldr	r1, [r3, #0]
200007d8:	68fb      	ldr	r3, [r7, #12]
200007da:	3304      	adds	r3, #4
200007dc:	005b      	lsls	r3, r3, #1
200007de:	18cb      	adds	r3, r1, r3
200007e0:	3305      	adds	r3, #5
200007e2:	781b      	ldrb	r3, [r3, #0]
200007e4:	18d3      	adds	r3, r2, r3
200007e6:	2200      	movs	r2, #0
200007e8:	0019      	movs	r1, r3
200007ea:	f7ff fdfc 	bl	200003e6 <pixel>
	for(int i = 0; i < MAX_POINTS; i++){
200007ee:	68fb      	ldr	r3, [r7, #12]
200007f0:	3301      	adds	r3, #1
200007f2:	60fb      	str	r3, [r7, #12]
200007f4:	68fb      	ldr	r3, [r7, #12]
200007f6:	2b0d      	cmp	r3, #13
200007f8:	dddf      	ble.n	200007ba <clear_object+0xe>
	}
}
200007fa:	46c0      	nop			; (mov r8, r8)
200007fc:	46c0      	nop			; (mov r8, r8)
200007fe:	46bd      	mov	sp, r7
20000800:	b004      	add	sp, #16
20000802:	bd80      	pop	{r7, pc}

20000804 <set_pos>:
void set_pos(POBJECT O, int x, int y){
20000804:	b580      	push	{r7, lr}
20000806:	b084      	sub	sp, #16
20000808:	af00      	add	r7, sp, #0
2000080a:	60f8      	str	r0, [r7, #12]
2000080c:	60b9      	str	r1, [r7, #8]
2000080e:	607a      	str	r2, [r7, #4]
	O->posx = x;
20000810:	68fb      	ldr	r3, [r7, #12]
20000812:	68ba      	ldr	r2, [r7, #8]
20000814:	60da      	str	r2, [r3, #12]
	O->posy = y;
20000816:	68fb      	ldr	r3, [r7, #12]
20000818:	687a      	ldr	r2, [r7, #4]
2000081a:	611a      	str	r2, [r3, #16]
}
2000081c:	46c0      	nop			; (mov r8, r8)
2000081e:	46bd      	mov	sp, r7
20000820:	b004      	add	sp, #16
20000822:	bd80      	pop	{r7, pc}

20000824 <move_ball>:
void move_ball(POBJECT O){
20000824:	b580      	push	{r7, lr}
20000826:	b082      	sub	sp, #8
20000828:	af00      	add	r7, sp, #0
2000082a:	6078      	str	r0, [r7, #4]
	clear_object(O);
2000082c:	687b      	ldr	r3, [r7, #4]
2000082e:	0018      	movs	r0, r3
20000830:	f7ff ffbc 	bl	200007ac <clear_object>
	O->check_ball_collision(O);
20000834:	687b      	ldr	r3, [r7, #4]
20000836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20000838:	687a      	ldr	r2, [r7, #4]
2000083a:	0010      	movs	r0, r2
2000083c:	4798      	blx	r3
	O->posx += O->dirx;
2000083e:	687b      	ldr	r3, [r7, #4]
20000840:	68da      	ldr	r2, [r3, #12]
20000842:	687b      	ldr	r3, [r7, #4]
20000844:	685b      	ldr	r3, [r3, #4]
20000846:	18d2      	adds	r2, r2, r3
20000848:	687b      	ldr	r3, [r7, #4]
2000084a:	60da      	str	r2, [r3, #12]
	O->posy += O->diry;
2000084c:	687b      	ldr	r3, [r7, #4]
2000084e:	691a      	ldr	r2, [r3, #16]
20000850:	687b      	ldr	r3, [r7, #4]
20000852:	689b      	ldr	r3, [r3, #8]
20000854:	18d2      	adds	r2, r2, r3
20000856:	687b      	ldr	r3, [r7, #4]
20000858:	611a      	str	r2, [r3, #16]
	draw_object(O);
2000085a:	687b      	ldr	r3, [r7, #4]
2000085c:	0018      	movs	r0, r3
2000085e:	f7ff ff79 	bl	20000754 <draw_object>
}
20000862:	46c0      	nop			; (mov r8, r8)
20000864:	46bd      	mov	sp, r7
20000866:	b002      	add	sp, #8
20000868:	bd80      	pop	{r7, pc}

2000086a <move_bouncer>:
void move_bouncer(POBJECT O){
2000086a:	b580      	push	{r7, lr}
2000086c:	b082      	sub	sp, #8
2000086e:	af00      	add	r7, sp, #0
20000870:	6078      	str	r0, [r7, #4]
	clear_object(O);
20000872:	687b      	ldr	r3, [r7, #4]
20000874:	0018      	movs	r0, r3
20000876:	f7ff ff99 	bl	200007ac <clear_object>
	// Check if at top or bottom of scren and if so change the Y-dirrection.
	if(O->posy > 3 && O->diry < 0){
2000087a:	687b      	ldr	r3, [r7, #4]
2000087c:	691b      	ldr	r3, [r3, #16]
2000087e:	2b03      	cmp	r3, #3
20000880:	dd0b      	ble.n	2000089a <move_bouncer+0x30>
20000882:	687b      	ldr	r3, [r7, #4]
20000884:	689b      	ldr	r3, [r3, #8]
20000886:	2b00      	cmp	r3, #0
20000888:	da07      	bge.n	2000089a <move_bouncer+0x30>
		O->posy += O->diry;
2000088a:	687b      	ldr	r3, [r7, #4]
2000088c:	691a      	ldr	r2, [r3, #16]
2000088e:	687b      	ldr	r3, [r7, #4]
20000890:	689b      	ldr	r3, [r3, #8]
20000892:	18d2      	adds	r2, r2, r3
20000894:	687b      	ldr	r3, [r7, #4]
20000896:	611a      	str	r2, [r3, #16]
20000898:	e013      	b.n	200008c2 <move_bouncer+0x58>
	}
	else if(O->posy < LCD_HEIGHT - O->geo->sizeY-2 && O->diry > 0){
2000089a:	687b      	ldr	r3, [r7, #4]
2000089c:	691a      	ldr	r2, [r3, #16]
2000089e:	687b      	ldr	r3, [r7, #4]
200008a0:	681b      	ldr	r3, [r3, #0]
200008a2:	689b      	ldr	r3, [r3, #8]
200008a4:	213e      	movs	r1, #62	; 0x3e
200008a6:	1acb      	subs	r3, r1, r3
200008a8:	429a      	cmp	r2, r3
200008aa:	da0a      	bge.n	200008c2 <move_bouncer+0x58>
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	689b      	ldr	r3, [r3, #8]
200008b0:	2b00      	cmp	r3, #0
200008b2:	dd06      	ble.n	200008c2 <move_bouncer+0x58>
		O->posy += O->diry;
200008b4:	687b      	ldr	r3, [r7, #4]
200008b6:	691a      	ldr	r2, [r3, #16]
200008b8:	687b      	ldr	r3, [r7, #4]
200008ba:	689b      	ldr	r3, [r3, #8]
200008bc:	18d2      	adds	r2, r2, r3
200008be:	687b      	ldr	r3, [r7, #4]
200008c0:	611a      	str	r2, [r3, #16]
	}
	//Move the bouncer to the new cordinates.
	
	//Set diry to zero so the bouncer stops.
	O->diry = 0;
200008c2:	687b      	ldr	r3, [r7, #4]
200008c4:	2200      	movs	r2, #0
200008c6:	609a      	str	r2, [r3, #8]
	draw_object(O);
200008c8:	687b      	ldr	r3, [r7, #4]
200008ca:	0018      	movs	r0, r3
200008cc:	f7ff ff42 	bl	20000754 <draw_object>
	
}
200008d0:	46c0      	nop			; (mov r8, r8)
200008d2:	46bd      	mov	sp, r7
200008d4:	b002      	add	sp, #8
200008d6:	bd80      	pop	{r7, pc}

200008d8 <delay_250ns>:

//Delay funktioner
void delay_250ns ( void ) {
200008d8:	b580      	push	{r7, lr}
200008da:	af00      	add	r7, sp, #0
		*STK_CTRL = 0x00;
200008dc:	4b0c      	ldr	r3, [pc, #48]	; (20000910 <delay_250ns+0x38>)
200008de:	2200      	movs	r2, #0
200008e0:	601a      	str	r2, [r3, #0]
		*STK_LOAD = ((168/4) - 1);
200008e2:	4b0c      	ldr	r3, [pc, #48]	; (20000914 <delay_250ns+0x3c>)
200008e4:	2229      	movs	r2, #41	; 0x29
200008e6:	601a      	str	r2, [r3, #0]
		*STK_VAL = 0;
200008e8:	4b0b      	ldr	r3, [pc, #44]	; (20000918 <delay_250ns+0x40>)
200008ea:	2200      	movs	r2, #0
200008ec:	601a      	str	r2, [r3, #0]
		*STK_CTRL = 5;
200008ee:	4b08      	ldr	r3, [pc, #32]	; (20000910 <delay_250ns+0x38>)
200008f0:	2205      	movs	r2, #5
200008f2:	601a      	str	r2, [r3, #0]
		while ((*STK_CTRL & 0x10000) == 0){}
200008f4:	46c0      	nop			; (mov r8, r8)
200008f6:	4b06      	ldr	r3, [pc, #24]	; (20000910 <delay_250ns+0x38>)
200008f8:	681a      	ldr	r2, [r3, #0]
200008fa:	2380      	movs	r3, #128	; 0x80
200008fc:	025b      	lsls	r3, r3, #9
200008fe:	4013      	ands	r3, r2
20000900:	d0f9      	beq.n	200008f6 <delay_250ns+0x1e>
		*STK_CTRL = 0;
20000902:	4b03      	ldr	r3, [pc, #12]	; (20000910 <delay_250ns+0x38>)
20000904:	2200      	movs	r2, #0
20000906:	601a      	str	r2, [r3, #0]
}
20000908:	46c0      	nop			; (mov r8, r8)
2000090a:	46bd      	mov	sp, r7
2000090c:	bd80      	pop	{r7, pc}
2000090e:	46c0      	nop			; (mov r8, r8)
20000910:	e000e010 	and	lr, r0, r0, lsl r0
20000914:	e000e014 	and	lr, r0, r4, lsl r0
20000918:	e000e018 	and	lr, r0, r8, lsl r0

2000091c <delay_500ns>:
void delay_500ns(void){
2000091c:	b580      	push	{r7, lr}
2000091e:	af00      	add	r7, sp, #0
	delay_250ns();
20000920:	f7ff ffda 	bl	200008d8 <delay_250ns>
	delay_250ns();
20000924:	f7ff ffd8 	bl	200008d8 <delay_250ns>
}
20000928:	46c0      	nop			; (mov r8, r8)
2000092a:	46bd      	mov	sp, r7
2000092c:	bd80      	pop	{r7, pc}

2000092e <delay_mikro>:
void delay_mikro (unsigned int us){
2000092e:	b580      	push	{r7, lr}
20000930:	b084      	sub	sp, #16
20000932:	af00      	add	r7, sp, #0
20000934:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < us; i++) {
20000936:	2300      	movs	r3, #0
20000938:	60fb      	str	r3, [r7, #12]
2000093a:	e00a      	b.n	20000952 <delay_mikro+0x24>
		delay_250ns();
2000093c:	f7ff ffcc 	bl	200008d8 <delay_250ns>
		delay_250ns();
20000940:	f7ff ffca 	bl	200008d8 <delay_250ns>
		delay_250ns();
20000944:	f7ff ffc8 	bl	200008d8 <delay_250ns>
		delay_250ns();
20000948:	f7ff ffc6 	bl	200008d8 <delay_250ns>
	for (int i = 0; i < us; i++) {
2000094c:	68fb      	ldr	r3, [r7, #12]
2000094e:	3301      	adds	r3, #1
20000950:	60fb      	str	r3, [r7, #12]
20000952:	68fb      	ldr	r3, [r7, #12]
20000954:	687a      	ldr	r2, [r7, #4]
20000956:	429a      	cmp	r2, r3
20000958:	d8f0      	bhi.n	2000093c <delay_mikro+0xe>
		}
}	
2000095a:	46c0      	nop			; (mov r8, r8)
2000095c:	46c0      	nop			; (mov r8, r8)
2000095e:	46bd      	mov	sp, r7
20000960:	b004      	add	sp, #16
20000962:	bd80      	pop	{r7, pc}

20000964 <delay_milli>:
void delay_milli (unsigned int ms){
20000964:	b580      	push	{r7, lr}
20000966:	b082      	sub	sp, #8
20000968:	af00      	add	r7, sp, #0
2000096a:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(1);
2000096c:	2001      	movs	r0, #1
2000096e:	f7ff ffde 	bl	2000092e <delay_mikro>
	#else
		delay_mikro(ms * 1000);
	#endif
}
20000972:	46c0      	nop			; (mov r8, r8)
20000974:	46bd      	mov	sp, r7
20000976:	b002      	add	sp, #8
20000978:	bd80      	pop	{r7, pc}

2000097a <keyb>:

//Keypad Funktioner
unsigned char keyb(void){
2000097a:	b580      	push	{r7, lr}
2000097c:	b082      	sub	sp, #8
2000097e:	af00      	add	r7, sp, #0
	int row, column;
	for (row = 1; row <= 4; row++){
20000980:	2301      	movs	r3, #1
20000982:	607b      	str	r3, [r7, #4]
20000984:	e019      	b.n	200009ba <keyb+0x40>
		ActivateRow(row);
20000986:	687b      	ldr	r3, [r7, #4]
20000988:	0018      	movs	r0, r3
2000098a:	f000 f823 	bl	200009d4 <ActivateRow>
		if (column = ReadColumn()){
2000098e:	f000 f84d 	bl	20000a2c <ReadColumn>
20000992:	0003      	movs	r3, r0
20000994:	603b      	str	r3, [r7, #0]
20000996:	683b      	ldr	r3, [r7, #0]
20000998:	2b00      	cmp	r3, #0
2000099a:	d00b      	beq.n	200009b4 <keyb+0x3a>
			ActivateRow(0);
2000099c:	2000      	movs	r0, #0
2000099e:	f000 f819 	bl	200009d4 <ActivateRow>
			return Key[4*(row-1) + (column-1)];
200009a2:	687b      	ldr	r3, [r7, #4]
200009a4:	3b01      	subs	r3, #1
200009a6:	009a      	lsls	r2, r3, #2
200009a8:	683b      	ldr	r3, [r7, #0]
200009aa:	3b01      	subs	r3, #1
200009ac:	18d3      	adds	r3, r2, r3
200009ae:	4a08      	ldr	r2, [pc, #32]	; (200009d0 <keyb+0x56>)
200009b0:	5cd3      	ldrb	r3, [r2, r3]
200009b2:	e009      	b.n	200009c8 <keyb+0x4e>
	for (row = 1; row <= 4; row++){
200009b4:	687b      	ldr	r3, [r7, #4]
200009b6:	3301      	adds	r3, #1
200009b8:	607b      	str	r3, [r7, #4]
200009ba:	687b      	ldr	r3, [r7, #4]
200009bc:	2b04      	cmp	r3, #4
200009be:	dde2      	ble.n	20000986 <keyb+0xc>
		}
	}
	ActivateRow(0);
200009c0:	2000      	movs	r0, #0
200009c2:	f000 f807 	bl	200009d4 <ActivateRow>
	return 0xFF;
200009c6:	23ff      	movs	r3, #255	; 0xff
}
200009c8:	0018      	movs	r0, r3
200009ca:	46bd      	mov	sp, r7
200009cc:	b002      	add	sp, #8
200009ce:	bd80      	pop	{r7, pc}
200009d0:	2000106c 	andcs	r1, r0, ip, rrx

200009d4 <ActivateRow>:
void ActivateRow(char row){
200009d4:	b580      	push	{r7, lr}
200009d6:	b082      	sub	sp, #8
200009d8:	af00      	add	r7, sp, #0
200009da:	0002      	movs	r2, r0
200009dc:	1dfb      	adds	r3, r7, #7
200009de:	701a      	strb	r2, [r3, #0]
	switch(row){
200009e0:	1dfb      	adds	r3, r7, #7
200009e2:	781b      	ldrb	r3, [r3, #0]
200009e4:	2b04      	cmp	r3, #4
200009e6:	d818      	bhi.n	20000a1a <ActivateRow+0x46>
200009e8:	009a      	lsls	r2, r3, #2
200009ea:	4b0e      	ldr	r3, [pc, #56]	; (20000a24 <ActivateRow+0x50>)
200009ec:	18d3      	adds	r3, r2, r3
200009ee:	681b      	ldr	r3, [r3, #0]
200009f0:	469f      	mov	pc, r3
		case 1: GPIO_D.odr_high = 0x10; break;
200009f2:	4b0d      	ldr	r3, [pc, #52]	; (20000a28 <ActivateRow+0x54>)
200009f4:	2210      	movs	r2, #16
200009f6:	755a      	strb	r2, [r3, #21]
200009f8:	e00f      	b.n	20000a1a <ActivateRow+0x46>
		case 2: GPIO_D.odr_high = 0x20; break;
200009fa:	4b0b      	ldr	r3, [pc, #44]	; (20000a28 <ActivateRow+0x54>)
200009fc:	2220      	movs	r2, #32
200009fe:	755a      	strb	r2, [r3, #21]
20000a00:	e00b      	b.n	20000a1a <ActivateRow+0x46>
		case 3: GPIO_D.odr_high = 0x40; break;
20000a02:	4b09      	ldr	r3, [pc, #36]	; (20000a28 <ActivateRow+0x54>)
20000a04:	2240      	movs	r2, #64	; 0x40
20000a06:	755a      	strb	r2, [r3, #21]
20000a08:	e007      	b.n	20000a1a <ActivateRow+0x46>
		case 4: GPIO_D.odr_high = 0x80; break;
20000a0a:	4b07      	ldr	r3, [pc, #28]	; (20000a28 <ActivateRow+0x54>)
20000a0c:	2280      	movs	r2, #128	; 0x80
20000a0e:	755a      	strb	r2, [r3, #21]
20000a10:	e003      	b.n	20000a1a <ActivateRow+0x46>
		case 0: GPIO_D.odr_high = 0x00; break;
20000a12:	4b05      	ldr	r3, [pc, #20]	; (20000a28 <ActivateRow+0x54>)
20000a14:	2200      	movs	r2, #0
20000a16:	755a      	strb	r2, [r3, #21]
20000a18:	46c0      	nop			; (mov r8, r8)
	}
}
20000a1a:	46c0      	nop			; (mov r8, r8)
20000a1c:	46bd      	mov	sp, r7
20000a1e:	b002      	add	sp, #8
20000a20:	bd80      	pop	{r7, pc}
20000a22:	46c0      	nop			; (mov r8, r8)
20000a24:	200011b0 			; <UNDEFINED> instruction: 0x200011b0
20000a28:	40020c00 	andmi	r0, r2, r0, lsl #24

20000a2c <ReadColumn>:
int ReadColumn (void){
20000a2c:	b580      	push	{r7, lr}
20000a2e:	b082      	sub	sp, #8
20000a30:	af00      	add	r7, sp, #0
	unsigned char c;
	c = GPIO_D.idr_high;
20000a32:	4a12      	ldr	r2, [pc, #72]	; (20000a7c <ReadColumn+0x50>)
20000a34:	1dfb      	adds	r3, r7, #7
20000a36:	7c52      	ldrb	r2, [r2, #17]
20000a38:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
20000a3a:	1dfb      	adds	r3, r7, #7
20000a3c:	781b      	ldrb	r3, [r3, #0]
20000a3e:	2208      	movs	r2, #8
20000a40:	4013      	ands	r3, r2
20000a42:	d001      	beq.n	20000a48 <ReadColumn+0x1c>
20000a44:	2304      	movs	r3, #4
20000a46:	e015      	b.n	20000a74 <ReadColumn+0x48>
	if(c & 0x4) return 3;
20000a48:	1dfb      	adds	r3, r7, #7
20000a4a:	781b      	ldrb	r3, [r3, #0]
20000a4c:	2204      	movs	r2, #4
20000a4e:	4013      	ands	r3, r2
20000a50:	d001      	beq.n	20000a56 <ReadColumn+0x2a>
20000a52:	2303      	movs	r3, #3
20000a54:	e00e      	b.n	20000a74 <ReadColumn+0x48>
	if(c & 0x2) return 2;
20000a56:	1dfb      	adds	r3, r7, #7
20000a58:	781b      	ldrb	r3, [r3, #0]
20000a5a:	2202      	movs	r2, #2
20000a5c:	4013      	ands	r3, r2
20000a5e:	d001      	beq.n	20000a64 <ReadColumn+0x38>
20000a60:	2302      	movs	r3, #2
20000a62:	e007      	b.n	20000a74 <ReadColumn+0x48>
	if(c & 0x1) return 1;
20000a64:	1dfb      	adds	r3, r7, #7
20000a66:	781b      	ldrb	r3, [r3, #0]
20000a68:	2201      	movs	r2, #1
20000a6a:	4013      	ands	r3, r2
20000a6c:	d001      	beq.n	20000a72 <ReadColumn+0x46>
20000a6e:	2301      	movs	r3, #1
20000a70:	e000      	b.n	20000a74 <ReadColumn+0x48>
	return 0;
20000a72:	2300      	movs	r3, #0
}
20000a74:	0018      	movs	r0, r3
20000a76:	46bd      	mov	sp, r7
20000a78:	b002      	add	sp, #8
20000a7a:	bd80      	pop	{r7, pc}
20000a7c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000a80 <out7seg>:
void out7seg(unsigned char c){
20000a80:	b580      	push	{r7, lr}
20000a82:	b082      	sub	sp, #8
20000a84:	af00      	add	r7, sp, #0
20000a86:	0002      	movs	r2, r0
20000a88:	1dfb      	adds	r3, r7, #7
20000a8a:	701a      	strb	r2, [r3, #0]
	if (c > 0xF){
20000a8c:	1dfb      	adds	r3, r7, #7
20000a8e:	781b      	ldrb	r3, [r3, #0]
20000a90:	2b0f      	cmp	r3, #15
20000a92:	d903      	bls.n	20000a9c <out7seg+0x1c>
		GPIO_D.odr_low = 0x00;
20000a94:	4b06      	ldr	r3, [pc, #24]	; (20000ab0 <out7seg+0x30>)
20000a96:	2200      	movs	r2, #0
20000a98:	751a      	strb	r2, [r3, #20]
	}
	else GPIO_D.odr_low = Segcodes[c];
	}
20000a9a:	e005      	b.n	20000aa8 <out7seg+0x28>
	else GPIO_D.odr_low = Segcodes[c];
20000a9c:	1dfb      	adds	r3, r7, #7
20000a9e:	781b      	ldrb	r3, [r3, #0]
20000aa0:	4903      	ldr	r1, [pc, #12]	; (20000ab0 <out7seg+0x30>)
20000aa2:	4a04      	ldr	r2, [pc, #16]	; (20000ab4 <out7seg+0x34>)
20000aa4:	5cd3      	ldrb	r3, [r2, r3]
20000aa6:	750b      	strb	r3, [r1, #20]
	}
20000aa8:	46c0      	nop			; (mov r8, r8)
20000aaa:	46bd      	mov	sp, r7
20000aac:	b002      	add	sp, #8
20000aae:	bd80      	pop	{r7, pc}
20000ab0:	40020c00 	andmi	r0, r2, r0, lsl #24
20000ab4:	2000105c 	andcs	r1, r0, ip, asr r0

20000ab8 <ascii_init>:

//ascii Funktioner
void ascii_init(void){
20000ab8:	b580      	push	{r7, lr}
20000aba:	af00      	add	r7, sp, #0
	while((ascii_read_status() & 0x80) == 0x80){}
20000abc:	46c0      	nop			; (mov r8, r8)
20000abe:	f000 f8f9 	bl	20000cb4 <ascii_read_status>
20000ac2:	0003      	movs	r3, r0
20000ac4:	001a      	movs	r2, r3
20000ac6:	2380      	movs	r3, #128	; 0x80
20000ac8:	4013      	ands	r3, r2
20000aca:	2b80      	cmp	r3, #128	; 0x80
20000acc:	d0f7      	beq.n	20000abe <ascii_init+0x6>
		delay_mikro(8);
20000ace:	2008      	movs	r0, #8
20000ad0:	f7ff ff2d 	bl	2000092e <delay_mikro>
		ascii_write_CMD(0x38);
20000ad4:	2038      	movs	r0, #56	; 0x38
20000ad6:	f000 f8a9 	bl	20000c2c <ascii_write_CMD>
		delay_mikro(39);
20000ada:	2027      	movs	r0, #39	; 0x27
20000adc:	f7ff ff27 	bl	2000092e <delay_mikro>
		ascii_write_CMD(0x0E);
20000ae0:	200e      	movs	r0, #14
20000ae2:	f000 f8a3 	bl	20000c2c <ascii_write_CMD>
		delay_mikro(39);
20000ae6:	2027      	movs	r0, #39	; 0x27
20000ae8:	f7ff ff21 	bl	2000092e <delay_mikro>
		ascii_write_CMD(0x06);
20000aec:	2006      	movs	r0, #6
20000aee:	f000 f89d 	bl	20000c2c <ascii_write_CMD>
		delay_mikro(39);
20000af2:	2027      	movs	r0, #39	; 0x27
20000af4:	f7ff ff1b 	bl	2000092e <delay_mikro>
}
20000af8:	46c0      	nop			; (mov r8, r8)
20000afa:	46bd      	mov	sp, r7
20000afc:	bd80      	pop	{r7, pc}

20000afe <ascii_gotoxy>:
void ascii_gotoxy(int x, int y){
20000afe:	b580      	push	{r7, lr}
20000b00:	b084      	sub	sp, #16
20000b02:	af00      	add	r7, sp, #0
20000b04:	6078      	str	r0, [r7, #4]
20000b06:	6039      	str	r1, [r7, #0]
	int address = x - 1;
20000b08:	687b      	ldr	r3, [r7, #4]
20000b0a:	3b01      	subs	r3, #1
20000b0c:	60fb      	str	r3, [r7, #12]
	if(y == 2){
20000b0e:	683b      	ldr	r3, [r7, #0]
20000b10:	2b02      	cmp	r3, #2
20000b12:	d102      	bne.n	20000b1a <ascii_gotoxy+0x1c>
		address = address + 0x40;
20000b14:	68fb      	ldr	r3, [r7, #12]
20000b16:	3340      	adds	r3, #64	; 0x40
20000b18:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_CMD(0x80 | address);
20000b1a:	68fb      	ldr	r3, [r7, #12]
20000b1c:	b25b      	sxtb	r3, r3
20000b1e:	2280      	movs	r2, #128	; 0x80
20000b20:	4252      	negs	r2, r2
20000b22:	4313      	orrs	r3, r2
20000b24:	b25b      	sxtb	r3, r3
20000b26:	b2db      	uxtb	r3, r3
20000b28:	0018      	movs	r0, r3
20000b2a:	f000 f87f 	bl	20000c2c <ascii_write_CMD>
}
20000b2e:	46c0      	nop			; (mov r8, r8)
20000b30:	46bd      	mov	sp, r7
20000b32:	b004      	add	sp, #16
20000b34:	bd80      	pop	{r7, pc}

20000b36 <ascii_write_char>:
void ascii_write_char(unsigned char c){
20000b36:	b580      	push	{r7, lr}
20000b38:	b082      	sub	sp, #8
20000b3a:	af00      	add	r7, sp, #0
20000b3c:	0002      	movs	r2, r0
20000b3e:	1dfb      	adds	r3, r7, #7
20000b40:	701a      	strb	r2, [r3, #0]
	while((ascii_read_status() & 0x80) == 0x80){}
20000b42:	46c0      	nop			; (mov r8, r8)
20000b44:	f000 f8b6 	bl	20000cb4 <ascii_read_status>
20000b48:	0003      	movs	r3, r0
20000b4a:	001a      	movs	r2, r3
20000b4c:	2380      	movs	r3, #128	; 0x80
20000b4e:	4013      	ands	r3, r2
20000b50:	2b80      	cmp	r3, #128	; 0x80
20000b52:	d0f7      	beq.n	20000b44 <ascii_write_char+0xe>
	delay_mikro(8);
20000b54:	2008      	movs	r0, #8
20000b56:	f7ff feea 	bl	2000092e <delay_mikro>
	ascii_write_data(c);
20000b5a:	1dfb      	adds	r3, r7, #7
20000b5c:	781b      	ldrb	r3, [r3, #0]
20000b5e:	0018      	movs	r0, r3
20000b60:	f000 f879 	bl	20000c56 <ascii_write_data>
	delay_mikro(43);
20000b64:	202b      	movs	r0, #43	; 0x2b
20000b66:	f7ff fee2 	bl	2000092e <delay_mikro>
}
20000b6a:	46c0      	nop			; (mov r8, r8)
20000b6c:	46bd      	mov	sp, r7
20000b6e:	b002      	add	sp, #8
20000b70:	bd80      	pop	{r7, pc}

20000b72 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set( unsigned char x ){ /* Funktion för att 1-ställa bitar */
20000b72:	b580      	push	{r7, lr}
20000b74:	b084      	sub	sp, #16
20000b76:	af00      	add	r7, sp, #0
20000b78:	0002      	movs	r2, r0
20000b7a:	1dfb      	adds	r3, r7, #7
20000b7c:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odr_low;
20000b7e:	4a0c      	ldr	r2, [pc, #48]	; (20000bb0 <ascii_ctrl_bit_set+0x3e>)
20000b80:	210f      	movs	r1, #15
20000b82:	187b      	adds	r3, r7, r1
20000b84:	7d12      	ldrb	r2, [r2, #20]
20000b86:	701a      	strb	r2, [r3, #0]
	c |= ( B_SELECT | x );
20000b88:	1dfa      	adds	r2, r7, #7
20000b8a:	187b      	adds	r3, r7, r1
20000b8c:	7812      	ldrb	r2, [r2, #0]
20000b8e:	781b      	ldrb	r3, [r3, #0]
20000b90:	4313      	orrs	r3, r2
20000b92:	b2da      	uxtb	r2, r3
20000b94:	0008      	movs	r0, r1
20000b96:	187b      	adds	r3, r7, r1
20000b98:	2104      	movs	r1, #4
20000b9a:	430a      	orrs	r2, r1
20000b9c:	701a      	strb	r2, [r3, #0]
	GPIO_E.odr_low = c;
20000b9e:	4a04      	ldr	r2, [pc, #16]	; (20000bb0 <ascii_ctrl_bit_set+0x3e>)
20000ba0:	183b      	adds	r3, r7, r0
20000ba2:	781b      	ldrb	r3, [r3, #0]
20000ba4:	7513      	strb	r3, [r2, #20]
}
20000ba6:	46c0      	nop			; (mov r8, r8)
20000ba8:	46bd      	mov	sp, r7
20000baa:	b004      	add	sp, #16
20000bac:	bd80      	pop	{r7, pc}
20000bae:	46c0      	nop			; (mov r8, r8)
20000bb0:	40021000 	andmi	r1, r2, r0

20000bb4 <ascii_ctrl_bit_clear>:
void ascii_ctrl_bit_clear( unsigned char x ){
20000bb4:	b580      	push	{r7, lr}
20000bb6:	b084      	sub	sp, #16
20000bb8:	af00      	add	r7, sp, #0
20000bba:	0002      	movs	r2, r0
20000bbc:	1dfb      	adds	r3, r7, #7
20000bbe:	701a      	strb	r2, [r3, #0]
	unsigned char c;
	c = GPIO_E.odr_low;
20000bc0:	4a0d      	ldr	r2, [pc, #52]	; (20000bf8 <ascii_ctrl_bit_clear+0x44>)
20000bc2:	210f      	movs	r1, #15
20000bc4:	187b      	adds	r3, r7, r1
20000bc6:	7d12      	ldrb	r2, [r2, #20]
20000bc8:	701a      	strb	r2, [r3, #0]
	c = B_SELECT | ( c & ~x );
20000bca:	1dfb      	adds	r3, r7, #7
20000bcc:	781b      	ldrb	r3, [r3, #0]
20000bce:	b25b      	sxtb	r3, r3
20000bd0:	43db      	mvns	r3, r3
20000bd2:	b25b      	sxtb	r3, r3
20000bd4:	187a      	adds	r2, r7, r1
20000bd6:	7812      	ldrb	r2, [r2, #0]
20000bd8:	b252      	sxtb	r2, r2
20000bda:	4013      	ands	r3, r2
20000bdc:	b25b      	sxtb	r3, r3
20000bde:	2204      	movs	r2, #4
20000be0:	4313      	orrs	r3, r2
20000be2:	b25a      	sxtb	r2, r3
20000be4:	187b      	adds	r3, r7, r1
20000be6:	701a      	strb	r2, [r3, #0]
	GPIO_E.odr_low = c;
20000be8:	4a03      	ldr	r2, [pc, #12]	; (20000bf8 <ascii_ctrl_bit_clear+0x44>)
20000bea:	187b      	adds	r3, r7, r1
20000bec:	781b      	ldrb	r3, [r3, #0]
20000bee:	7513      	strb	r3, [r2, #20]
} 
20000bf0:	46c0      	nop			; (mov r8, r8)
20000bf2:	46bd      	mov	sp, r7
20000bf4:	b004      	add	sp, #16
20000bf6:	bd80      	pop	{r7, pc}
20000bf8:	40021000 	andmi	r1, r2, r0

20000bfc <ascii_write_controller>:

void ascii_write_controller(unsigned char c){
20000bfc:	b580      	push	{r7, lr}
20000bfe:	b082      	sub	sp, #8
20000c00:	af00      	add	r7, sp, #0
20000c02:	0002      	movs	r2, r0
20000c04:	1dfb      	adds	r3, r7, #7
20000c06:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E);
20000c08:	2040      	movs	r0, #64	; 0x40
20000c0a:	f7ff ffb2 	bl	20000b72 <ascii_ctrl_bit_set>
	GPIO_E.odr_high = c;
20000c0e:	4a06      	ldr	r2, [pc, #24]	; (20000c28 <ascii_write_controller+0x2c>)
20000c10:	1dfb      	adds	r3, r7, #7
20000c12:	781b      	ldrb	r3, [r3, #0]
20000c14:	7553      	strb	r3, [r2, #21]
	delay_250ns();
20000c16:	f7ff fe5f 	bl	200008d8 <delay_250ns>
	ascii_ctrl_bit_clear(B_E);
20000c1a:	2040      	movs	r0, #64	; 0x40
20000c1c:	f7ff ffca 	bl	20000bb4 <ascii_ctrl_bit_clear>
}
20000c20:	46c0      	nop			; (mov r8, r8)
20000c22:	46bd      	mov	sp, r7
20000c24:	b002      	add	sp, #8
20000c26:	bd80      	pop	{r7, pc}
20000c28:	40021000 	andmi	r1, r2, r0

20000c2c <ascii_write_CMD>:
void ascii_write_CMD(unsigned char command){
20000c2c:	b580      	push	{r7, lr}
20000c2e:	b082      	sub	sp, #8
20000c30:	af00      	add	r7, sp, #0
20000c32:	0002      	movs	r2, r0
20000c34:	1dfb      	adds	r3, r7, #7
20000c36:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000c38:	2001      	movs	r0, #1
20000c3a:	f7ff ffbb 	bl	20000bb4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000c3e:	2002      	movs	r0, #2
20000c40:	f7ff ffb8 	bl	20000bb4 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000c44:	1dfb      	adds	r3, r7, #7
20000c46:	781b      	ldrb	r3, [r3, #0]
20000c48:	0018      	movs	r0, r3
20000c4a:	f7ff ffd7 	bl	20000bfc <ascii_write_controller>
}
20000c4e:	46c0      	nop			; (mov r8, r8)
20000c50:	46bd      	mov	sp, r7
20000c52:	b002      	add	sp, #8
20000c54:	bd80      	pop	{r7, pc}

20000c56 <ascii_write_data>:
void ascii_write_data(unsigned char data){
20000c56:	b580      	push	{r7, lr}
20000c58:	b082      	sub	sp, #8
20000c5a:	af00      	add	r7, sp, #0
20000c5c:	0002      	movs	r2, r0
20000c5e:	1dfb      	adds	r3, r7, #7
20000c60:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000c62:	2001      	movs	r0, #1
20000c64:	f7ff ff85 	bl	20000b72 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000c68:	2002      	movs	r0, #2
20000c6a:	f7ff ffa3 	bl	20000bb4 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000c6e:	1dfb      	adds	r3, r7, #7
20000c70:	781b      	ldrb	r3, [r3, #0]
20000c72:	0018      	movs	r0, r3
20000c74:	f7ff ffc2 	bl	20000bfc <ascii_write_controller>
}
20000c78:	46c0      	nop			; (mov r8, r8)
20000c7a:	46bd      	mov	sp, r7
20000c7c:	b002      	add	sp, #8
20000c7e:	bd80      	pop	{r7, pc}

20000c80 <ascii_read_controller>:
unsigned char ascii_read_controller(void){
20000c80:	b580      	push	{r7, lr}
20000c82:	b082      	sub	sp, #8
20000c84:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_set(B_E);
20000c86:	2040      	movs	r0, #64	; 0x40
20000c88:	f7ff ff73 	bl	20000b72 <ascii_ctrl_bit_set>
	delay_250ns();
20000c8c:	f7ff fe24 	bl	200008d8 <delay_250ns>
	delay_250ns();
20000c90:	f7ff fe22 	bl	200008d8 <delay_250ns>
	unsigned char r = GPIO_E.idr_high;
20000c94:	4a06      	ldr	r2, [pc, #24]	; (20000cb0 <ascii_read_controller+0x30>)
20000c96:	1dfb      	adds	r3, r7, #7
20000c98:	7c52      	ldrb	r2, [r2, #17]
20000c9a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_E);
20000c9c:	2040      	movs	r0, #64	; 0x40
20000c9e:	f7ff ff89 	bl	20000bb4 <ascii_ctrl_bit_clear>
	return r;
20000ca2:	1dfb      	adds	r3, r7, #7
20000ca4:	781b      	ldrb	r3, [r3, #0]
}
20000ca6:	0018      	movs	r0, r3
20000ca8:	46bd      	mov	sp, r7
20000caa:	b002      	add	sp, #8
20000cac:	bd80      	pop	{r7, pc}
20000cae:	46c0      	nop			; (mov r8, r8)
20000cb0:	40021000 	andmi	r1, r2, r0

20000cb4 <ascii_read_status>:
unsigned char ascii_read_status(void){
20000cb4:	b590      	push	{r4, r7, lr}
20000cb6:	b083      	sub	sp, #12
20000cb8:	af00      	add	r7, sp, #0
	GPIO_E.moder = 0x00005555;
20000cba:	4b0b      	ldr	r3, [pc, #44]	; (20000ce8 <ascii_read_status+0x34>)
20000cbc:	4a0b      	ldr	r2, [pc, #44]	; (20000cec <ascii_read_status+0x38>)
20000cbe:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000cc0:	2001      	movs	r0, #1
20000cc2:	f7ff ff77 	bl	20000bb4 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_set(B_RW);
20000cc6:	2002      	movs	r0, #2
20000cc8:	f7ff ff53 	bl	20000b72 <ascii_ctrl_bit_set>
	unsigned char r = ascii_read_controller();
20000ccc:	1dfc      	adds	r4, r7, #7
20000cce:	f7ff ffd7 	bl	20000c80 <ascii_read_controller>
20000cd2:	0003      	movs	r3, r0
20000cd4:	7023      	strb	r3, [r4, #0]
	GPIO_E.moder = 0x55555555;
20000cd6:	4b04      	ldr	r3, [pc, #16]	; (20000ce8 <ascii_read_status+0x34>)
20000cd8:	4a05      	ldr	r2, [pc, #20]	; (20000cf0 <ascii_read_status+0x3c>)
20000cda:	601a      	str	r2, [r3, #0]
	return r;
20000cdc:	1dfb      	adds	r3, r7, #7
20000cde:	781b      	ldrb	r3, [r3, #0]
}
20000ce0:	0018      	movs	r0, r3
20000ce2:	46bd      	mov	sp, r7
20000ce4:	b003      	add	sp, #12
20000ce6:	bd90      	pop	{r4, r7, pc}
20000ce8:	40021000 	andmi	r1, r2, r0
20000cec:	00005555 	andeq	r5, r0, r5, asr r5
20000cf0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000cf4 <ascii_read_data>:
unsigned char ascii_read_data(void){
20000cf4:	b580      	push	{r7, lr}
20000cf6:	b082      	sub	sp, #8
20000cf8:	af00      	add	r7, sp, #0
	unsigned char rv;
	GPIO_E.moder = 0x00005555;
20000cfa:	4b0a      	ldr	r3, [pc, #40]	; (20000d24 <ascii_read_data+0x30>)
20000cfc:	4a0a      	ldr	r2, [pc, #40]	; (20000d28 <ascii_read_data+0x34>)
20000cfe:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
20000d00:	2001      	movs	r0, #1
20000d02:	f7ff ff36 	bl	20000b72 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RW);
20000d06:	2002      	movs	r0, #2
20000d08:	f7ff ff33 	bl	20000b72 <ascii_ctrl_bit_set>
	rv = ascii_read_controller;
20000d0c:	4a07      	ldr	r2, [pc, #28]	; (20000d2c <ascii_read_data+0x38>)
20000d0e:	1dfb      	adds	r3, r7, #7
20000d10:	701a      	strb	r2, [r3, #0]
	GPIO_E.moder = 0x55555555;
20000d12:	4b04      	ldr	r3, [pc, #16]	; (20000d24 <ascii_read_data+0x30>)
20000d14:	4a06      	ldr	r2, [pc, #24]	; (20000d30 <ascii_read_data+0x3c>)
20000d16:	601a      	str	r2, [r3, #0]
	return rv;
20000d18:	1dfb      	adds	r3, r7, #7
20000d1a:	781b      	ldrb	r3, [r3, #0]
}
20000d1c:	0018      	movs	r0, r3
20000d1e:	46bd      	mov	sp, r7
20000d20:	b002      	add	sp, #8
20000d22:	bd80      	pop	{r7, pc}
20000d24:	40021000 	andmi	r1, r2, r0
20000d28:	00005555 	andeq	r5, r0, r5, asr r5
20000d2c:	20000c81 	andcs	r0, r0, r1, lsl #25
20000d30:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000d34 <ascii_clear_dsplay>:
void ascii_clear_dsplay(void){
20000d34:	b580      	push	{r7, lr}
20000d36:	af00      	add	r7, sp, #0
	ascii_write_CMD(1);
20000d38:	2001      	movs	r0, #1
20000d3a:	f7ff ff77 	bl	20000c2c <ascii_write_CMD>
}
20000d3e:	46c0      	nop			; (mov r8, r8)
20000d40:	46bd      	mov	sp, r7
20000d42:	bd80      	pop	{r7, pc}

20000d44 <print_to_ascii>:
//skriver ut det som finns i PAscii till AsciiDisplayen.
void print_to_ascii(char line[], signed char x, char i){		
20000d44:	b580      	push	{r7, lr}
20000d46:	b082      	sub	sp, #8
20000d48:	af00      	add	r7, sp, #0
20000d4a:	6078      	str	r0, [r7, #4]
20000d4c:	0008      	movs	r0, r1
20000d4e:	0011      	movs	r1, r2
20000d50:	1cfb      	adds	r3, r7, #3
20000d52:	1c02      	adds	r2, r0, #0
20000d54:	701a      	strb	r2, [r3, #0]
20000d56:	1cbb      	adds	r3, r7, #2
20000d58:	1c0a      	adds	r2, r1, #0
20000d5a:	701a      	strb	r2, [r3, #0]
		ascii_gotoxy(1,i);
20000d5c:	1cbb      	adds	r3, r7, #2
20000d5e:	781b      	ldrb	r3, [r3, #0]
20000d60:	0019      	movs	r1, r3
20000d62:	2001      	movs	r0, #1
20000d64:	f7ff fecb 	bl	20000afe <ascii_gotoxy>
		while(*line)
20000d68:	e006      	b.n	20000d78 <print_to_ascii+0x34>
			ascii_write_char(*line++);
20000d6a:	687b      	ldr	r3, [r7, #4]
20000d6c:	1c5a      	adds	r2, r3, #1
20000d6e:	607a      	str	r2, [r7, #4]
20000d70:	781b      	ldrb	r3, [r3, #0]
20000d72:	0018      	movs	r0, r3
20000d74:	f7ff fedf 	bl	20000b36 <ascii_write_char>
		while(*line)
20000d78:	687b      	ldr	r3, [r7, #4]
20000d7a:	781b      	ldrb	r3, [r3, #0]
20000d7c:	2b00      	cmp	r3, #0
20000d7e:	d1f4      	bne.n	20000d6a <print_to_ascii+0x26>
		if(x >= 0){ //If X is negative, don't print the players point.
20000d80:	1cfb      	adds	r3, r7, #3
20000d82:	781b      	ldrb	r3, [r3, #0]
20000d84:	2b7f      	cmp	r3, #127	; 0x7f
20000d86:	d804      	bhi.n	20000d92 <print_to_ascii+0x4e>
			ascii_write_char(x);
20000d88:	1cfb      	adds	r3, r7, #3
20000d8a:	781b      	ldrb	r3, [r3, #0]
20000d8c:	0018      	movs	r0, r3
20000d8e:	f7ff fed2 	bl	20000b36 <ascii_write_char>
		}

}
20000d92:	46c0      	nop			; (mov r8, r8)
20000d94:	46bd      	mov	sp, r7
20000d96:	b002      	add	sp, #8
20000d98:	bd80      	pop	{r7, pc}

20000d9a <init_app>:

//Sets values to their initiall value.
void init_app(void){ 
20000d9a:	b580      	push	{r7, lr}
20000d9c:	af00      	add	r7, sp, #0
	//	*((unsigned long*)0x40023830) = 0x18;
	//	__asm volatile( "LDR R0, =0x8000209\n BLX R0\n");
	//#endif
	
	
	GPIO_E.moder = 0x55555555;
20000d9e:	4b08      	ldr	r3, [pc, #32]	; (20000dc0 <init_app+0x26>)
20000da0:	4a08      	ldr	r2, [pc, #32]	; (20000dc4 <init_app+0x2a>)
20000da2:	601a      	str	r2, [r3, #0]
	GPIO_D.moder = 0x55005555;
20000da4:	4b08      	ldr	r3, [pc, #32]	; (20000dc8 <init_app+0x2e>)
20000da6:	4a09      	ldr	r2, [pc, #36]	; (20000dcc <init_app+0x32>)
20000da8:	601a      	str	r2, [r3, #0]
	GPIO_D.otyper = 0x0F00;
20000daa:	4b07      	ldr	r3, [pc, #28]	; (20000dc8 <init_app+0x2e>)
20000dac:	22f0      	movs	r2, #240	; 0xf0
20000dae:	0112      	lsls	r2, r2, #4
20000db0:	809a      	strh	r2, [r3, #4]
	GPIO_D.pupdr = 0xAAAA0000;
20000db2:	4b05      	ldr	r3, [pc, #20]	; (20000dc8 <init_app+0x2e>)
20000db4:	4a06      	ldr	r2, [pc, #24]	; (20000dd0 <init_app+0x36>)
20000db6:	60da      	str	r2, [r3, #12]
}	
20000db8:	46c0      	nop			; (mov r8, r8)
20000dba:	46bd      	mov	sp, r7
20000dbc:	bd80      	pop	{r7, pc}
20000dbe:	46c0      	nop			; (mov r8, r8)
20000dc0:	40021000 	andmi	r1, r2, r0
20000dc4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000dc8:	40020c00 	andmi	r0, r2, r0, lsl #24
20000dcc:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000dd0:	aaaa0000 	bge	1ea80dd8 <startup-0x157f228>

20000dd4 <game_init>:
void game_init(POBJECT BALL, PPLAYER P1, PPLAYER P2){
20000dd4:	b580      	push	{r7, lr}
20000dd6:	b084      	sub	sp, #16
20000dd8:	af00      	add	r7, sp, #0
20000dda:	60f8      	str	r0, [r7, #12]
20000ddc:	60b9      	str	r1, [r7, #8]
20000dde:	607a      	str	r2, [r7, #4]
		//Reset points
		P1->points = 0;
20000de0:	68bb      	ldr	r3, [r7, #8]
20000de2:	2200      	movs	r2, #0
20000de4:	605a      	str	r2, [r3, #4]
		P2->points = 0;
20000de6:	687b      	ldr	r3, [r7, #4]
20000de8:	2200      	movs	r2, #0
20000dea:	605a      	str	r2, [r3, #4]
		// Reset bouncer positions.
		P1->objct->posx = 6;
20000dec:	68bb      	ldr	r3, [r7, #8]
20000dee:	681b      	ldr	r3, [r3, #0]
20000df0:	2206      	movs	r2, #6
20000df2:	60da      	str	r2, [r3, #12]
		P1->objct->posy = 32;
20000df4:	68bb      	ldr	r3, [r7, #8]
20000df6:	681b      	ldr	r3, [r3, #0]
20000df8:	2220      	movs	r2, #32
20000dfa:	611a      	str	r2, [r3, #16]
		P2->objct->posx = LCD_WIDTH - 6;
20000dfc:	687b      	ldr	r3, [r7, #4]
20000dfe:	681b      	ldr	r3, [r3, #0]
20000e00:	227a      	movs	r2, #122	; 0x7a
20000e02:	60da      	str	r2, [r3, #12]
		P2->objct->posy = 32;
20000e04:	687b      	ldr	r3, [r7, #4]
20000e06:	681b      	ldr	r3, [r3, #0]
20000e08:	2220      	movs	r2, #32
20000e0a:	611a      	str	r2, [r3, #16]
		
		//Clears LCD screen
		graphic_clear_screen();
20000e0c:	f7ff fab7 	bl	2000037e <graphic_clear_screen>
		
		// Writes the startup values to the AsciiDisplay.
		ascii_clear_dsplay();
20000e10:	f7ff ff90 	bl	20000d34 <ascii_clear_dsplay>
		print_to_ascii(Player1.PAscii,'0' + Player1.points, 1);
20000e14:	4b19      	ldr	r3, [pc, #100]	; (20000e7c <game_init+0xa8>)
20000e16:	685b      	ldr	r3, [r3, #4]
20000e18:	b2db      	uxtb	r3, r3
20000e1a:	3330      	adds	r3, #48	; 0x30
20000e1c:	b2db      	uxtb	r3, r3
20000e1e:	b259      	sxtb	r1, r3
20000e20:	4b17      	ldr	r3, [pc, #92]	; (20000e80 <game_init+0xac>)
20000e22:	2201      	movs	r2, #1
20000e24:	0018      	movs	r0, r3
20000e26:	f7ff ff8d 	bl	20000d44 <print_to_ascii>
		print_to_ascii(Player2.PAscii,'0' + Player2.points, 2);
20000e2a:	4b16      	ldr	r3, [pc, #88]	; (20000e84 <game_init+0xb0>)
20000e2c:	685b      	ldr	r3, [r3, #4]
20000e2e:	b2db      	uxtb	r3, r3
20000e30:	3330      	adds	r3, #48	; 0x30
20000e32:	b2db      	uxtb	r3, r3
20000e34:	b259      	sxtb	r1, r3
20000e36:	4b14      	ldr	r3, [pc, #80]	; (20000e88 <game_init+0xb4>)
20000e38:	2202      	movs	r2, #2
20000e3a:	0018      	movs	r0, r3
20000e3c:	f7ff ff82 	bl	20000d44 <print_to_ascii>
		
		P1->objct->move(P1->objct); //Flyttar P1 "pinne"
20000e40:	68bb      	ldr	r3, [r7, #8]
20000e42:	681b      	ldr	r3, [r3, #0]
20000e44:	69da      	ldr	r2, [r3, #28]
20000e46:	68bb      	ldr	r3, [r7, #8]
20000e48:	681b      	ldr	r3, [r3, #0]
20000e4a:	0018      	movs	r0, r3
20000e4c:	4790      	blx	r2
		P2->objct->move(P2->objct); //Flyttar P2 "pinne"
20000e4e:	687b      	ldr	r3, [r7, #4]
20000e50:	681b      	ldr	r3, [r3, #0]
20000e52:	69da      	ldr	r2, [r3, #28]
20000e54:	687b      	ldr	r3, [r7, #4]
20000e56:	681b      	ldr	r3, [r3, #0]
20000e58:	0018      	movs	r0, r3
20000e5a:	4790      	blx	r2
		
		// Gives the ball it's speedfactor.
		BALL->set_speed(BALL,2,1);
20000e5c:	68fb      	ldr	r3, [r7, #12]
20000e5e:	6a1b      	ldr	r3, [r3, #32]
20000e60:	68f8      	ldr	r0, [r7, #12]
20000e62:	2201      	movs	r2, #1
20000e64:	2102      	movs	r1, #2
20000e66:	4798      	blx	r3
		delay_milli(300);
20000e68:	2396      	movs	r3, #150	; 0x96
20000e6a:	005b      	lsls	r3, r3, #1
20000e6c:	0018      	movs	r0, r3
20000e6e:	f7ff fd79 	bl	20000964 <delay_milli>
}
20000e72:	46c0      	nop			; (mov r8, r8)
20000e74:	46bd      	mov	sp, r7
20000e76:	b004      	add	sp, #16
20000e78:	bd80      	pop	{r7, pc}
20000e7a:	46c0      	nop			; (mov r8, r8)
20000e7c:	20001150 	andcs	r1, r0, r0, asr r1
20000e80:	20001158 	andcs	r1, r0, r8, asr r1
20000e84:	20001170 	andcs	r1, r0, r0, ror r1
20000e88:	20001178 	andcs	r1, r0, r8, ror r1

20000e8c <main>:

void main(void){
20000e8c:	b5b0      	push	{r4, r5, r7, lr}
20000e8e:	b08a      	sub	sp, #40	; 0x28
20000e90:	af00      	add	r7, sp, #0
	char c;
	POBJECT BALL = &ball;
20000e92:	4b6a      	ldr	r3, [pc, #424]	; (2000103c <main+0x1b0>)
20000e94:	623b      	str	r3, [r7, #32]
	PPLAYER P1 = &Player1;
20000e96:	4b6a      	ldr	r3, [pc, #424]	; (20001040 <main+0x1b4>)
20000e98:	61fb      	str	r3, [r7, #28]
	PPLAYER P2 = &Player2;
20000e9a:	4b6a      	ldr	r3, [pc, #424]	; (20001044 <main+0x1b8>)
20000e9c:	61bb      	str	r3, [r7, #24]
	
	init_app(); //Initierar register
20000e9e:	f7ff ff7c 	bl	20000d9a <init_app>
	ascii_init(); //Initierar Ascii displayen
20000ea2:	f7ff fe09 	bl	20000ab8 <ascii_init>
	graphic_initialize(); //initierar LC displayen
20000ea6:	f7ff f930 	bl	2000010a <graphic_initialize>
	game_init(BALL, P1, P2); //initierar spelet
20000eaa:	69ba      	ldr	r2, [r7, #24]
20000eac:	69f9      	ldr	r1, [r7, #28]
20000eae:	6a3b      	ldr	r3, [r7, #32]
20000eb0:	0018      	movs	r0, r3
20000eb2:	f7ff ff8f 	bl	20000dd4 <game_init>
	while(1){
		BALL->move(BALL); //sätter bollen i rörelse
20000eb6:	6a3b      	ldr	r3, [r7, #32]
20000eb8:	69db      	ldr	r3, [r3, #28]
20000eba:	6a3a      	ldr	r2, [r7, #32]
20000ebc:	0010      	movs	r0, r2
20000ebe:	4798      	blx	r3
		delay_milli(10);
20000ec0:	200a      	movs	r0, #10
20000ec2:	f7ff fd4f 	bl	20000964 <delay_milli>
		c = keyb(); //Kollar om någon tryckt
20000ec6:	2517      	movs	r5, #23
20000ec8:	197c      	adds	r4, r7, r5
20000eca:	f7ff fd56 	bl	2000097a <keyb>
20000ece:	0003      	movs	r3, r0
20000ed0:	7023      	strb	r3, [r4, #0]
		GPIO_D.odr_low = c;
20000ed2:	4a5d      	ldr	r2, [pc, #372]	; (20001048 <main+0x1bc>)
20000ed4:	197b      	adds	r3, r7, r5
20000ed6:	781b      	ldrb	r3, [r3, #0]
20000ed8:	7513      	strb	r3, [r2, #20]
		switch(c){
20000eda:	197b      	adds	r3, r7, r5
20000edc:	781b      	ldrb	r3, [r3, #0]
20000ede:	2b09      	cmp	r3, #9
20000ee0:	d03d      	beq.n	20000f5e <main+0xd2>
20000ee2:	dc4d      	bgt.n	20000f80 <main+0xf4>
20000ee4:	2b07      	cmp	r3, #7
20000ee6:	d017      	beq.n	20000f18 <main+0x8c>
20000ee8:	dc4a      	bgt.n	20000f80 <main+0xf4>
20000eea:	2b01      	cmp	r3, #1
20000eec:	d002      	beq.n	20000ef4 <main+0x68>
20000eee:	2b03      	cmp	r3, #3
20000ef0:	d023      	beq.n	20000f3a <main+0xae>
20000ef2:	e045      	b.n	20000f80 <main+0xf4>
			case 1: P1->objct->set_speed(P1->objct, 0, -2);
20000ef4:	69fb      	ldr	r3, [r7, #28]
20000ef6:	681b      	ldr	r3, [r3, #0]
20000ef8:	6a1c      	ldr	r4, [r3, #32]
20000efa:	69fb      	ldr	r3, [r7, #28]
20000efc:	681b      	ldr	r3, [r3, #0]
20000efe:	2202      	movs	r2, #2
20000f00:	4252      	negs	r2, r2
20000f02:	2100      	movs	r1, #0
20000f04:	0018      	movs	r0, r3
20000f06:	47a0      	blx	r4
				P1->objct->move(P1->objct);
20000f08:	69fb      	ldr	r3, [r7, #28]
20000f0a:	681b      	ldr	r3, [r3, #0]
20000f0c:	69da      	ldr	r2, [r3, #28]
20000f0e:	69fb      	ldr	r3, [r7, #28]
20000f10:	681b      	ldr	r3, [r3, #0]
20000f12:	0018      	movs	r0, r3
20000f14:	4790      	blx	r2
				break;
20000f16:	e033      	b.n	20000f80 <main+0xf4>
			case 7: P1->objct->set_speed(P1->objct, 0, 2);
20000f18:	69fb      	ldr	r3, [r7, #28]
20000f1a:	681b      	ldr	r3, [r3, #0]
20000f1c:	6a1c      	ldr	r4, [r3, #32]
20000f1e:	69fb      	ldr	r3, [r7, #28]
20000f20:	681b      	ldr	r3, [r3, #0]
20000f22:	2202      	movs	r2, #2
20000f24:	2100      	movs	r1, #0
20000f26:	0018      	movs	r0, r3
20000f28:	47a0      	blx	r4
				P1->objct->move(P1->objct);
20000f2a:	69fb      	ldr	r3, [r7, #28]
20000f2c:	681b      	ldr	r3, [r3, #0]
20000f2e:	69da      	ldr	r2, [r3, #28]
20000f30:	69fb      	ldr	r3, [r7, #28]
20000f32:	681b      	ldr	r3, [r3, #0]
20000f34:	0018      	movs	r0, r3
20000f36:	4790      	blx	r2
				break;
20000f38:	e022      	b.n	20000f80 <main+0xf4>
			case 3: P2->objct->set_speed(P2->objct, 0, -2);
20000f3a:	69bb      	ldr	r3, [r7, #24]
20000f3c:	681b      	ldr	r3, [r3, #0]
20000f3e:	6a1c      	ldr	r4, [r3, #32]
20000f40:	69bb      	ldr	r3, [r7, #24]
20000f42:	681b      	ldr	r3, [r3, #0]
20000f44:	2202      	movs	r2, #2
20000f46:	4252      	negs	r2, r2
20000f48:	2100      	movs	r1, #0
20000f4a:	0018      	movs	r0, r3
20000f4c:	47a0      	blx	r4
				P2->objct->move(P2->objct);
20000f4e:	69bb      	ldr	r3, [r7, #24]
20000f50:	681b      	ldr	r3, [r3, #0]
20000f52:	69da      	ldr	r2, [r3, #28]
20000f54:	69bb      	ldr	r3, [r7, #24]
20000f56:	681b      	ldr	r3, [r3, #0]
20000f58:	0018      	movs	r0, r3
20000f5a:	4790      	blx	r2
				break;
20000f5c:	e010      	b.n	20000f80 <main+0xf4>
			case 9: P2->objct->set_speed(P2->objct, 0, 2);
20000f5e:	69bb      	ldr	r3, [r7, #24]
20000f60:	681b      	ldr	r3, [r3, #0]
20000f62:	6a1c      	ldr	r4, [r3, #32]
20000f64:	69bb      	ldr	r3, [r7, #24]
20000f66:	681b      	ldr	r3, [r3, #0]
20000f68:	2202      	movs	r2, #2
20000f6a:	2100      	movs	r1, #0
20000f6c:	0018      	movs	r0, r3
20000f6e:	47a0      	blx	r4
				P2->objct->move(P2->objct);
20000f70:	69bb      	ldr	r3, [r7, #24]
20000f72:	681b      	ldr	r3, [r3, #0]
20000f74:	69da      	ldr	r2, [r3, #28]
20000f76:	69bb      	ldr	r3, [r7, #24]
20000f78:	681b      	ldr	r3, [r3, #0]
20000f7a:	0018      	movs	r0, r3
20000f7c:	4790      	blx	r2
				break;
20000f7e:	46c0      	nop			; (mov r8, r8)

		}
		if(P1->points >= WinPoints||P2->points >= WinPoints){ //Om någon har nåt poängen för att vinna
20000f80:	69fb      	ldr	r3, [r7, #28]
20000f82:	685b      	ldr	r3, [r3, #4]
20000f84:	2b08      	cmp	r3, #8
20000f86:	dc03      	bgt.n	20000f90 <main+0x104>
20000f88:	69bb      	ldr	r3, [r7, #24]
20000f8a:	685b      	ldr	r3, [r3, #4]
20000f8c:	2b08      	cmp	r3, #8
20000f8e:	dd92      	ble.n	20000eb6 <main+0x2a>
			char press[] = "Press 5 to restart";
20000f90:	003b      	movs	r3, r7
20000f92:	4a2e      	ldr	r2, [pc, #184]	; (2000104c <main+0x1c0>)
20000f94:	ca13      	ldmia	r2!, {r0, r1, r4}
20000f96:	c313      	stmia	r3!, {r0, r1, r4}
20000f98:	6811      	ldr	r1, [r2, #0]
20000f9a:	6019      	str	r1, [r3, #0]
20000f9c:	8891      	ldrh	r1, [r2, #4]
20000f9e:	8099      	strh	r1, [r3, #4]
20000fa0:	7992      	ldrb	r2, [r2, #6]
20000fa2:	719a      	strb	r2, [r3, #6]
			char restart = 1; //sätt restart variabeln till 1
20000fa4:	2327      	movs	r3, #39	; 0x27
20000fa6:	18fb      	adds	r3, r7, r3
20000fa8:	2201      	movs	r2, #1
20000faa:	701a      	strb	r2, [r3, #0]
			if(P1->points >= WinPoints){ // Om player 1 har vunnit sätt Ascii displayerna till Player1 Wins
20000fac:	69fb      	ldr	r3, [r7, #28]
20000fae:	685b      	ldr	r3, [r3, #4]
20000fb0:	2b08      	cmp	r3, #8
20000fb2:	dd10      	ble.n	20000fd6 <main+0x14a>
				ascii_clear_dsplay();
20000fb4:	f7ff febe 	bl	20000d34 <ascii_clear_dsplay>
				print_to_ascii(Player1.winMsg, -1, 1);
20000fb8:	2301      	movs	r3, #1
20000fba:	4259      	negs	r1, r3
20000fbc:	4b24      	ldr	r3, [pc, #144]	; (20001050 <main+0x1c4>)
20000fbe:	2201      	movs	r2, #1
20000fc0:	0018      	movs	r0, r3
20000fc2:	f7ff febf 	bl	20000d44 <print_to_ascii>
				print_to_ascii(press, -1, 2);
20000fc6:	2301      	movs	r3, #1
20000fc8:	4259      	negs	r1, r3
20000fca:	003b      	movs	r3, r7
20000fcc:	2202      	movs	r2, #2
20000fce:	0018      	movs	r0, r3
20000fd0:	f7ff feb8 	bl	20000d44 <print_to_ascii>
20000fd4:	e02c      	b.n	20001030 <main+0x1a4>

			}
			else if(P2->points >= WinPoints){ // Om player 2 har vunnit sätt Ascii displayerna till Player2 Wins
20000fd6:	69bb      	ldr	r3, [r7, #24]
20000fd8:	685b      	ldr	r3, [r3, #4]
20000fda:	2b08      	cmp	r3, #8
20000fdc:	dd28      	ble.n	20001030 <main+0x1a4>
			ascii_clear_dsplay();
20000fde:	f7ff fea9 	bl	20000d34 <ascii_clear_dsplay>
			print_to_ascii(Player2.winMsg, -1, 1);
20000fe2:	2301      	movs	r3, #1
20000fe4:	4259      	negs	r1, r3
20000fe6:	4b1b      	ldr	r3, [pc, #108]	; (20001054 <main+0x1c8>)
20000fe8:	2201      	movs	r2, #1
20000fea:	0018      	movs	r0, r3
20000fec:	f7ff feaa 	bl	20000d44 <print_to_ascii>
			print_to_ascii(press, -1, 2);
20000ff0:	2301      	movs	r3, #1
20000ff2:	4259      	negs	r1, r3
20000ff4:	003b      	movs	r3, r7
20000ff6:	2202      	movs	r2, #2
20000ff8:	0018      	movs	r0, r3
20000ffa:	f7ff fea3 	bl	20000d44 <print_to_ascii>
			}
			while(restart){ //Så länge inte knapp 5 på Keypaden har tryckts så står är spelet låst
20000ffe:	e017      	b.n	20001030 <main+0x1a4>
				char button = keyb(); //reads the keyboard.
20001000:	2516      	movs	r5, #22
20001002:	197c      	adds	r4, r7, r5
20001004:	f7ff fcb9 	bl	2000097a <keyb>
20001008:	0003      	movs	r3, r0
2000100a:	7023      	strb	r3, [r4, #0]
2000100c:	2427      	movs	r4, #39	; 0x27
2000100e:	193b      	adds	r3, r7, r4
20001010:	193a      	adds	r2, r7, r4
20001012:	7812      	ldrb	r2, [r2, #0]
20001014:	701a      	strb	r2, [r3, #0]
				if(button == 5){
20001016:	197b      	adds	r3, r7, r5
20001018:	781b      	ldrb	r3, [r3, #0]
2000101a:	2b05      	cmp	r3, #5
2000101c:	d108      	bne.n	20001030 <main+0x1a4>
					game_init(BALL, P1, P2); // startar om spelet
2000101e:	69ba      	ldr	r2, [r7, #24]
20001020:	69f9      	ldr	r1, [r7, #28]
20001022:	6a3b      	ldr	r3, [r7, #32]
20001024:	0018      	movs	r0, r3
20001026:	f7ff fed5 	bl	20000dd4 <game_init>
					restart = 0; //Set restar to 0.
2000102a:	193b      	adds	r3, r7, r4
2000102c:	2200      	movs	r2, #0
2000102e:	701a      	strb	r2, [r3, #0]
			while(restart){ //Så länge inte knapp 5 på Keypaden har tryckts så står är spelet låst
20001030:	2327      	movs	r3, #39	; 0x27
20001032:	18fb      	adds	r3, r7, r3
20001034:	781b      	ldrb	r3, [r3, #0]
20001036:	2b00      	cmp	r3, #0
20001038:	d1e2      	bne.n	20001000 <main+0x174>
		BALL->move(BALL); //sätter bollen i rörelse
2000103a:	e73c      	b.n	20000eb6 <main+0x2a>
2000103c:	20001124 	andcs	r1, r0, r4, lsr #2
20001040:	20001150 	andcs	r1, r0, r0, asr r1
20001044:	20001170 	andcs	r1, r0, r0, ror r1
20001048:	40020c00 	andmi	r0, r2, r0, lsl #24
2000104c:	200011c4 	andcs	r1, r0, r4, asr #3
20001050:	20001162 	andcs	r1, r0, r2, ror #2
20001054:	20001182 	andcs	r1, r0, r2, lsl #3

20001058 <AsciiOutPrint>:
20001058:	00000000 	andeq	r0, r0, r0

2000105c <Segcodes>:
2000105c:	4f5b063f 	svcmi	0x005b063f
20001060:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001064:	7c776f7f 	ldclvc	15, cr6, [r7], #-508	; 0xfffffe04
20001068:	71795e39 	cmnvc	r9, r9, lsr lr

2000106c <Key>:
2000106c:	0a030201 	beq	200c1878 <Player2+0xc0708>
20001070:	0b060504 	bleq	20182488 <Player2+0x181318>
20001074:	0c090807 	stceq	8, cr0, [r9], {7}
20001078:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001048 <main+0x1bc>

2000107c <ball_geometry>:
2000107c:	0000000c 	andeq	r0, r0, ip
20001080:	00000004 	andeq	r0, r0, r4
20001084:	00000004 	andeq	r0, r0, r4
20001088:	02000100 	andeq	r0, r0, #0, 2
2000108c:	01010001 	tsteq	r1, r1
20001090:	03010201 	movweq	r0, #4609	; 0x1201
20001094:	01020002 	tsteq	r2, r2
20001098:	03020202 	movweq	r0, #8706	; 0x2202
2000109c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
200010a0:	00000000 	andeq	r0, r0, r0

200010a4 <bouncer_geometry>:
200010a4:	0000000e 	andeq	r0, r0, lr
200010a8:	00000002 	andeq	r0, r0, r2
200010ac:	00000006 	andeq	r0, r0, r6
200010b0:	00010000 	andeq	r0, r1, r0
200010b4:	01010100 	mrseq	r0, (UNDEF: 17)
200010b8:	02010200 	andeq	r0, r1, #0, 4
200010bc:	03010300 	movweq	r0, #4864	; 0x1300
200010c0:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200010c4:	05010500 	streq	r0, [r1, #-1280]	; 0xfffffb00
200010c8:	06010600 	streq	r0, [r1], -r0, lsl #12

200010cc <left_bouncer>:
200010cc:	200010a4 	andcs	r1, r0, r4, lsr #1
	...
200010d8:	0000000f 	andeq	r0, r0, pc
200010dc:	00000020 	andeq	r0, r0, r0, lsr #32
200010e0:	20000755 	andcs	r0, r0, r5, asr r7
200010e4:	200007ad 	andcs	r0, r0, sp, lsr #15
200010e8:	2000086b 	andcs	r0, r0, fp, ror #16
200010ec:	20000735 	andcs	r0, r0, r5, lsr r7
200010f0:	20000805 	andcs	r0, r0, r5, lsl #16
200010f4:	00000000 	andeq	r0, r0, r0

200010f8 <right_bouncer>:
200010f8:	200010a4 	andcs	r1, r0, r4, lsr #1
	...
20001104:	00000071 	andeq	r0, r0, r1, ror r0
20001108:	00000020 	andeq	r0, r0, r0, lsr #32
2000110c:	20000755 	andcs	r0, r0, r5, asr r7
20001110:	200007ad 	andcs	r0, r0, sp, lsr #15
20001114:	2000086b 	andcs	r0, r0, fp, ror #16
20001118:	20000735 	andcs	r0, r0, r5, lsr r7
2000111c:	20000805 	andcs	r0, r0, r5, lsl #16
20001120:	00000000 	andeq	r0, r0, r0

20001124 <ball>:
20001124:	2000107c 	andcs	r1, r0, ip, ror r0
	...
20001130:	00000040 	andeq	r0, r0, r0, asr #32
20001134:	00000020 	andeq	r0, r0, r0, lsr #32
20001138:	20000755 	andcs	r0, r0, r5, asr r7
2000113c:	200007ad 	andcs	r0, r0, sp, lsr #15
20001140:	20000825 	andcs	r0, r0, r5, lsr #16
20001144:	20000735 	andcs	r0, r0, r5, lsr r7
20001148:	20000805 	andcs	r0, r0, r5, lsl #16
2000114c:	20000579 	andcs	r0, r0, r9, ror r5

20001150 <Player1>:
20001150:	200010cc 	andcs	r1, r0, ip, asr #1
20001154:	00000000 	andeq	r0, r0, r0
20001158:	79616c70 	stmdbvc	r1!, {r4, r5, r6, sl, fp, sp, lr}^
2000115c:	3a317265 	bcc	20c5daf8 <Player2+0xc5c988>
20001160:	6c500020 	mrrcvs	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
20001164:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
20001168:	69772031 	ldmdbvs	r7!, {r0, r4, r5, sp}^
2000116c:	0000736e 	andeq	r7, r0, lr, ror #6

20001170 <Player2>:
20001170:	200010f8 	strdcs	r1, [r0], -r8
20001174:	00000000 	andeq	r0, r0, r0
20001178:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
2000117c:	3a327265 	bcc	20c9db18 <Player2+0xc9c9a8>
20001180:	4c500020 	mrrcmi	0, 2, r0, r0, cr0	; <UNPREDICTABLE>
20001184:	72657961 	rsbvc	r7, r5, #1589248	; 0x184000
20001188:	69772032 	ldmdbvs	r7!, {r1, r4, r5, sp}^
2000118c:	0000736e 	andeq	r7, r0, lr, ror #6
20001190:	20000442 	andcs	r0, r0, r2, asr #8
20001194:	2000044c 	andcs	r0, r0, ip, asr #8
20001198:	20000456 	andcs	r0, r0, r6, asr r4
2000119c:	20000460 	andcs	r0, r0, r0, ror #8
200011a0:	2000046a 	andcs	r0, r0, sl, ror #8
200011a4:	20000474 	andcs	r0, r0, r4, ror r4
200011a8:	2000047e 	andcs	r0, r0, lr, ror r4
200011ac:	20000488 	andcs	r0, r0, r8, lsl #9
200011b0:	20000a12 	andcs	r0, r0, r2, lsl sl
200011b4:	200009f2 	strdcs	r0, [r0], -r2
200011b8:	200009fa 	strdcs	r0, [r0], -sl
200011bc:	20000a02 	andcs	r0, r0, r2, lsl #20
200011c0:	20000a0a 	andcs	r0, r0, sl, lsl #20
200011c4:	73657250 	cmnvc	r5, #80, 4
200011c8:	20352073 	eorscs	r2, r5, r3, ror r0
200011cc:	72206f74 	eorvc	r6, r0, #116, 30	; 0x1d0
200011d0:	61747365 	cmnvs	r4, r5, ror #6
200011d4:	00007472 	andeq	r7, r0, r2, ror r4

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000e33 	andeq	r0, r0, r3, lsr lr
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000062 	andeq	r0, r0, r2, rrx
  10:	0001e10c 	andeq	lr, r1, ip, lsl #2
  14:	00036800 	andeq	r6, r3, r0, lsl #16
	...
  24:	03360200 	teqeq	r6, #0, 4
  28:	10010000 	andne	r0, r1, r0
  2c:	00003116 	andeq	r3, r0, r6, lsl r1
  30:	07040300 	streq	r0, [r4, -r0, lsl #6]
  34:	000003da 	ldrdeq	r0, [r0], -sl
  38:	00035702 	andeq	r5, r3, r2, lsl #14
  3c:	1c110100 	ldfnes	f0, [r1], {-0}
  40:	00000044 	andeq	r0, r0, r4, asr #32
  44:	d4070203 	strle	r0, [r7], #-515	; 0xfffffdfd
  48:	02000003 	andeq	r0, r0, #3
  4c:	0000017f 	andeq	r0, r0, pc, ror r1
  50:	57171201 	ldrpl	r1, [r7, -r1, lsl #4]
  54:	03000000 	movweq	r0, #0
  58:	02dd0801 	sbcseq	r0, sp, #65536	; 0x10000
  5c:	a6040000 	strge	r0, [r4], -r0
  60:	18000003 	stmdane	r0, {r0, r1}
  64:	fb101401 	blx	405072 <startup-0x1fbfaf8e>
  68:	05000000 	streq	r0, [r0, #-0]
  6c:	00000505 	andeq	r0, r0, r5, lsl #10
  70:	250b1501 	strcs	r1, [fp, #-1281]	; 0xfffffaff
  74:	00000000 	andeq	r0, r0, r0
  78:	00017805 	andeq	r7, r1, r5, lsl #16
  7c:	0b160100 	bleq	580484 <startup-0x1fa7fb7c>
  80:	00000038 	andeq	r0, r0, r8, lsr r0
  84:	024c0504 	subeq	r0, ip, #4, 10	; 0x1000000
  88:	17010000 	strne	r0, [r1, -r0]
  8c:	0000380b 	andeq	r3, r0, fp, lsl #16
  90:	60050600 	andvs	r0, r5, r0, lsl #12
  94:	01000003 	tsteq	r0, r3
  98:	00250b18 	eoreq	r0, r5, r8, lsl fp
  9c:	05080000 	streq	r0, [r8, #-0]
  a0:	000004c0 	andeq	r0, r0, r0, asr #9
  a4:	250b1901 	strcs	r1, [fp, #-2305]	; 0xfffff6ff
  a8:	0c000000 	stceq	0, cr0, [r0], {-0}
  ac:	00030905 	andeq	r0, r3, r5, lsl #18
  b0:	0b1a0100 	bleq	6804b8 <startup-0x1f97fb48>
  b4:	0000004b 	andeq	r0, r0, fp, asr #32
  b8:	01b90510 			; <UNDEFINED> instruction: 0x01b90510
  bc:	1b010000 	blne	400c4 <startup-0x1ffbff3c>
  c0:	00004b0b 	andeq	r4, r0, fp, lsl #22
  c4:	d4051100 	strle	r1, [r5], #-256	; 0xffffff00
  c8:	01000001 	tsteq	r0, r1
  cc:	00380b1c 	eorseq	r0, r8, ip, lsl fp
  d0:	05120000 	ldreq	r0, [r2, #-0]
  d4:	00000445 	andeq	r0, r0, r5, asr #8
  d8:	4b0b1d01 	blmi	2c74e4 <startup-0x1fd38b1c>
  dc:	14000000 	strne	r0, [r0], #-0
  e0:	0004c605 	andeq	ip, r4, r5, lsl #12
  e4:	0b1e0100 	bleq	7804ec <startup-0x1f87fb14>
  e8:	0000004b 	andeq	r0, r0, fp, asr #32
  ec:	055f0515 	ldrbeq	r0, [pc, #-1301]	; fffffbdf <Player2+0xdfffea6f>
  f0:	1f010000 	svcne	0x00010000
  f4:	0000380b 	andeq	r3, r0, fp, lsl #16
  f8:	02001600 	andeq	r1, r0, #0, 12
  fc:	000003a6 	andeq	r0, r0, r6, lsr #7
 100:	5e032101 	adfpls	f2, f3, f1
 104:	06000000 	streq	r0, [r0], -r0
 108:	000000fb 	strdeq	r0, [r0], -fp
 10c:	00010502 	andeq	r0, r1, r2, lsl #10
 110:	18220100 	stmdane	r2!, {r8}
 114:	00000118 	andeq	r0, r0, r8, lsl r1
 118:	01070407 	tsteq	r7, r7, lsl #8
 11c:	57080000 	strpl	r0, [r8, -r0]
 120:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
 124:	09000001 	stmdbeq	r0, {r0}
 128:	00000031 	andeq	r0, r0, r1, lsr r0
 12c:	1b0a000f 	blne	280170 <startup-0x1fd7fe90>
 130:	01000005 	tsteq	r0, r5
 134:	011e0f43 	tsteq	lr, r3, asr #30
 138:	03050000 	movweq	r0, #20480	; 0x5000
 13c:	2000105c 	andcs	r1, r0, ip, asr r0
 140:	79654b0b 	stmdbvc	r5!, {r0, r1, r3, r8, r9, fp, lr}^
 144:	0f440100 	svceq	0x00440100
 148:	0000011e 	andeq	r0, r0, lr, lsl r1
 14c:	106c0305 	rsbne	r0, ip, r5, lsl #6
 150:	810a2000 	mrshi	r2, (UNDEF: 10)
 154:	01000002 	tsteq	r0, r2
 158:	01640745 	cmneq	r4, r5, asr #14
 15c:	03050000 	movweq	r0, #20480	; 0x5000
 160:	20001058 	andcs	r1, r0, r8, asr r0
 164:	016a0407 	cmneq	sl, r7, lsl #8
 168:	01030000 	mrseq	r0, (UNDEF: 3)
 16c:	0002e608 	andeq	lr, r2, r8, lsl #12
 170:	042d0400 	strteq	r0, [sp], #-1024	; 0xfffffc00
 174:	01020000 	mrseq	r0, (UNDEF: 2)
 178:	01951048 	orrseq	r1, r5, r8, asr #32
 17c:	780c0000 	stmdavc	ip, {}	; <UNPREDICTABLE>
 180:	10490100 	subne	r0, r9, r0, lsl #2
 184:	00000057 	andeq	r0, r0, r7, asr r0
 188:	00790c00 	rsbseq	r0, r9, r0, lsl #24
 18c:	57104a01 	ldrpl	r4, [r0, -r1, lsl #20]
 190:	01000000 	mrseq	r0, (UNDEF: 0)
 194:	04270200 	strteq	r0, [r7], #-512	; 0xfffffe00
 198:	4b010000 	blmi	401a0 <startup-0x1ffbfe60>
 19c:	00017102 	andeq	r7, r1, r2, lsl #2
 1a0:	00450400 	subeq	r0, r5, r0, lsl #8
 1a4:	01280000 			; <UNDEFINED> instruction: 0x01280000
 1a8:	01e2104c 	mvneq	r1, ip, asr #32
 1ac:	fa050000 	blx	1401b4 <startup-0x1febfe4c>
 1b0:	01000003 	tsteq	r0, r3
 1b4:	01e2064d 	mvneq	r0, sp, asr #12
 1b8:	05000000 	streq	r0, [r0, #-0]
 1bc:	00000226 	andeq	r0, r0, r6, lsr #4
 1c0:	e2064e01 	and	r4, r6, #1, 28
 1c4:	04000001 	streq	r0, [r0], #-1
 1c8:	00022c05 	andeq	r2, r2, r5, lsl #24
 1cc:	064f0100 	strbeq	r0, [pc], -r0, lsl #2
 1d0:	000001e2 	andeq	r0, r0, r2, ror #3
 1d4:	78700c08 	ldmdavc	r0!, {r3, sl, fp}^
 1d8:	08500100 	ldmdaeq	r0, {r8}^
 1dc:	000001e9 	andeq	r0, r0, r9, ror #3
 1e0:	040d000c 	streq	r0, [sp], #-12
 1e4:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 1e8:	01950800 	orrseq	r0, r5, r0, lsl #16
 1ec:	01f90000 	mvnseq	r0, r0
 1f0:	31090000 	mrscc	r0, (UNDEF: 9)
 1f4:	0d000000 	stceq	0, cr0, [r0, #-0]
 1f8:	01410200 	mrseq	r0, (UNDEF: 97)
 1fc:	51010000 	mrspl	r0, (UNDEF: 1)
 200:	0001a102 	andeq	sl, r1, r2, lsl #2
 204:	01400200 	mrseq	r0, (UNDEF: 96)
 208:	51010000 	mrspl	r0, (UNDEF: 1)
 20c:	0002110d 	andeq	r1, r2, sp, lsl #2
 210:	a1040700 	tstge	r4, r0, lsl #14
 214:	04000001 	streq	r0, [r0], #-1
 218:	000003e7 	andeq	r0, r0, r7, ror #7
 21c:	1052012c 	subsne	r0, r2, ip, lsr #2
 220:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 224:	6f65670c 	svcvs	0x0065670c
 228:	0c530100 	ldfeqe	f0, [r3], {-0}
 22c:	00000205 	andeq	r0, r0, r5, lsl #4
 230:	02570500 	subseq	r0, r7, #0, 10
 234:	54010000 	strpl	r0, [r1], #-0
 238:	0001e206 	andeq	lr, r1, r6, lsl #4
 23c:	5c050400 	cfstrspl	mvf0, [r5], {-0}
 240:	01000002 	tsteq	r0, r2
 244:	01e20b54 	mvneq	r0, r4, asr fp
 248:	05080000 	streq	r0, [r8, #-0]
 24c:	00000007 	andeq	r0, r0, r7
 250:	e2065501 	and	r5, r6, #4194304	; 0x400000
 254:	0c000001 	stceq	0, cr0, [r0], {1}
 258:	00023205 	andeq	r3, r2, r5, lsl #4
 25c:	0b550100 	bleq	1540664 <startup-0x1eabf99c>
 260:	000001e2 	andeq	r0, r0, r2, ror #3
 264:	044d0510 	strbeq	r0, [sp], #-1296	; 0xfffffaf0
 268:	56010000 	strpl	r0, [r1], -r0
 26c:	0002ca09 	andeq	ip, r2, r9, lsl #20
 270:	a9051400 	stmdbge	r5, {sl, ip}
 274:	01000001 	tsteq	r0, r1
 278:	02e60957 	rsceq	r0, r6, #1425408	; 0x15c000
 27c:	05180000 	ldreq	r0, [r8, #-0]
 280:	00000555 	andeq	r0, r0, r5, asr r5
 284:	02095801 	andeq	r5, r9, #65536	; 0x10000
 288:	1c000003 	stcne	0, cr0, [r0], {3}
 28c:	00045205 	andeq	r5, r4, r5, lsl #4
 290:	09590100 	ldmdbeq	r9, {r8}^
 294:	00000328 	andeq	r0, r0, r8, lsr #6
 298:	00f30520 	rscseq	r0, r3, r0, lsr #10
 29c:	5a010000 	bpl	402a4 <startup-0x1ffbfd5c>
 2a0:	00034e09 	andeq	r4, r3, r9, lsl #28
 2a4:	de052400 	cfcpysle	mvf2, mvf5
 2a8:	01000000 	mrseq	r0, (UNDEF: 0)
 2ac:	036a095b 	cmneq	sl, #1490944	; 0x16c000
 2b0:	00280000 	eoreq	r0, r8, r0
 2b4:	0002bf0e 	andeq	fp, r2, lr, lsl #30
 2b8:	02bf0f00 	adcseq	r0, pc, #0, 30
 2bc:	07000000 	streq	r0, [r0, -r0]
 2c0:	0002c504 	andeq	ip, r2, r4, lsl #10
 2c4:	055a1000 	ldrbeq	r1, [sl, #-0]
 2c8:	04070000 	streq	r0, [r7], #-0
 2cc:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 2d0:	0002db0e 	andeq	sp, r2, lr, lsl #22
 2d4:	02db0f00 	sbcseq	r0, fp, #0, 30
 2d8:	07000000 	streq	r0, [r0, -r0]
 2dc:	0002e104 	andeq	lr, r2, r4, lsl #2
 2e0:	055a1000 	ldrbeq	r1, [sl, #-0]
 2e4:	04070000 	streq	r0, [r7], #-0
 2e8:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2ec:	0002f70e 	andeq	pc, r2, lr, lsl #14
 2f0:	02f70f00 	rscseq	r0, r7, #0, 30
 2f4:	07000000 	streq	r0, [r0, -r0]
 2f8:	0002fd04 	andeq	pc, r2, r4, lsl #26
 2fc:	055a1000 	ldrbeq	r1, [sl, #-0]
 300:	04070000 	streq	r0, [r7], #-0
 304:	000002ec 	andeq	r0, r0, ip, ror #5
 308:	00031d0e 	andeq	r1, r3, lr, lsl #26
 30c:	031d0f00 	tsteq	sp, #0, 30
 310:	e20f0000 	and	r0, pc, #0
 314:	0f000001 	svceq	0x00000001
 318:	000001e2 	andeq	r0, r0, r2, ror #3
 31c:	23040700 	movwcs	r0, #18176	; 0x4700
 320:	10000003 	andne	r0, r0, r3
 324:	0000055a 	andeq	r0, r0, sl, asr r5
 328:	03080407 	movweq	r0, #33799	; 0x8407
 32c:	430e0000 	movwmi	r0, #57344	; 0xe000
 330:	0f000003 	svceq	0x00000003
 334:	00000343 	andeq	r0, r0, r3, asr #6
 338:	0001e20f 	andeq	lr, r1, pc, lsl #4
 33c:	01e20f00 	mvneq	r0, r0, lsl #30
 340:	07000000 	streq	r0, [r0, -r0]
 344:	00034904 	andeq	r4, r3, r4, lsl #18
 348:	055a1000 	ldrbeq	r1, [sl, #-0]
 34c:	04070000 	streq	r0, [r7], #-0
 350:	0000032e 	andeq	r0, r0, lr, lsr #6
 354:	00035f0e 	andeq	r5, r3, lr, lsl #30
 358:	035f0f00 	cmpeq	pc, #0, 30
 35c:	07000000 	streq	r0, [r0, -r0]
 360:	00036504 	andeq	r6, r3, r4, lsl #10
 364:	055a1000 	ldrbeq	r1, [sl, #-0]
 368:	04070000 	streq	r0, [r7], #-0
 36c:	00000354 	andeq	r0, r0, r4, asr r3
 370:	00054602 	andeq	r4, r5, r2, lsl #12
 374:	025c0100 	subseq	r0, ip, #0, 2
 378:	00000217 	andeq	r0, r0, r7, lsl r2
 37c:	00054502 	andeq	r4, r5, r2, lsl #10
 380:	0b5c0100 	bleq	1700788 <startup-0x1e8ff878>
 384:	00000388 	andeq	r0, r0, r8, lsl #7
 388:	02170407 	andseq	r0, r7, #117440512	; 0x7000000
 38c:	37040000 	strcc	r0, [r4, -r0]
 390:	20000002 	andcs	r0, r0, r2
 394:	d0105d01 	andsle	r5, r0, r1, lsl #26
 398:	05000003 	streq	r0, [r0, #-3]
 39c:	00000577 	andeq	r0, r0, r7, ror r5
 3a0:	7c0a5e01 	stcvc	14, cr5, [sl], {1}
 3a4:	00000003 	andeq	r0, r0, r3
 3a8:	0004cf05 	andeq	ip, r4, r5, lsl #30
 3ac:	065f0100 	ldrbeq	r0, [pc], -r0, lsl #2
 3b0:	000001e2 	andeq	r0, r0, r2, ror #3
 3b4:	02610504 	rsbeq	r0, r1, #4, 10	; 0x1000000
 3b8:	60010000 	andvs	r0, r1, r0
 3bc:	0003d007 	andeq	sp, r3, r7
 3c0:	16050800 	strne	r0, [r5], -r0, lsl #16
 3c4:	01000003 	tsteq	r0, r3
 3c8:	03e00761 	mvneq	r0, #25427968	; 0x1840000
 3cc:	00120000 	andseq	r0, r2, r0
 3d0:	00016a08 	andeq	r6, r1, r8, lsl #20
 3d4:	0003e000 	andeq	lr, r3, r0
 3d8:	00310900 	eorseq	r0, r1, r0, lsl #18
 3dc:	00090000 	andeq	r0, r9, r0
 3e0:	00016a08 	andeq	r6, r1, r8, lsl #20
 3e4:	0003f000 	andeq	pc, r3, r0
 3e8:	00310900 	eorseq	r0, r1, r0, lsl #18
 3ec:	000b0000 	andeq	r0, fp, r0
 3f0:	0004b902 	andeq	fp, r4, r2, lsl #18
 3f4:	02640100 	rsbeq	r0, r4, #0, 2
 3f8:	0000038e 	andeq	r0, r0, lr, lsl #7
 3fc:	0004b802 	andeq	fp, r4, r2, lsl #16
 400:	0b640100 	bleq	1900808 <startup-0x1e6ff7f8>
 404:	00000408 	andeq	r0, r0, r8, lsl #8
 408:	038e0407 	orreq	r0, lr, #117440512	; 0x7000000
 40c:	7c0a0000 	stcvc	0, cr0, [sl], {-0}
 410:	01000004 	tsteq	r0, r4
 414:	01f90a77 	mvnseq	r0, r7, ror sl
 418:	03050000 	movweq	r0, #20480	; 0x5000
 41c:	2000107c 	andcs	r1, r0, ip, ror r0
 420:	00012f0a 	andeq	r2, r1, sl, lsl #30
 424:	0a820100 	beq	fe08082c <Player2+0xde07f6bc>
 428:	000001f9 	strdeq	r0, [r0], -r9
 42c:	10a40305 	adcne	r0, r4, r5, lsl #6
 430:	3f112000 	svccc	0x00112000
 434:	01000002 	tsteq	r0, r2
 438:	03700f90 	cmneq	r0, #144, 30	; 0x240
 43c:	03050000 	movweq	r0, #20480	; 0x5000
 440:	200010cc 	andcs	r1, r0, ip, asr #1
 444:	0003ec11 	andeq	lr, r3, r1, lsl ip
 448:	0f9c0100 	svceq	0x009c0100
 44c:	00000370 	andeq	r0, r0, r0, ror r3
 450:	10f80305 	rscsne	r0, r8, r5, lsl #6
 454:	b4112000 	ldrlt	r2, [r1], #-0
 458:	01000001 	tsteq	r0, r1
 45c:	03700fa9 	cmneq	r0, #676	; 0x2a4
 460:	03050000 	movweq	r0, #20480	; 0x5000
 464:	20001124 	andcs	r1, r0, r4, lsr #2
 468:	0002eb11 	andeq	lr, r2, r1, lsl fp
 46c:	0fb60100 	svceq	0x00b60100
 470:	000003f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 474:	11500305 	cmpne	r0, r5, lsl #6
 478:	f3112000 	vhadd.u16	d2, d1, d0
 47c:	01000002 	tsteq	r0, r2
 480:	03f00fbc 	mvnseq	r0, #188, 30	; 0x2f0
 484:	03050000 	movweq	r0, #20480	; 0x5000
 488:	20001170 	andcs	r1, r0, r0, ror r1
 48c:	0000fb12 	andeq	pc, r0, r2, lsl fp	; <UNPREDICTABLE>
 490:	027f0100 	rsbseq	r0, pc, #0, 2
 494:	000e8c06 	andeq	r8, lr, r6, lsl #24
 498:	0001cc20 	andeq	ip, r1, r0, lsr #24
 49c:	249c0100 	ldrcs	r0, [ip], #256	; 0x100
 4a0:	13000005 	movwne	r0, #5
 4a4:	80010063 	andhi	r0, r1, r3, rrx
 4a8:	016a0702 	cmneq	sl, r2, lsl #14
 4ac:	91020000 	mrsls	r0, (UNDEF: 2)
 4b0:	0100145f 	tsteq	r0, pc, asr r4
 4b4:	81010000 	mrshi	r0, (UNDEF: 1)
 4b8:	037c0a02 	cmneq	ip, #8192	; 0x2000
 4bc:	91020000 	mrsls	r0, (UNDEF: 2)
 4c0:	31501368 	cmpcc	r0, r8, ror #6
 4c4:	02820100 	addeq	r0, r2, #0, 2
 4c8:	0003fc0a 	andeq	pc, r3, sl, lsl #24
 4cc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 4d0:	00325013 	eorseq	r5, r2, r3, lsl r0
 4d4:	0a028301 	beq	a10e0 <startup-0x1ff5ef20>
 4d8:	000003fc 	strdeq	r0, [r0], -ip
 4dc:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
 4e0:	20000f90 	mulcs	r0, r0, pc	; <UNPREDICTABLE>
 4e4:	000000aa 	andeq	r0, r0, sl, lsr #1
 4e8:	0004ff14 	andeq	pc, r4, r4, lsl pc	; <UNPREDICTABLE>
 4ec:	029e0100 	addseq	r0, lr, #0, 2
 4f0:	00052409 	andeq	r2, r5, r9, lsl #8
 4f4:	48910200 	ldmmi	r1, {r9}
 4f8:	0002a714 	andeq	sl, r2, r4, lsl r7
 4fc:	029f0100 	addseq	r0, pc, #0, 2
 500:	00016a09 	andeq	r6, r1, r9, lsl #20
 504:	6f910200 	svcvs	0x00910200
 508:	00100015 	andseq	r0, r0, r5, lsl r0
 50c:	00003020 	andeq	r3, r0, r0, lsr #32
 510:	02751400 	rsbseq	r1, r5, #0, 8
 514:	ac010000 	stcge	0, cr0, [r1], {-0}
 518:	016a0a02 	cmneq	sl, r2, lsl #20
 51c:	91020000 	mrsls	r0, (UNDEF: 2)
 520:	0000005e 	andeq	r0, r0, lr, asr r0
 524:	00016a08 	andeq	r6, r1, r8, lsl #20
 528:	00053400 	andeq	r3, r5, r0, lsl #8
 52c:	00310900 	eorseq	r0, r1, r0, lsl #18
 530:	00120000 	andseq	r0, r2, r0
 534:	00053312 	andeq	r3, r5, r2, lsl r3
 538:	02650100 	rsbeq	r0, r5, #0, 2
 53c:	000dd406 	andeq	sp, sp, r6, lsl #8
 540:	0000b820 	andeq	fp, r0, r0, lsr #16
 544:	7a9c0100 	bvc	fe70094c <Player2+0xde6ff7dc>
 548:	16000005 	strne	r0, [r0], -r5
 54c:	00000100 	andeq	r0, r0, r0, lsl #2
 550:	18026501 	stmdane	r2, {r0, r8, sl, sp, lr}
 554:	0000037c 	andeq	r0, r0, ip, ror r3
 558:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
 55c:	01003150 	tsteq	r0, r0, asr r1
 560:	fc260265 	stc2	2, cr0, [r6], #-404	; 0xfffffe6c
 564:	02000003 	andeq	r0, r0, #3
 568:	50177091 	mulspl	r7, r1, r0
 56c:	65010032 	strvs	r0, [r1, #-50]	; 0xffffffce
 570:	03fc3202 	mvnseq	r3, #536870912	; 0x20000000
 574:	91020000 	mrsls	r0, (UNDEF: 2)
 578:	ab18006c 	blge	600730 <startup-0x1f9ff8d0>
 57c:	01000003 	tsteq	r0, r3
 580:	9a060259 	bls	180eec <startup-0x1fe7f114>
 584:	3a20000d 	bcc	8005c0 <startup-0x1f7ffa40>
 588:	01000000 	mrseq	r0, (UNDEF: 0)
 58c:	0524129c 	streq	r1, [r4, #-668]!	; 0xfffffd64
 590:	4e010000 	cdpmi	0, 0, cr0, cr1, cr0, {0}
 594:	0d440602 	stcleq	6, cr0, [r4, #-8]
 598:	00562000 	subseq	r2, r6, r0
 59c:	9c010000 	stcls	0, cr0, [r1], {-0}
 5a0:	000005d1 	ldrdeq	r0, [r0], -r1
 5a4:	0001cf16 	andeq	ip, r1, r6, lsl pc
 5a8:	024e0100 	subeq	r0, lr, #0, 2
 5ac:	0001641a 	andeq	r6, r1, sl, lsl r4
 5b0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5b4:	01007817 	tsteq	r0, r7, lsl r8
 5b8:	d12e024e 			; <UNDEFINED> instruction: 0xd12e024e
 5bc:	02000005 	andeq	r0, r0, #5
 5c0:	69177391 	ldmdbvs	r7, {r0, r4, r7, r8, r9, ip, sp, lr}
 5c4:	024e0100 	subeq	r0, lr, #0, 2
 5c8:	00016a36 	andeq	r6, r1, r6, lsr sl
 5cc:	72910200 	addsvc	r0, r1, #0, 4
 5d0:	06010300 	streq	r0, [r1], -r0, lsl #6
 5d4:	000002df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
 5d8:	00016519 	andeq	r6, r1, r9, lsl r5
 5dc:	024a0100 	subeq	r0, sl, #0, 2
 5e0:	000d3406 	andeq	r3, sp, r6, lsl #8
 5e4:	00001020 	andeq	r1, r0, r0, lsr #32
 5e8:	1a9c0100 	bne	fe7009f0 <Player2+0xde6ff880>
 5ec:	0000050b 	andeq	r0, r0, fp, lsl #10
 5f0:	0f024101 	svceq	0x00024101
 5f4:	00000057 	andeq	r0, r0, r7, asr r0
 5f8:	20000cf4 	strdcs	r0, [r0], -r4
 5fc:	00000040 	andeq	r0, r0, r0, asr #32
 600:	06169c01 	ldreq	r9, [r6], -r1, lsl #24
 604:	72130000 	andsvc	r0, r3, #0
 608:	42010076 	andmi	r0, r1, #118	; 0x76
 60c:	00571002 	subseq	r1, r7, r2
 610:	91020000 	mrsls	r0, (UNDEF: 2)
 614:	d61a0077 			; <UNDEFINED> instruction: 0xd61a0077
 618:	01000004 	tsteq	r0, r4
 61c:	570f0239 	smladxpl	pc, r9, r2, r0	; <UNPREDICTABLE>
 620:	b4000000 	strlt	r0, [r0], #-0
 624:	4020000c 	eormi	r0, r0, ip
 628:	01000000 	mrseq	r0, (UNDEF: 0)
 62c:	0006409c 	muleq	r6, ip, r0
 630:	00721300 	rsbseq	r1, r2, r0, lsl #6
 634:	10023d01 	andne	r3, r2, r1, lsl #26
 638:	00000057 	andeq	r0, r0, r7, asr r0
 63c:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 640:	0004111a 	andeq	r1, r4, sl, lsl r1
 644:	02310100 	eorseq	r0, r1, #0, 2
 648:	0000570f 	andeq	r5, r0, pc, lsl #14
 64c:	000c8000 	andeq	r8, ip, r0
 650:	00003420 	andeq	r3, r0, r0, lsr #8
 654:	6a9c0100 	bvs	fe700a5c <Player2+0xde6ff8ec>
 658:	13000006 	movwne	r0, #6
 65c:	35010072 	strcc	r0, [r1, #-114]	; 0xffffff8e
 660:	00571002 	subseq	r1, r7, r2
 664:	91020000 	mrsls	r0, (UNDEF: 2)
 668:	34120077 	ldrcc	r0, [r2], #-119	; 0xffffff89
 66c:	01000004 	tsteq	r0, r4
 670:	5606022c 	strpl	r0, [r6], -ip, lsr #4
 674:	2a20000c 	bcs	8006ac <startup-0x1f7ff954>
 678:	01000000 	mrseq	r0, (UNDEF: 0)
 67c:	0006929c 	muleq	r6, ip, r2
 680:	02d81600 	sbcseq	r1, r8, #0, 12
 684:	2c010000 	stccs	0, cr0, [r1], {-0}
 688:	00572502 	subseq	r2, r7, r2, lsl #10
 68c:	91020000 	mrsls	r0, (UNDEF: 2)
 690:	96120077 			; <UNDEFINED> instruction: 0x96120077
 694:	01000004 	tsteq	r0, r4
 698:	2c060227 	sfmcs	f0, 4, [r6], {39}	; 0x27
 69c:	2a20000c 	bcs	8006d4 <startup-0x1f7ff92c>
 6a0:	01000000 	mrseq	r0, (UNDEF: 0)
 6a4:	0006ba9c 	muleq	r6, ip, sl
 6a8:	011b1600 	tsteq	fp, r0, lsl #12
 6ac:	27010000 	strcs	r0, [r1, -r0]
 6b0:	00572402 	subseq	r2, r7, r2, lsl #8
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	e8120077 	ldmda	r2, {r0, r1, r2, r4, r5, r6}
 6bc:	01000004 	tsteq	r0, r4
 6c0:	fc060221 	stc2	2, cr0, [r6], {33}	; 0x21
 6c4:	3020000b 	eorcc	r0, r0, fp
 6c8:	01000000 	mrseq	r0, (UNDEF: 0)
 6cc:	0006e09c 	muleq	r6, ip, r0
 6d0:	00631700 	rsbeq	r1, r3, r0, lsl #14
 6d4:	2b022101 	blcs	88ae0 <startup-0x1ff77520>
 6d8:	00000057 	andeq	r0, r0, r7, asr r0
 6dc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6e0:	0002b61b 	andeq	fp, r2, fp, lsl r6
 6e4:	021a0100 	andseq	r0, sl, #0, 2
 6e8:	000bb406 	andeq	fp, fp, r6, lsl #8
 6ec:	00004820 	andeq	r4, r0, r0, lsr #16
 6f0:	149c0100 	ldrne	r0, [ip], #256	; 0x100
 6f4:	17000007 	strne	r0, [r0, -r7]
 6f8:	1a010078 	bne	408e0 <startup-0x1ffbf720>
 6fc:	00572a02 	subseq	r2, r7, r2, lsl #20
 700:	91020000 	mrsls	r0, (UNDEF: 2)
 704:	0063136f 	rsbeq	r1, r3, pc, ror #6
 708:	10021b01 	andne	r1, r2, r1, lsl #22
 70c:	00000057 	andeq	r0, r0, r7, asr r0
 710:	00779102 	rsbseq	r9, r7, r2, lsl #2
 714:	00004f1b 	andeq	r4, r0, fp, lsl pc
 718:	02140100 	andseq	r0, r4, #0, 2
 71c:	000b7206 	andeq	r7, fp, r6, lsl #4
 720:	00004220 	andeq	r4, r0, r0, lsr #4
 724:	489c0100 	ldmmi	ip, {r8}
 728:	17000007 	strne	r0, [r0, -r7]
 72c:	14010078 	strne	r0, [r1], #-120	; 0xffffff88
 730:	00572802 	subseq	r2, r7, r2, lsl #16
 734:	91020000 	mrsls	r0, (UNDEF: 2)
 738:	0063136f 	rsbeq	r1, r3, pc, ror #6
 73c:	10021501 	andne	r1, r2, r1, lsl #10
 740:	00000057 	andeq	r0, r0, r7, asr r0
 744:	00779102 	rsbseq	r9, r7, r2, lsl #2
 748:	00018712 	andeq	r8, r1, r2, lsl r7
 74c:	020d0100 	andeq	r0, sp, #0, 2
 750:	000b3606 	andeq	r3, fp, r6, lsl #12
 754:	00003c20 	andeq	r3, r0, r0, lsr #24
 758:	7d9c0100 	ldfvcs	f0, [ip]
 75c:	17000007 	strne	r0, [r0, -r7]
 760:	0d010063 	stceq	0, cr0, [r1, #-396]	; 0xfffffe74
 764:	00572502 	subseq	r2, r7, r2, lsl #10
 768:	91020000 	mrsls	r0, (UNDEF: 2)
 76c:	04341c77 	ldrteq	r1, [r4], #-3191	; 0xfffff389
 770:	10010000 	andne	r0, r1, r0
 774:	01e20202 	mvneq	r0, r2, lsl #4
 778:	001d0000 	andseq	r0, sp, r0
 77c:	01c21200 	biceq	r1, r2, r0, lsl #4
 780:	06010000 	streq	r0, [r1], -r0
 784:	0afe0602 	beq	fff81f94 <Player2+0xdff80e24>
 788:	00382000 	eorseq	r2, r8, r0
 78c:	9c010000 	stcls	0, cr0, [r1], {-0}
 790:	000007c1 	andeq	r0, r0, r1, asr #15
 794:	01007817 	tsteq	r0, r7, lsl r8
 798:	e2170206 	ands	r0, r7, #1610612736	; 0x60000000
 79c:	02000001 	andeq	r0, r0, #1
 7a0:	79176c91 	ldmdbvc	r7, {r0, r4, r7, sl, fp, sp, lr}
 7a4:	02060100 	andeq	r0, r6, #0, 2
 7a8:	0001e21e 	andeq	lr, r1, lr, lsl r2
 7ac:	68910200 	ldmvs	r1, {r9}
 7b0:	00031d14 	andeq	r1, r3, r4, lsl sp
 7b4:	02070100 	andeq	r0, r7, #0, 2
 7b8:	0001e206 	andeq	lr, r1, r6, lsl #4
 7bc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 7c0:	056c1900 	strbeq	r1, [ip, #-2304]!	; 0xfffff700
 7c4:	fc010000 	stc2	0, cr0, [r1], {-0}
 7c8:	0ab80601 	beq	fee01fd4 <Player2+0xdee00e64>
 7cc:	00462000 	subeq	r2, r6, r0
 7d0:	9c010000 	stcls	0, cr0, [r1], {-0}
 7d4:	00054d1b 	andeq	r4, r5, fp, lsl sp
 7d8:	01f40100 	mvnseq	r0, r0, lsl #2
 7dc:	000a8006 	andeq	r8, sl, r6
 7e0:	00003820 	andeq	r3, r0, r0, lsr #16
 7e4:	fa9c0100 	blx	fe700bec <Player2+0xde6ffa7c>
 7e8:	17000007 	strne	r0, [r0, -r7]
 7ec:	f4010063 	vst4.16	{d0-d3}, [r1 :128], r3
 7f0:	00571c01 	subseq	r1, r7, r1, lsl #24
 7f4:	91020000 	mrsls	r0, (UNDEF: 2)
 7f8:	b41e0077 	ldrlt	r0, [lr], #-119	; 0xffffff89
 7fc:	01000003 	tsteq	r0, r3
 800:	e20501eb 	and	r0, r5, #-1073741766	; 0xc000003a
 804:	2c000001 	stccs	0, cr0, [r0], {1}
 808:	5420000a 	strtpl	r0, [r0], #-10
 80c:	01000000 	mrseq	r0, (UNDEF: 0)
 810:	0008249c 	muleq	r8, ip, r4
 814:	00631300 	rsbeq	r1, r3, r0, lsl #6
 818:	1001ec01 	andne	lr, r1, r1, lsl #24
 81c:	00000057 	andeq	r0, r0, r7, asr r0
 820:	00779102 	rsbseq	r9, r7, r2, lsl #2
 824:	00029b1b 	andeq	r9, r2, fp, lsl fp
 828:	01e20100 	mvneq	r0, r0, lsl #2
 82c:	0009d406 	andeq	sp, r9, r6, lsl #8
 830:	00005820 	andeq	r5, r0, r0, lsr #16
 834:	4c9c0100 	ldfmis	f0, [ip], {0}
 838:	17000008 	strne	r0, [r0, -r8]
 83c:	00776f72 	rsbseq	r6, r7, r2, ror pc
 840:	1701e201 	strne	lr, [r1, -r1, lsl #4]
 844:	0000016a 	andeq	r0, r0, sl, ror #2
 848:	00779102 	rsbseq	r9, r7, r2, lsl #2
 84c:	00027c1a 	andeq	r7, r2, sl, lsl ip
 850:	01d60100 	bicseq	r0, r6, r0, lsl #2
 854:	0000570f 	andeq	r5, r0, pc, lsl #14
 858:	00097a00 	andeq	r7, r9, r0, lsl #20
 85c:	00005a20 	andeq	r5, r0, r0, lsr #20
 860:	d19c0100 	orrsle	r0, ip, r0, lsl #2
 864:	13000008 	movwne	r0, #8
 868:	00776f72 	rsbseq	r6, r7, r2, ror pc
 86c:	0601d701 	streq	sp, [r1], -r1, lsl #14
 870:	000001e2 	andeq	r0, r0, r2, ror #3
 874:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 878:	00000012 	andeq	r0, r0, r2, lsl r0
 87c:	0b01d701 	bleq	76488 <startup-0x1ff89b78>
 880:	000001e2 	andeq	r0, r0, r2, ror #3
 884:	1f709102 	svcne	0x00709102
 888:	0000029b 	muleq	r0, fp, r2
 88c:	0301d901 	movweq	sp, #6401	; 0x1901
 890:	000001e2 	andeq	r0, r0, r2, ror #3
 894:	0000089a 	muleq	r0, sl, r8
 898:	8615001d 			; <UNDEFINED> instruction: 0x8615001d
 89c:	2e200009 	cdpcs	0, 2, cr0, cr0, cr9, {0}
 8a0:	1f000000 	svcne	0x00000000
 8a4:	0000029b 	muleq	r0, fp, r2
 8a8:	0301d901 	movweq	sp, #6401	; 0x1901
 8ac:	000001e2 	andeq	r0, r0, r2, ror #3
 8b0:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
 8b4:	8e15001d 	mrchi	0, 0, r0, cr5, cr13, {0}
 8b8:	26200009 	strtcs	r0, [r0], -r9
 8bc:	1c000000 	stcne	0, cr0, [r0], {-0}
 8c0:	000003b4 			; <UNDEFINED> instruction: 0x000003b4
 8c4:	1001da01 	andne	sp, r1, r1, lsl #20
 8c8:	000001e2 	andeq	r0, r0, r2, ror #3
 8cc:	0000001d 	andeq	r0, r0, sp, lsl r0
 8d0:	028f1200 	addeq	r1, pc, #0, 4
 8d4:	cd010000 	stcgt	0, cr0, [r1, #-0]
 8d8:	09640601 	stmdbeq	r4!, {r0, r9, sl}^
 8dc:	00162000 	andseq	r2, r6, r0
 8e0:	9c010000 	stcls	0, cr0, [r1], {-0}
 8e4:	000008f8 	strdeq	r0, [r0], -r8
 8e8:	00736d17 	rsbseq	r6, r3, r7, lsl sp
 8ec:	2001cd01 	andcs	ip, r1, r1, lsl #26
 8f0:	00000031 	andeq	r0, r0, r1, lsr r0
 8f4:	00749102 	rsbseq	r9, r4, r2, lsl #2
 8f8:	00012312 	andeq	r2, r1, r2, lsl r3
 8fc:	01c50100 	biceq	r0, r5, r0, lsl #2
 900:	00092e06 	andeq	r2, r9, r6, lsl #28
 904:	00003620 	andeq	r3, r0, r0, lsr #12
 908:	379c0100 	ldrcc	r0, [ip, r0, lsl #2]
 90c:	17000009 	strne	r0, [r0, -r9]
 910:	01007375 	tsteq	r0, r5, ror r3
 914:	312001c5 	smlawtcc	r0, r5, r1, r0
 918:	02000000 	andeq	r0, r0, #0
 91c:	36156c91 			; <UNDEFINED> instruction: 0x36156c91
 920:	24200009 	strtcs	r0, [r0], #-9
 924:	13000000 	movwne	r0, #0
 928:	c6010069 	strgt	r0, [r1], -r9, rrx
 92c:	01e20b01 	mvneq	r0, r1, lsl #22
 930:	91020000 	mrsls	r0, (UNDEF: 2)
 934:	19000074 	stmdbne	r0, {r2, r4, r5, r6}
 938:	0000033f 	andeq	r0, r0, pc, lsr r3
 93c:	0601c101 	streq	ip, [r1], -r1, lsl #2
 940:	2000091c 	andcs	r0, r0, ip, lsl r9
 944:	00000012 	andeq	r0, r0, r2, lsl r0
 948:	8a189c01 	bhi	627954 <startup-0x1f9d86ac>
 94c:	01000004 	tsteq	r0, r4
 950:	d80601b9 	stmdale	r6, {r0, r3, r4, r5, r7, r8}
 954:	44200008 	strtmi	r0, [r0], #-8
 958:	01000000 	mrseq	r0, (UNDEF: 0)
 95c:	0268129c 	rsbeq	r1, r8, #156, 4	; 0xc0000009
 960:	a7010000 	strge	r0, [r1, -r0]
 964:	086a0601 	stmdaeq	sl!, {r0, r9, sl}^
 968:	006e2000 	rsbeq	r2, lr, r0
 96c:	9c010000 	stcls	0, cr0, [r1], {-0}
 970:	00000983 	andeq	r0, r0, r3, lsl #19
 974:	01004f17 	tsteq	r0, r7, lsl pc
 978:	7c1b01a7 	ldfvcs	f0, [fp], {167}	; 0xa7
 97c:	02000003 	andeq	r0, r0, #3
 980:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
 984:	000001af 	andeq	r0, r0, pc, lsr #3
 988:	0601a001 	streq	sl, [r1], -r1
 98c:	20000824 	andcs	r0, r0, r4, lsr #16
 990:	00000046 	andeq	r0, r0, r6, asr #32
 994:	09a99c01 	stmibeq	r9!, {r0, sl, fp, ip, pc}
 998:	4f170000 	svcmi	0x00170000
 99c:	01a00100 	lsleq	r0, r0, #2
 9a0:	00037c18 	andeq	r7, r3, r8, lsl ip
 9a4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 9a8:	00f31b00 	rscseq	r1, r3, r0, lsl #22
 9ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 9b0:	08040601 	stmdaeq	r4, {r0, r9, sl}
 9b4:	00202000 	eoreq	r2, r0, r0
 9b8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9bc:	000009eb 	andeq	r0, r0, fp, ror #19
 9c0:	01004f17 	tsteq	r0, r7, lsl pc
 9c4:	7c16019c 	ldfvcs	f0, [r6], {156}	; 0x9c
 9c8:	02000003 	andeq	r0, r0, #3
 9cc:	78177491 	ldmdavc	r7, {r0, r4, r7, sl, ip, sp, lr}
 9d0:	019c0100 	orrseq	r0, ip, r0, lsl #2
 9d4:	0001e21d 	andeq	lr, r1, sp, lsl r2
 9d8:	70910200 	addsvc	r0, r1, r0, lsl #4
 9dc:	01007917 	tsteq	r0, r7, lsl r9
 9e0:	e224019c 	eor	r0, r4, #156, 2	; 0x27
 9e4:	02000001 	andeq	r0, r0, #1
 9e8:	12006c91 	andne	r6, r0, #37120	; 0x9100
 9ec:	0000046f 	andeq	r0, r0, pc, ror #8
 9f0:	06019701 	streq	r9, [r1], -r1, lsl #14
 9f4:	200007ac 	andcs	r0, r0, ip, lsr #15
 9f8:	00000058 	andeq	r0, r0, r8, asr r0
 9fc:	0a299c01 	beq	a67a08 <startup-0x1f5985f8>
 a00:	4f170000 	svcmi	0x00170000
 a04:	01970100 	orrseq	r0, r7, r0, lsl #2
 a08:	00037c1b 	andeq	r7, r3, fp, lsl ip
 a0c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 a10:	0007b415 	andeq	fp, r7, r5, lsl r4
 a14:	00004620 	andeq	r4, r0, r0, lsr #12
 a18:	00691300 	rsbeq	r1, r9, r0, lsl #6
 a1c:	0a019801 	beq	66a28 <startup-0x1ff995d8>
 a20:	000001e2 	andeq	r0, r0, r2, ror #3
 a24:	00749102 	rsbseq	r9, r4, r2, lsl #2
 a28:	034b1200 	movteq	r1, #45568	; 0xb200
 a2c:	92010000 	andls	r0, r1, #0
 a30:	07540601 	ldrbeq	r0, [r4, -r1, lsl #12]
 a34:	00582000 	subseq	r2, r8, r0
 a38:	9c010000 	stcls	0, cr0, [r1], {-0}
 a3c:	00000a67 	andeq	r0, r0, r7, ror #20
 a40:	01004f17 	tsteq	r0, r7, lsl pc
 a44:	7c1a0192 	ldfvcs	f0, [sl], {146}	; 0x92
 a48:	02000003 	andeq	r0, r0, #3
 a4c:	5c156c91 	ldcpl	12, cr6, [r5], {145}	; 0x91
 a50:	46200007 	strtmi	r0, [r0], -r7
 a54:	13000000 	movwne	r0, #0
 a58:	93010069 	movwls	r0, #4201	; 0x1069
 a5c:	01e20a01 	mvneq	r0, r1, lsl #20
 a60:	91020000 	mrsls	r0, (UNDEF: 2)
 a64:	1b000074 	blne	c3c <startup-0x1ffff3c4>
 a68:	00000325 	andeq	r0, r0, r5, lsr #6
 a6c:	06018e01 	streq	r8, [r1], -r1, lsl #28
 a70:	20000734 	andcs	r0, r0, r4, lsr r7
 a74:	00000020 	andeq	r0, r0, r0, lsr #32
 a78:	0aad9c01 	beq	feb67a84 <Player2+0xdeb66914>
 a7c:	4f170000 	svcmi	0x00170000
 a80:	018e0100 	orreq	r0, lr, r0, lsl #2
 a84:	00037c1f 	andeq	r7, r3, pc, lsl ip
 a88:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 a8c:	0002af16 	andeq	sl, r2, r6, lsl pc
 a90:	018e0100 	orreq	r0, lr, r0, lsl #2
 a94:	0001e226 	andeq	lr, r1, r6, lsr #4
 a98:	70910200 	addsvc	r0, r1, r0, lsl #4
 a9c:	00000016 	andeq	r0, r0, r6, lsl r0
 aa0:	018e0100 	orreq	r0, lr, r0, lsl #2
 aa4:	0001e232 	andeq	lr, r1, r2, lsr r2
 aa8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 aac:	00de1200 	sbcseq	r1, lr, r0, lsl #4
 ab0:	6b010000 	blvs	40ab8 <startup-0x1ffbf548>
 ab4:	05780601 	ldrbeq	r0, [r8, #-1537]!	; 0xfffff9ff
 ab8:	01bc2000 			; <UNDEFINED> instruction: 0x01bc2000
 abc:	9c010000 	stcls	0, cr0, [r1], {-0}
 ac0:	00000b53 	andeq	r0, r0, r3, asr fp
 ac4:	01004f17 	tsteq	r0, r7, lsl pc
 ac8:	7c23016b 	stfvcs	f0, [r3], #-428	; 0xfffffe54
 acc:	02000003 	andeq	r0, r0, #3
 ad0:	88206c91 	stmdahi	r0!, {r0, r4, r7, sl, fp, sp, lr}
 ad4:	44200005 	strtmi	r0, [r0], #-5
 ad8:	14000000 	strne	r0, [r0], #-0
 adc:	1f00000b 	svcne	0x0000000b
 ae0:	00000165 	andeq	r0, r0, r5, ror #2
 ae4:	03016f01 	movweq	r6, #7937	; 0x1f01
 ae8:	000001e2 	andeq	r0, r0, r2, ror #3
 aec:	00000af2 	strdeq	r0, [r0], -r2
 af0:	241f001d 	ldrcs	r0, [pc], #-29	; af8 <startup-0x1ffff508>
 af4:	01000005 	tsteq	r0, r5
 af8:	e2030170 	and	r0, r3, #112, 2
 afc:	05000001 	streq	r0, [r0, #-1]
 b00:	1d00000b 	stcne	0, cr0, [r0, #-44]	; 0xffffffd4
 b04:	028f2100 	addeq	r2, pc, #0, 2
 b08:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
 b0c:	0001e202 	andeq	lr, r1, r2, lsl #4
 b10:	00001d00 	andeq	r1, r0, r0, lsl #26
 b14:	0005d615 	andeq	sp, r5, r5, lsl r6
 b18:	00004420 	andeq	r4, r0, r0, lsr #8
 b1c:	01651f00 	cmneq	r5, r0, lsl #30
 b20:	6f010000 	svcvs	0x00010000
 b24:	01e20301 	mvneq	r0, r1, lsl #6
 b28:	0b300000 	bleq	c00b30 <startup-0x1f3ff4d0>
 b2c:	001d0000 	andseq	r0, sp, r0
 b30:	0005241f 	andeq	r2, r5, pc, lsl r4
 b34:	01700100 	cmneq	r0, r0, lsl #2
 b38:	0001e203 	andeq	lr, r1, r3, lsl #4
 b3c:	000b4300 	andeq	r4, fp, r0, lsl #6
 b40:	21001d00 	tstcs	r0, r0, lsl #26
 b44:	0000028f 	andeq	r0, r0, pc, lsl #5
 b48:	e202e901 	and	lr, r2, #16384	; 0x4000
 b4c:	1d000001 	stcne	0, cr0, [r0, #-4]
 b50:	12000000 	andne	r0, r0, #0
 b54:	0000000c 	andeq	r0, r0, ip
 b58:	06014601 	streq	r4, [r1], -r1, lsl #12
 b5c:	200003e6 	andcs	r0, r0, r6, ror #7
 b60:	00000192 	muleq	r0, r2, r1
 b64:	0bd59c01 	bleq	ff567b70 <Player2+0xdf566a00>
 b68:	78170000 	ldmdavc	r7, {}	; <UNPREDICTABLE>
 b6c:	01460100 	mrseq	r0, (UNDEF: 86)
 b70:	0001e210 	andeq	lr, r1, r0, lsl r2
 b74:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 b78:	01007917 	tsteq	r0, r7, lsl r9
 b7c:	e2170146 	ands	r0, r7, #-2147483631	; 0x80000011
 b80:	02000001 	andeq	r0, r0, #1
 b84:	73175091 	tstvc	r7, #145	; 0x91
 b88:	01007465 	tsteq	r0, r5, ror #8
 b8c:	e21e0146 	ands	r0, lr, #-2147483631	; 0x80000011
 b90:	02000001 	andeq	r0, r0, #1
 b94:	11144c91 			; <UNDEFINED> instruction: 0x11144c91
 b98:	01000003 	tsteq	r0, r3
 b9c:	4b0a0147 	blmi	2810c0 <startup-0x1fd7ef40>
 ba0:	02000000 	andeq	r0, r0, #0
 ba4:	63136791 	tstvs	r3, #38010880	; 0x2440000
 ba8:	01470100 	mrseq	r0, (UNDEF: 87)
 bac:	00004b10 	andeq	r4, r0, r0, lsl fp
 bb0:	5f910200 	svcpl	0x00910200
 bb4:	00041c14 	andeq	r1, r4, r4, lsl ip
 bb8:	01470100 	mrseq	r0, (UNDEF: 87)
 bbc:	00004b13 	andeq	r4, r0, r3, lsl fp
 bc0:	66910200 	ldrvs	r0, [r1], r0, lsl #4
 bc4:	00001914 	andeq	r1, r0, r4, lsl r9
 bc8:	01480100 	mrseq	r0, (UNDEF: 88)
 bcc:	0001e206 	andeq	lr, r1, r6, lsl #4
 bd0:	60910200 	addsvs	r0, r1, r0, lsl #4
 bd4:	01501200 	cmpeq	r0, r0, lsl #4
 bd8:	3b010000 	blcc	40be0 <startup-0x1ffbf420>
 bdc:	037e0601 	cmneq	lr, #1048576	; 0x100000
 be0:	00682000 	rsbeq	r2, r8, r0
 be4:	9c010000 	stcls	0, cr0, [r1], {-0}
 be8:	00000c09 	andeq	r0, r0, r9, lsl #24
 bec:	01006913 	tsteq	r0, r3, lsl r9
 bf0:	4b0a013c 	blmi	2810e8 <startup-0x1fd7ef18>
 bf4:	02000000 	andeq	r0, r0, #0
 bf8:	6a137791 	bvs	4dea44 <startup-0x1fb215bc>
 bfc:	013c0100 	teqeq	ip, r0, lsl #2
 c00:	00004b0d 	andeq	r4, r0, sp, lsl #22
 c04:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 c08:	001f2200 	andseq	r2, pc, r0, lsl #4
 c0c:	34010000 	strcc	r0, [r1], #-0
 c10:	03380d01 	teqeq	r8, #1, 26	; 0x40
 c14:	00462000 	subeq	r2, r6, r0
 c18:	9c010000 	stcls	0, cr0, [r1], {-0}
 c1c:	00000c41 	andeq	r0, r0, r1, asr #24
 c20:	0002d816 	andeq	sp, r2, r6, lsl r8
 c24:	01340100 	teqeq	r4, r0, lsl #2
 c28:	00004b28 	andeq	r4, r0, r8, lsr #22
 c2c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c30:	00041c16 	andeq	r1, r4, r6, lsl ip
 c34:	01340100 	teqeq	r4, r0, lsl #2
 c38:	00004b36 	andeq	r4, r0, r6, lsr fp
 c3c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 c40:	010d2200 	mrseq	r2, SP_fiq
 c44:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 c48:	02f80d01 	rscseq	r0, r8, #1, 26	; 0x40
 c4c:	00402000 	subeq	r2, r0, r0
 c50:	9c010000 	stcls	0, cr0, [r1], {-0}
 c54:	00000c79 	andeq	r0, r0, r9, ror ip
 c58:	00011b16 	andeq	r1, r1, r6, lsl fp
 c5c:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
 c60:	00004b2b 	andeq	r4, r0, fp, lsr #22
 c64:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 c68:	00041c16 	andeq	r1, r4, r6, lsl ip
 c6c:	012e0100 			; <UNDEFINED> instruction: 0x012e0100
 c70:	00004b3c 	andeq	r4, r0, ip, lsr fp
 c74:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 c78:	02fb2200 	rscseq	r2, fp, #0, 4
 c7c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 c80:	028a0d01 	addeq	r0, sl, #1, 26	; 0x40
 c84:	006e2000 	rsbeq	r2, lr, r0
 c88:	9c010000 	stcls	0, cr0, [r1], {-0}
 c8c:	00000cbf 			; <UNDEFINED> instruction: 0x00000cbf
 c90:	00014a16 	andeq	r4, r1, r6, lsl sl
 c94:	011e0100 	tsteq	lr, r0, lsl #2
 c98:	00004b23 	andeq	r4, r0, r3, lsr #22
 c9c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 ca0:	00041c16 	andeq	r1, r4, r6, lsl ip
 ca4:	011e0100 	tsteq	lr, r0, lsl #2
 ca8:	00004b32 	andeq	r4, r0, r2, lsr fp
 cac:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 cb0:	00033f21 	andeq	r3, r3, r1, lsr #30
 cb4:	02f90100 	rscseq	r0, r9, #0, 2
 cb8:	000001e2 	andeq	r0, r0, r2, ror #3
 cbc:	2300001d 	movwcs	r0, #29
 cc0:	000002cb 	andeq	r0, r0, fp, asr #5
 cc4:	10011a01 	andne	r1, r1, r1, lsl #20
 cc8:	0000004b 	andeq	r0, r0, fp, asr #32
 ccc:	20000260 	andcs	r0, r0, r0, ror #4
 cd0:	0000002a 	andeq	r0, r0, sl, lsr #32
 cd4:	0ceb9c01 	stcleq	12, cr9, [fp], #4
 cd8:	1c160000 	ldcne	0, cr0, [r6], {-0}
 cdc:	01000004 	tsteq	r0, r4
 ce0:	4b2a011a 	blmi	a81150 <startup-0x1f57eeb0>
 ce4:	02000000 	andeq	r0, r0, #0
 ce8:	23007791 	movwcs	r7, #1937	; 0x791
 cec:	00000404 	andeq	r0, r0, r4, lsl #8
 cf0:	10010401 	andne	r0, r1, r1, lsl #8
 cf4:	0000004b 	andeq	r0, r0, fp, asr #32
 cf8:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 cfc:	00000090 	muleq	r0, r0, r0
 d00:	0d339c01 	ldceq	12, cr9, [r3, #-4]!
 d04:	1c160000 	ldcne	0, cr0, [r6], {-0}
 d08:	01000004 	tsteq	r0, r4
 d0c:	4b250104 	blmi	941124 <startup-0x1f6beedc>
 d10:	02000000 	andeq	r0, r0, #0
 d14:	63136f91 	tstvs	r3, #580	; 0x244
 d18:	01050100 	mrseq	r0, (UNDEF: 21)
 d1c:	00004b0a 	andeq	r4, r0, sl, lsl #22
 d20:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 d24:	00033f21 	andeq	r3, r3, r1, lsr #30
 d28:	02f90100 	rscseq	r0, r9, #0, 2
 d2c:	000001e2 	andeq	r0, r0, r2, ror #3
 d30:	2400001d 	strcs	r0, [r0], #-29	; 0xffffffe3
 d34:	0000045c 	andeq	r0, r0, ip, asr r4
 d38:	660df301 	strvs	pc, [sp], -r1, lsl #6
 d3c:	6a200001 	bvs	800d48 <startup-0x1f7ff2b8>
 d40:	01000000 	mrseq	r0, (UNDEF: 0)
 d44:	000d659c 	muleq	sp, ip, r5
 d48:	00632500 	rsbeq	r2, r3, r0, lsl #10
 d4c:	4b0af401 	blmi	2bdd58 <startup-0x1fd422a8>
 d50:	02000000 	andeq	r0, r0, #0
 d54:	3f217791 	svccc	0x00217791
 d58:	01000003 	tsteq	r0, r3
 d5c:	01e202f9 	strdeq	r0, [r2, #41]!	; 0x29
 d60:	001d0000 	andseq	r0, sp, r0
 d64:	00322600 	eorseq	r2, r2, r0, lsl #12
 d68:	e5010000 	str	r0, [r1, #-0]
 d6c:	00010a06 	andeq	r0, r1, r6, lsl #20
 d70:	00005c20 	andeq	r5, r0, r0, lsr #24
 d74:	9c9c0100 	ldflss	f0, [ip], {0}
 d78:	2700000d 	strcs	r0, [r0, -sp]
 d7c:	00000123 	andeq	r0, r0, r3, lsr #2
 d80:	e202e701 	and	lr, r2, #262144	; 0x40000
 d84:	8d000001 	stchi	0, cr0, [r0, #-4]
 d88:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
 d8c:	028f2100 	addeq	r2, pc, #0, 2
 d90:	e9010000 	stmdb	r1, {}	; <UNPREDICTABLE>
 d94:	0001e202 	andeq	lr, r1, r2, lsl #4
 d98:	00001d00 	andeq	r1, r0, r0, lsl #26
 d9c:	0004a624 	andeq	sl, r4, r4, lsr #12
 da0:	0dd30100 	ldfeqe	f0, [r3]
 da4:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
 da8:	0000005a 	andeq	r0, r0, sl, asr r0
 dac:	0dc29c01 	stcleq	12, cr9, [r2, #4]
 db0:	1c280000 	stcne	0, cr0, [r8], #-0
 db4:	01000004 	tsteq	r0, r4
 db8:	004b27d3 	ldrdeq	r2, [fp], #-115	; 0xffffff8d
 dbc:	91020000 	mrsls	r0, (UNDEF: 2)
 dc0:	98290077 	stmdals	r9!, {r0, r1, r2, r4, r5, r6}
 dc4:	01000001 	tsteq	r0, r1
 dc8:	00600dcc 	rsbeq	r0, r0, ip, asr #27
 dcc:	00502000 	subseq	r2, r0, r0
 dd0:	9c010000 	stcls	0, cr0, [r1], {-0}
 dd4:	00000df3 	strdeq	r0, [r0], -r3
 dd8:	0100782a 	tsteq	r0, sl, lsr #16
 ddc:	004b2ccc 	subeq	r2, fp, ip, asr #25
 de0:	91020000 	mrsls	r0, (UNDEF: 2)
 de4:	0063256f 	rsbeq	r2, r3, pc, ror #10
 de8:	4b09cd01 	blmi	2741f4 <startup-0x1fd8be0c>
 dec:	02000000 	andeq	r0, r0, #0
 df0:	29007791 	stmdbcs	r0, {r0, r4, r7, r8, r9, sl, ip, sp, lr}
 df4:	000003bf 			; <UNDEFINED> instruction: 0x000003bf
 df8:	100dc501 	andne	ip, sp, r1, lsl #10
 dfc:	50200000 	eorpl	r0, r0, r0
 e00:	01000000 	mrseq	r0, (UNDEF: 0)
 e04:	000e249c 	muleq	lr, ip, r4
 e08:	00782a00 	rsbseq	r2, r8, r0, lsl #20
 e0c:	4b2ac501 	blmi	ab2218 <startup-0x1f54dde8>
 e10:	02000000 	andeq	r0, r0, #0
 e14:	63256f91 			; <UNDEFINED> instruction: 0x63256f91
 e18:	09c60100 	stmibeq	r6, {r8}^
 e1c:	0000004b 	andeq	r0, r0, fp, asr #32
 e20:	00779102 	rsbseq	r9, r7, r2, lsl #2
 e24:	00053d2b 	andeq	r3, r5, fp, lsr #26
 e28:	06070100 	streq	r0, [r7], -r0, lsl #2
 e2c:	20000000 	andcs	r0, r0, r0
 e30:	0000000c 	andeq	r0, r0, ip
 e34:	Address 0x00000e34 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	24030000 	strcs	r0, [r3], #-0
  24:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  28:	000e030b 	andeq	r0, lr, fp, lsl #6
  2c:	01130400 	tsteq	r3, r0, lsl #8
  30:	0b0b0e03 	bleq	2c3844 <startup-0x1fd3c7bc>
  34:	0b3b0b3a 	bleq	ec2d24 <startup-0x1f13d2dc>
  38:	13010b39 	movwne	r0, #6969	; 0x1b39
  3c:	0d050000 	stceq	0, cr0, [r5, #-0]
  40:	3a0e0300 	bcc	380c48 <startup-0x1fc7f3b8>
  44:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  48:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  4c:	0600000b 	streq	r0, [r0], -fp
  50:	13490035 	movtne	r0, #36917	; 0x9035
  54:	0f070000 	svceq	0x00070000
  58:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  5c:	08000013 	stmdaeq	r0, {r0, r1, r4}
  60:	13490101 	movtne	r0, #37121	; 0x9101
  64:	00001301 	andeq	r1, r0, r1, lsl #6
  68:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  6c:	000b2f13 	andeq	r2, fp, r3, lsl pc
  70:	00340a00 	eorseq	r0, r4, r0, lsl #20
  74:	0b3a0e03 	bleq	e83888 <startup-0x1f17c778>
  78:	0b390b3b 	bleq	e42d6c <startup-0x1f1bd294>
  7c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  80:	00001802 	andeq	r1, r0, r2, lsl #16
  84:	0300340b 	movweq	r3, #1035	; 0x40b
  88:	3b0b3a08 	blcc	2ce8b0 <startup-0x1fd31750>
  8c:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  90:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  94:	0c000018 	stceq	0, cr0, [r0], {24}
  98:	0803000d 	stmdaeq	r3, {r0, r2, r3}
  9c:	0b3b0b3a 	bleq	ec2d8c <startup-0x1f13d274>
  a0:	13490b39 	movtne	r0, #39737	; 0x9b39
  a4:	00000b38 	andeq	r0, r0, r8, lsr fp
  a8:	0b00240d 	bleq	90e4 <startup-0x1fff6f1c>
  ac:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
  b0:	0e000008 	cdpeq	0, 0, cr0, cr0, cr8, {0}
  b4:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  b8:	00001301 	andeq	r1, r0, r1, lsl #6
  bc:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
  c0:	10000013 	andne	r0, r0, r3, lsl r0
  c4:	0e030013 	mcreq	0, 0, r0, cr3, cr3, {0}
  c8:	0000193c 	andeq	r1, r0, ip, lsr r9
  cc:	03003411 	movweq	r3, #1041	; 0x411
  d0:	3b0b3a0e 	blcc	2ce910 <startup-0x1fd316f0>
  d4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  d8:	00180213 	andseq	r0, r8, r3, lsl r2
  dc:	012e1200 			; <UNDEFINED> instruction: 0x012e1200
  e0:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e8:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
  ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  f4:	00130119 	andseq	r0, r3, r9, lsl r1
  f8:	00341300 	eorseq	r1, r4, r0, lsl #6
  fc:	0b3a0803 	bleq	e82110 <startup-0x1f17def0>
 100:	0b39053b 	bleq	e415f4 <startup-0x1f1bea0c>
 104:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 108:	34140000 	ldrcc	r0, [r4], #-0
 10c:	3a0e0300 	bcc	380d14 <startup-0x1fc7f2ec>
 110:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 114:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 118:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 11c:	0111010b 	tsteq	r1, fp, lsl #2
 120:	00000612 	andeq	r0, r0, r2, lsl r6
 124:	03000516 	movweq	r0, #1302	; 0x516
 128:	3b0b3a0e 	blcc	2ce968 <startup-0x1fd31698>
 12c:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 130:	00180213 	andseq	r0, r8, r3, lsl r2
 134:	00051700 	andeq	r1, r5, r0, lsl #14
 138:	0b3a0803 	bleq	e8214c <startup-0x1f17deb4>
 13c:	0b39053b 	bleq	e41630 <startup-0x1f1be9d0>
 140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 144:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
 148:	03193f00 	tsteq	r9, #0, 30
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 154:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 158:	97184006 	ldrls	r4, [r8, -r6]
 15c:	00001942 	andeq	r1, r0, r2, asr #18
 160:	3f002e19 	svccc	0x00002e19
 164:	3a0e0319 	bcc	380dd0 <startup-0x1fc7f230>
 168:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 16c:	1119270b 	tstne	r9, fp, lsl #14
 170:	40061201 	andmi	r1, r6, r1, lsl #4
 174:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 178:	2e1a0000 	cdpcs	0, 1, cr0, cr10, cr0, {0}
 17c:	03193f01 	tsteq	r9, #1, 30
 180:	3b0b3a0e 	blcc	2ce9c0 <startup-0x1fd31640>
 184:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 188:	11134919 	tstne	r3, r9, lsl r9
 18c:	40061201 	andmi	r1, r6, r1, lsl #4
 190:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 194:	00001301 	andeq	r1, r0, r1, lsl #6
 198:	3f012e1b 	svccc	0x00012e1b
 19c:	3a0e0319 	bcc	380e08 <startup-0x1fc7f1f8>
 1a0:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1a4:	1119270b 	tstne	r9, fp, lsl #14
 1a8:	40061201 	andmi	r1, r6, r1, lsl #4
 1ac:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b0:	00001301 	andeq	r1, r0, r1, lsl #6
 1b4:	3f012e1c 	svccc	0x00012e1c
 1b8:	3a0e0319 	bcc	380e24 <startup-0x1fc7f1dc>
 1bc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1c0:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1c4:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
 1c8:	00000018 	andeq	r0, r0, r8, lsl r0
 1cc:	3f012e1e 	svccc	0x00012e1e
 1d0:	3a0e0319 	bcc	380e3c <startup-0x1fc7f1c4>
 1d4:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1dc:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1e0:	97184006 	ldrls	r4, [r8, -r6]
 1e4:	13011942 	movwne	r1, #6466	; 0x1942
 1e8:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1ec:	03193f01 	tsteq	r9, #1, 30
 1f0:	3b0b3a0e 	blcc	2cea30 <startup-0x1fd315d0>
 1f4:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
 1f8:	01193c13 	tsteq	r9, r3, lsl ip
 1fc:	20000013 	andcs	r0, r0, r3, lsl r0
 200:	0111010b 	tsteq	r1, fp, lsl #2
 204:	13010612 	movwne	r0, #5650	; 0x1612
 208:	2e210000 	cdpcs	0, 2, cr0, cr1, cr0, {0}
 20c:	03193f01 	tsteq	r9, #1, 30
 210:	3b0b3a0e 	blcc	2cea50 <startup-0x1fd315b0>
 214:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 218:	00193c13 	andseq	r3, r9, r3, lsl ip
 21c:	012e2200 			; <UNDEFINED> instruction: 0x012e2200
 220:	0b3a0e03 	bleq	e83a34 <startup-0x1f17c5cc>
 224:	0b39053b 	bleq	e41718 <startup-0x1f1be8e8>
 228:	01111927 	tsteq	r1, r7, lsr #18
 22c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 230:	01194296 			; <UNDEFINED> instruction: 0x01194296
 234:	23000013 	movwcs	r0, #19
 238:	0e03012e 	adfeqsp	f0, f3, #0.5
 23c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 240:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 244:	01111349 	tsteq	r1, r9, asr #6
 248:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 24c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 250:	24000013 	strcs	r0, [r0], #-19	; 0xffffffed
 254:	0e03012e 	adfeqsp	f0, f3, #0.5
 258:	0b3b0b3a 	bleq	ec2f48 <startup-0x1f13d0b8>
 25c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 260:	06120111 			; <UNDEFINED> instruction: 0x06120111
 264:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 268:	00130119 	andseq	r0, r3, r9, lsl r1
 26c:	00342500 	eorseq	r2, r4, r0, lsl #10
 270:	0b3a0803 	bleq	e82284 <startup-0x1f17dd7c>
 274:	0b390b3b 	bleq	e42f68 <startup-0x1f1bd098>
 278:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 27c:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
 280:	03193f01 	tsteq	r9, #1, 30
 284:	3b0b3a0e 	blcc	2ceac4 <startup-0x1fd3153c>
 288:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 28c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 290:	96184006 	ldrls	r4, [r8], -r6
 294:	13011942 	movwne	r1, #6466	; 0x1942
 298:	2e270000 	cdpcs	0, 2, cr0, cr7, cr0, {0}
 29c:	03193f01 	tsteq	r9, #1, 30
 2a0:	3b0b3a0e 	blcc	2ceae0 <startup-0x1fd31520>
 2a4:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2a8:	01193c13 	tsteq	r9, r3, lsl ip
 2ac:	28000013 	stmdacs	r0, {r0, r1, r4}
 2b0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 2b4:	0b3b0b3a 	bleq	ec2fa4 <startup-0x1f13d05c>
 2b8:	13490b39 	movtne	r0, #39737	; 0x9b39
 2bc:	00001802 	andeq	r1, r0, r2, lsl #16
 2c0:	03012e29 	movweq	r2, #7721	; 0x1e29
 2c4:	3b0b3a0e 	blcc	2ceb04 <startup-0x1fd314fc>
 2c8:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 2cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2d0:	97184006 	ldrls	r4, [r8, -r6]
 2d4:	13011942 	movwne	r1, #6466	; 0x1942
 2d8:	052a0000 	streq	r0, [sl, #-0]!
 2dc:	3a080300 	bcc	200ee4 <startup-0x1fdff11c>
 2e0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2e4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2e8:	2b000018 	blcs	350 <startup-0x1ffffcb0>
 2ec:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 2f0:	0b3a0e03 	bleq	e83b04 <startup-0x1f17c4fc>
 2f4:	0b390b3b 	bleq	e42fe8 <startup-0x1f1bd018>
 2f8:	01111927 	tsteq	r1, r7, lsr #18
 2fc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 300:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00001048 	andeq	r1, r0, r8, asr #32
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20001058 	andcs	r1, r0, r8, asr r0
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000093b 	andeq	r0, r0, fp, lsr r9
   4:	005b0003 	subseq	r0, fp, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	69766144 	ldmdbvs	r6!, {r2, r6, r8, sp, lr}^
  28:	6f442f64 	svcvs	0x00442f64
  2c:	6f6c6e77 	svcvs	0x006c6e77
  30:	2f736461 	svccs	0x00736461
  34:	30746144 	rsbscc	r6, r4, r4, asr #2
  38:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
  3c:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
  40:	31282072 			; <UNDEFINED> instruction: 0x31282072
  44:	61442f29 	cmpvs	r4, r9, lsr #30
  48:	37313074 			; <UNDEFINED> instruction: 0x37313074
  4c:	73616d2d 	cmnvc	r1, #2880	; 0xb40
  50:	2f726574 	svccs	0x00726574
  54:	474e4f50 	smlsldmi	r4, lr, r0, pc	; <UNPREDICTABLE>
  58:	6f700000 	svcvs	0x00700000
  5c:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
  60:	00000100 	andeq	r0, r0, r0, lsl #2
  64:	00010500 	andeq	r0, r1, r0, lsl #10
  68:	00000205 	andeq	r0, r0, r5, lsl #4
  6c:	13192000 	tstne	r9, #0
  70:	0003025e 	andeq	r0, r3, lr, asr r2
  74:	2d050101 	stfcss	f0, [r5, #-4]
  78:	10020500 	andne	r0, r2, r0, lsl #10
  7c:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  80:	050101c4 	streq	r0, [r1, #-452]	; 0xfffffe3c
  84:	03056805 	movweq	r6, #22533	; 0x5805
  88:	11054b20 	tstne	r5, r0, lsr #22
  8c:	66030567 	strvs	r0, [r3], -r7, ror #10
  90:	05750105 	ldrbeq	r0, [r5, #-261]!	; 0xfffffefb
  94:	01052010 	tsteq	r5, r0, lsl r0
  98:	672f053d 			; <UNDEFINED> instruction: 0x672f053d
  9c:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
  a0:	674b2003 	strbvs	r2, [fp, -r3]
  a4:	05bb0105 	ldreq	r0, [fp, #261]!	; 0x105
  a8:	01052010 	tsteq	r5, r0, lsl r0
  ac:	7532053d 	ldrvc	r0, [r2, #-1341]!	; 0xfffffac3
  b0:	05670205 	strbeq	r0, [r7, #-517]!	; 0xfffffdfb
  b4:	ba100301 	blt	400cc0 <startup-0x1fbff340>
  b8:	72030405 	andvc	r0, r3, #83886080	; 0x5000000
  bc:	3d223d20 	stccc	13, cr3, [r2, #-128]!	; 0xffffff80
  c0:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  c4:	01053d22 	tsteq	r5, r2, lsr #26
  c8:	4b1f0522 	blmi	7c1558 <startup-0x1f83eaa8>
  cc:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; c0 <startup-0x1fffff40>
  d0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  d4:	4b4b4b3d 	blmi	12d2dd0 <startup-0x1ed2d230>
  d8:	01054b4b 	tsteq	r5, fp, asr #22
  dc:	3d26053d 	cfstr32cc	mvfx0, [r6, #-244]!	; 0xffffff0c
  e0:	3d3e0205 	lfmcc	f0, 4, [lr, #-20]!	; 0xffffffec
  e4:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
  e8:	3d3d2f02 	ldccc	15, cr2, [sp, #-8]!
  ec:	3d300305 	ldccc	3, cr0, [r0, #-20]!	; 0xffffffec
  f0:	052f0705 	streq	r0, [pc, #-1797]!	; fffff9f3 <Player2+0xdfffe883>
  f4:	0505200d 	streq	r2, [r5, #-13]
  f8:	4b03052e 	blmi	c15b8 <startup-0x1ff3ea48>
  fc:	2f05053d 	svccs	0x0005053d
 100:	25450305 	strbcs	r0, [r5, #-773]	; 0xfffffcfb
 104:	05220205 	streq	r0, [r2, #-517]!	; 0xfffffdfb
 108:	0105200f 	tsteq	r5, pc
 10c:	9f31052f 	svcls	0x0031052f
 110:	3d680205 	sfmcc	f0, 2, [r8, #-20]!	; 0xffffffec
 114:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 118:	593d2f02 	ldmdbpl	sp!, {r1, r8, r9, sl, fp, sp}
 11c:	06053d2f 	streq	r3, [r5], -pc, lsr #26
 120:	2004052f 	andcs	r0, r4, pc, lsr #10
 124:	3d4b0205 	sfmcc	f0, 2, [fp, #-20]	; 0xffffffec
 128:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 12c:	04052f11 	streq	r2, [r5], #-3857	; 0xfffff0ef
 130:	2103054a 	tstcs	r3, sl, asr #10
 134:	3011053d 	andscc	r0, r1, sp, lsr r5
 138:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 13c:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 140:	01053008 	tsteq	r5, r8
 144:	ad36053d 	cfldr32ge	mvfx0, [r6, #-244]!	; 0xffffff0c
 148:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
 14c:	01055908 	tsteq	r5, r8, lsl #18
 150:	4b3e0567 	blmi	f816f4 <startup-0x1f07e90c>
 154:	05910205 	ldreq	r0, [r1, #517]	; 0x205
 158:	02052012 	andeq	r2, r5, #18
 15c:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 160:	3d10052f 	cfldr32cc	mvfx0, [r0, #-188]	; 0xffffff44
 164:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 168:	053d2103 	ldreq	r2, [sp, #-259]!	; 0xfffffefd
 16c:	04053010 	streq	r3, [r5], #-16
 170:	2103054a 	tstcs	r3, sl, asr #10
 174:	3001053d 	andcc	r0, r1, sp, lsr r5
 178:	05754805 	ldrbeq	r4, [r5, #-2053]!	; 0xfffff7fb
 17c:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 180:	8301053d 	movwhi	r0, #5437	; 0x153d
 184:	054b4205 	strbeq	r4, [fp, #-517]	; 0xfffffdfb
 188:	593d9102 	ldmdbpl	sp!, {r1, r8, ip, pc}
 18c:	01053d3d 	tsteq	r5, sp, lsr sp
 190:	4b210583 	blmi	8417a4 <startup-0x1f7be85c>
 194:	053e0805 	ldreq	r0, [lr, #-2053]!	; 0xfffff7fb
 198:	03053c02 	movweq	r3, #23554	; 0x5c02
 19c:	09059f21 	stmdbeq	r5, {r0, r5, r8, r9, sl, fp, ip, pc}
 1a0:	3c03054b 	cfstr32cc	mvfx0, [r3], {75}	; 0x4b
 1a4:	02000405 	andeq	r0, r0, #83886080	; 0x5000000
 1a8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 1ac:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 1b0:	03054903 	movweq	r4, #22787	; 0x5903
 1b4:	01040200 	mrseq	r0, R12_usr
 1b8:	00150558 	andseq	r0, r5, r8, asr r5
 1bc:	47020402 	strmi	r0, [r2, -r2, lsl #8]
 1c0:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 1c4:	05580104 	ldrbeq	r0, [r8, #-260]	; 0xfffffefc
 1c8:	23055101 	movwcs	r5, #20737	; 0x5101
 1cc:	6904055a 	stmdbvs	r4, {r1, r3, r4, r6, r8, sl}
 1d0:	02000d05 	andeq	r0, r0, #320	; 0x140
 1d4:	054a0204 	strbeq	r0, [sl, #-516]	; 0xfffffdfc
 1d8:	04020018 	streq	r0, [r2], #-24	; 0xffffffe8
 1dc:	25054a04 	strcs	r4, [r5, #-2564]	; 0xfffff5fc
 1e0:	06040200 	streq	r0, [r4], -r0, lsl #4
 1e4:	4b0c054a 	blmi	301714 <startup-0x1fcfe8ec>
 1e8:	052e0805 	streq	r0, [lr, #-2053]!	; 0xfffff7fb
 1ec:	0f05590c 	svceq	0x0005590c
 1f0:	e510052e 	ldr	r0, [r0, #-1326]	; 0xfffffad2
 1f4:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 1f8:	03052110 	movweq	r2, #20752	; 0x5110
 1fc:	2110054a 	tstcs	r0, sl, asr #10
 200:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 204:	03052110 	movweq	r2, #20752	; 0x5110
 208:	2110054a 	tstcs	r0, sl, asr #10
 20c:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 210:	03052110 	movweq	r2, #20752	; 0x5110
 214:	2110054a 	tstcs	r0, sl, asr #10
 218:	054a0305 	strbeq	r0, [sl, #-773]	; 0xfffffcfb
 21c:	03052110 	movweq	r2, #20752	; 0x5110
 220:	2205054a 	andcs	r0, r5, #310378496	; 0x12800000
 224:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 228:	0f056705 	svceq	0x00056705
 22c:	4b05053d 	blmi	141728 <startup-0x1febe8d8>
 230:	054d0e05 	strbeq	r0, [sp, #-3589]	; 0xfffff1fb
 234:	25054b05 	strcs	r4, [r5, #-2821]	; 0xfffff4fb
 238:	5803053e 	stmdapl	r3, {r1, r2, r3, r4, r5, r8, sl}
 23c:	05832605 	streq	r2, [r3, #1541]	; 0x605
 240:	07056603 	streq	r6, [r5, -r3, lsl #12]
 244:	91250575 			; <UNDEFINED> instruction: 0x91250575
 248:	05580305 	ldrbeq	r0, [r8, #-773]	; 0xfffffcfb
 24c:	09057505 	stmdbeq	r5, {r0, r2, r8, sl, ip, sp, lr}
 250:	0305923d 	movweq	r9, #21053	; 0x523d
 254:	03320591 	teqeq	r2, #608174080	; 0x24400000
 258:	0105ac62 	tsteq	r5, r2, ror #24
 25c:	05201f03 	streq	r1, [r0, #-3843]!	; 0xfffff0fd
 260:	06058525 	streq	r8, [r5], -r5, lsr #10
 264:	2e04054c 	cfsh32cs	mvfx0, mvfx4, #44
 268:	052f1b05 	streq	r1, [pc, #-2821]!	; fffff76b <Player2+0xdfffe5fb>
 26c:	12052e23 	andne	r2, r5, #560	; 0x230
 270:	2f030520 	svccs	0x00030520
 274:	052f3005 	streq	r3, [pc, #-5]!	; 277 <startup-0x1ffffd89>
 278:	30052e03 	andcc	r2, r5, r3, lsl #28
 27c:	2e030575 	cfrshl64cs	mvdx3, mvdx5, r0
 280:	05750405 	ldrbeq	r0, [r5, #-1029]!	; 0xfffffbfb
 284:	054b2e03 	strbeq	r2, [fp, #-3587]	; 0xfffff1fd
 288:	3c1a0301 	ldccc	3, cr0, [sl], {1}
 28c:	69030b05 	stmdbvs	r3, {r0, r2, r8, r9, fp}
 290:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 294:	052f1b05 	streq	r1, [pc, #-2821]!	; fffff797 <Player2+0xdfffe627>
 298:	12052e23 	andne	r2, r5, #560	; 0x230
 29c:	2f030520 	svccs	0x00030520
 2a0:	052f3005 	streq	r3, [pc, #-5]!	; 2a3 <startup-0x1ffffd5d>
 2a4:	30052e03 	andcc	r2, r5, r3, lsl #28
 2a8:	2e030575 	cfrshl64cs	mvdx3, mvdx5, r0
 2ac:	05750405 	ldrbeq	r0, [r5, #-1029]!	; 0xfffffbfb
 2b0:	054b2e03 	strbeq	r2, [fp, #-3587]	; 0xfffff1fd
 2b4:	3c110301 	ldccc	3, cr0, [r1], {1}
 2b8:	73030b05 	movwvc	r0, #15109	; 0x3b05
 2bc:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 2c0:	02001a05 	andeq	r1, r0, #20480	; 0x5000
 2c4:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 2c8:	04020032 	streq	r0, [r2], #-50	; 0xffffffce
 2cc:	37052e01 	strcc	r2, [r5, -r1, lsl #28]
 2d0:	01040200 	mrseq	r0, R12_usr
 2d4:	002f052e 	eoreq	r0, pc, lr, lsr #10
 2d8:	20010402 	andcs	r0, r1, r2, lsl #8
 2dc:	02001605 	andeq	r1, r0, #5242880	; 0x500000
 2e0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 2e4:	0d052f10 	stceq	15, cr2, [r5, #-64]	; 0xffffffc0
 2e8:	200b052e 	andcs	r0, fp, lr, lsr #10
 2ec:	2e1c053f 	mrccs	5, 0, r0, cr12, cr15, {1}
 2f0:	052e2205 	streq	r2, [lr, #-517]!	; 0xfffffdfb
 2f4:	09052029 	stmdbeq	r5, {r0, r3, r5, sp}
 2f8:	00370520 	eorseq	r0, r7, r0, lsr #10
 2fc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 300:	02003d05 	andeq	r3, r0, #320	; 0x140
 304:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 308:	04020044 	streq	r0, [r2], #-68	; 0xffffffbc
 30c:	4b052001 	blmi	148318 <startup-0x1feb7ce8>
 310:	01040200 	mrseq	r0, R12_usr
 314:	002d0520 	eoreq	r0, sp, r0, lsr #10
 318:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 31c:	02005605 	andeq	r5, r0, #5242880	; 0x500000
 320:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 324:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 328:	6d052e02 	stcvs	14, cr2, [r5, #-8]
 32c:	02040200 	andeq	r0, r4, #0, 4
 330:	007d052e 	rsbseq	r0, sp, lr, lsr #10
 334:	20020402 	andcs	r0, r2, r2, lsl #8
 338:	00018305 	andeq	r8, r1, r5, lsl #6
 33c:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 340:	00018805 	andeq	r8, r1, r5, lsl #16
 344:	20020402 	andcs	r0, r2, r2, lsl #8
 348:	02007405 	andeq	r7, r0, #83886080	; 0x5000000
 34c:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 350:	02000190 	andeq	r0, r0, #144, 2	; 0x24
 354:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 358:	04020052 	streq	r0, [r2], #-82	; 0xffffffae
 35c:	a7052002 	strge	r2, [r5, -r2]
 360:	04020001 	streq	r0, [r2], #-1
 364:	ad052e03 	stcge	14, cr2, [r5, #-12]
 368:	04020001 	streq	r0, [r2], #-1
 36c:	9e052e03 	cdpls	14, 0, cr2, cr5, cr3, {0}
 370:	04020001 	streq	r0, [r2], #-1
 374:	97052003 	strls	r2, [r5, -r3]
 378:	04020001 	streq	r0, [r2], #-1
 37c:	93052003 	movwls	r2, #20483	; 0x5003
 380:	04020001 	streq	r0, [r2], #-1
 384:	10052e03 	andne	r2, r5, r3, lsl #28
 388:	2e0d052f 	cfsh32cs	mvfx0, mvfx13, #31
 38c:	05200b05 	streq	r0, [r0, #-2821]!	; 0xfffff4fb
 390:	18052f04 	stmdane	r5, {r2, r8, r9, sl, fp, sp}
 394:	2e1e052e 	cfmul64cs	mvdx0, mvdx14, mvdx14
 398:	05200305 	streq	r0, [r0, #-773]!	; 0xfffffcfb
 39c:	1c05770b 	stcne	7, cr7, [r5], {11}
 3a0:	2e22052e 	cfsh64cs	mvdx0, mvdx2, #30
 3a4:	05202905 	streq	r2, [r0, #-2309]!	; 0xfffff6fb
 3a8:	37052009 	strcc	r2, [r5, -r9]
 3ac:	01040200 	mrseq	r0, R12_usr
 3b0:	003d052e 	eorseq	r0, sp, lr, lsr #10
 3b4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3b8:	02004405 	andeq	r4, r0, #83886080	; 0x5000000
 3bc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3c0:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 3c4:	2d052001 	stccs	0, cr2, [r5, #-4]
 3c8:	01040200 	mrseq	r0, R12_usr
 3cc:	0056052e 	subseq	r0, r6, lr, lsr #10
 3d0:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 3d4:	02006705 	andeq	r6, r0, #1310720	; 0x140000
 3d8:	052e0204 	streq	r0, [lr, #-516]!	; 0xfffffdfc
 3dc:	0402006d 	streq	r0, [r2], #-109	; 0xffffff93
 3e0:	7d052e02 	stcvc	14, cr2, [r5, #-8]
 3e4:	02040200 	andeq	r0, r4, #0, 4
 3e8:	01830520 	orreq	r0, r3, r0, lsr #10
 3ec:	02040200 	andeq	r0, r4, #0, 4
 3f0:	0188052e 	orreq	r0, r8, lr, lsr #10
 3f4:	02040200 	andeq	r0, r4, #0, 4
 3f8:	00740520 	rsbseq	r0, r4, r0, lsr #10
 3fc:	20020402 	andcs	r0, r2, r2, lsl #8
 400:	00019005 	andeq	r9, r1, r5
 404:	20020402 	andcs	r0, r2, r2, lsl #8
 408:	02005205 	andeq	r5, r0, #1342177280	; 0x50000000
 40c:	05200204 	streq	r0, [r0, #-516]!	; 0xfffffdfc
 410:	020001a7 	andeq	r0, r0, #-1073741783	; 0xc0000029
 414:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 418:	020001ad 	andeq	r0, r0, #1073741867	; 0x4000002b
 41c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 420:	0200019e 	andeq	r0, r0, #-2147483609	; 0x80000027
 424:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 428:	02000197 	andeq	r0, r0, #-1073741787	; 0xc0000025
 42c:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 430:	02000193 	andeq	r0, r0, #-1073741788	; 0xc0000024
 434:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 438:	0d052f10 	stceq	15, cr2, [r5, #-64]	; 0xffffffc0
 43c:	200b052e 	andcs	r0, fp, lr, lsr #10
 440:	052f0405 	streq	r0, [pc, #-1029]!	; 43 <startup-0x1fffffbd>
 444:	1e052e18 	mcrne	14, 0, r2, cr5, cr8, {0}
 448:	2003052e 	andcs	r0, r3, lr, lsr #10
 44c:	05680105 	strbeq	r0, [r8, #-261]!	; 0xfffffefb
 450:	0a05d739 	beq	17613c <startup-0x1fe89ec4>
 454:	01053d67 	tsteq	r5, r7, ror #26
 458:	4b1c053d 	blmi	701954 <startup-0x1f8fe6ac>
 45c:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 460:	0a052e02 	beq	14bc70 <startup-0x1feb4390>
 464:	03040200 	movweq	r0, #16896	; 0x4200
 468:	00140521 	andseq	r0, r4, r1, lsr #10
 46c:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 470:	02002005 	andeq	r2, r0, #5
 474:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 478:	04020003 	streq	r0, [r2], #-3
 47c:	25056603 	strcs	r6, [r5, #-1539]	; 0xfffff9fd
 480:	03040200 	movweq	r0, #16896	; 0x4200
 484:	002f0520 	eoreq	r0, pc, r0, lsr #10
 488:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 48c:	02003b05 	andeq	r3, r0, #5120	; 0x1400
 490:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 494:	04020003 	streq	r0, [r2], #-3
 498:	22056603 	andcs	r6, r5, #3145728	; 0x300000
 49c:	03040200 	movweq	r0, #16896	; 0x4200
 4a0:	00020557 	andeq	r0, r2, r7, asr r5
 4a4:	3c010402 	cfstrscc	mvf0, [r1], {2}
 4a8:	053f0105 	ldreq	r0, [pc, #-261]!	; 3ab <startup-0x1ffffc55>
 4ac:	0a05591d 	beq	156928 <startup-0x1fea96d8>
 4b0:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 4b4:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 4b8:	05210304 	streq	r0, [r1, #-772]!	; 0xfffffcfc
 4bc:	04020014 	streq	r0, [r2], #-20	; 0xffffffec
 4c0:	20052e03 	andcs	r2, r5, r3, lsl #28
 4c4:	03040200 	movweq	r0, #16896	; 0x4200
 4c8:	0003052e 	andeq	r0, r3, lr, lsr #10
 4cc:	66030402 	strvs	r0, [r3], -r2, lsl #8
 4d0:	02002505 	andeq	r2, r0, #20971520	; 0x1400000
 4d4:	05200304 	streq	r0, [r0, #-772]!	; 0xfffffcfc
 4d8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 4dc:	3b052e03 	blcc	14bcf0 <startup-0x1feb4310>
 4e0:	03040200 	movweq	r0, #16896	; 0x4200
 4e4:	0003052e 	andeq	r0, r3, lr, lsr #10
 4e8:	66030402 	strvs	r0, [r3], -r2, lsl #8
 4ec:	02002205 	andeq	r2, r0, #1342177280	; 0x50000000
 4f0:	05570304 	ldrbeq	r0, [r7, #-772]	; 0xfffffcfc
 4f4:	04020002 	streq	r0, [r2], #-2
 4f8:	01053c01 	tsteq	r5, r1, lsl #24
 4fc:	5926053f 	stmdbpl	r6!, {r0, r1, r2, r3, r4, r5, r8, sl}
 500:	3d670a05 	vstmdbcc	r7!, {s1-s5}
 504:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 508:	02054b1a 	andeq	r4, r5, #26624	; 0x6800
 50c:	4b03054b 	blmi	c1a40 <startup-0x1ff3e5c0>
 510:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 514:	0e053d0a 	cdpeq	13, 0, cr3, cr5, cr10, {0}
 518:	2e0a052e 	cfsh32cs	mvfx0, mvfx10, #30
 51c:	2e0e053d 	mcrcs	5, 0, r0, cr14, cr13, {1}
 520:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 524:	01053d02 	tsteq	r5, r2, lsl #26
 528:	4b1d054b 	blmi	741a5c <startup-0x1f8be5a4>
 52c:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 530:	04054c06 	streq	r4, [r5], #-3078	; 0xfffff3fa
 534:	0015052e 	andseq	r0, r5, lr, lsr #10
 538:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 53c:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 540:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 544:	0f052f0b 	svceq	0x00052f0b
 548:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
 54c:	2e22054c 	cfsh64cs	mvdx0, mvdx2, #44
 550:	052e2705 	streq	r2, [lr, #-1797]!	; 0xfffff8fb
 554:	0905202e 	stmdbeq	r5, {r1, r2, r3, r5, sp}
 558:	0035052e 	eorseq	r0, r5, lr, lsr #10
 55c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 560:	02003105 	andeq	r3, r0, #1073741825	; 0x40000001
 564:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 568:	0f052f0b 	svceq	0x00052f0b
 56c:	2e0b052e 	cfsh32cs	mvfx0, mvfx11, #30
 570:	05410a05 	strbeq	r0, [r1, #-2565]	; 0xfffff5fb
 574:	01053d02 	tsteq	r5, r2, lsl #26
 578:	4d1b054c 	cfldr32mi	mvfx0, [fp, #-304]	; 0xfffffed0
 57c:	052f0305 	streq	r0, [pc, #-773]!	; 27f <startup-0x1ffffd81>
 580:	0305200d 	movweq	r2, #20493	; 0x500d
 584:	200d052f 	andcs	r0, sp, pc, lsr #10
 588:	052f0305 	streq	r0, [pc, #-773]!	; 28b <startup-0x1ffffd75>
 58c:	0305200c 	movweq	r2, #20492	; 0x500c
 590:	200d052f 	andcs	r0, sp, pc, lsr #10
 594:	052f0905 	streq	r0, [pc, #-2309]!	; fffffc97 <Player2+0xdfffeb27>
 598:	0402000b 	streq	r0, [r2], #-11
 59c:	15052001 	strne	r2, [r5, #-1]
 5a0:	01040200 	mrseq	r0, R12_usr
 5a4:	0009052e 	andeq	r0, r9, lr, lsr #10
 5a8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5ac:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 5b0:	0105200d 	tsteq	r5, sp
 5b4:	9f17052f 	svcls	0x0017052f
 5b8:	2f2f0205 	svccs	0x002f0205
 5bc:	052f0105 	streq	r0, [pc, #-261]!	; 4bf <startup-0x1ffffb41>
 5c0:	0b053d23 	bleq	14fa54 <startup-0x1feb05ac>
 5c4:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 5c8:	02000305 	andeq	r0, r0, #335544320	; 0x14000000
 5cc:	00210304 	eoreq	r0, r1, r4, lsl #6
 5d0:	2f030402 	svccs	0x00030402
 5d4:	03040200 	movweq	r0, #16896	; 0x4200
 5d8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 5dc:	1b052f03 	blne	14c1f0 <startup-0x1feb3e10>
 5e0:	03040200 	movweq	r0, #16896	; 0x4200
 5e4:	0014052a 	andseq	r0, r4, sl, lsr #10
 5e8:	3c010402 	cfstrscc	mvf0, [r1], {2}
 5ec:	02000205 	andeq	r0, r0, #1342177280	; 0x50000000
 5f0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 5f4:	23054201 	movwcs	r4, #20993	; 0x5201
 5f8:	4c030559 	cfstr32mi	mvfx0, [r3], {89}	; 0x59
 5fc:	05400105 	strbeq	r0, [r0, #-261]	; 0xfffffefb
 600:	0b054d19 	bleq	153a6c <startup-0x1feac594>
 604:	2e02053e 	mcrcs	5, 0, r0, cr2, cr14, {1}
 608:	05210305 	streq	r0, [r1, #-773]!	; 0xfffffcfb
 60c:	06054b10 			; <UNDEFINED> instruction: 0x06054b10
 610:	3d04054a 	cfstr32cc	mvfx0, [r4, #-296]	; 0xfffffed8
 614:	053d1505 	ldreq	r1, [sp, #-1285]!	; 0xfffffafb
 618:	22052e10 	andcs	r2, r5, #16, 28	; 0x100
 61c:	2e190520 	cfmul64cs	mvdx0, mvdx9, mvdx0
 620:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 624:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 628:	02053802 	andeq	r3, r5, #131072	; 0x20000
 62c:	01040200 	mrseq	r0, R12_usr
 630:	0905433c 	stmdbeq	r5, {r2, r3, r4, r5, r8, r9, lr}
 634:	2101053d 	tstcs	r1, sp, lsr r5
 638:	05671b05 	strbeq	r1, [r7, #-2821]!	; 0xfffff4fb
 63c:	0b056702 	bleq	15a24c <startup-0x1fea5db4>
 640:	201b0591 	mulscs	fp, r1, r5
 644:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 648:	1b05210b 	blne	148a7c <startup-0x1feb7584>
 64c:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 650:	05210b05 	streq	r0, [r1, #-2821]!	; 0xfffff4fb
 654:	0305201b 	movweq	r2, #20507	; 0x501b
 658:	210b052e 	tstcs	fp, lr, lsr #10
 65c:	05201b05 	streq	r1, [r0, #-2821]!	; 0xfffff4fb
 660:	0b052e03 	bleq	14be74 <startup-0x1feb418c>
 664:	201b0521 	andscs	r0, fp, r1, lsr #10
 668:	052e0305 	streq	r0, [lr, #-773]!	; 0xfffffcfb
 66c:	16052201 	strne	r2, [r5], -r1, lsl #4
 670:	3e060591 	mcrcc	5, 0, r0, cr6, cr1, {4}
 674:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
 678:	04053d07 	streq	r3, [r5], #-3335	; 0xfffff2f9
 67c:	0015054a 	andseq	r0, r5, sl, asr #10
 680:	20010402 	andcs	r0, r1, r2, lsl #8
 684:	052f0705 	streq	r0, [pc, #-1797]!	; ffffff87 <Player2+0xdfffee17>
 688:	15054a04 	strne	r4, [r5, #-2564]	; 0xfffff5fc
 68c:	01040200 	mrseq	r0, R12_usr
 690:	2f070520 	svccs	0x00070520
 694:	054a0405 	strbeq	r0, [sl, #-1029]	; 0xfffffbfb
 698:	04020015 	streq	r0, [r2], #-21	; 0xffffffeb
 69c:	07052001 	streq	r2, [r5, -r1]
 6a0:	4a04052f 	bmi	101b64 <startup-0x1fefe49c>
 6a4:	02001505 	andeq	r1, r0, #20971520	; 0x1400000
 6a8:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 6ac:	01052f09 	tsteq	r5, r9, lsl #30
 6b0:	671e0521 	ldrvs	r0, [lr, -r1, lsr #10]
 6b4:	05670505 	strbeq	r0, [r7, #-1285]!	; 0xfffffafb
 6b8:	12054b03 	andne	r4, r5, #3072	; 0xc00
 6bc:	31020520 	tstcc	r2, r0, lsr #10
 6c0:	051f2005 	ldreq	r2, [pc, #-5]	; 6c3 <startup-0x1ffff93d>
 6c4:	20052e07 	andcs	r2, r5, r7, lsl #28
 6c8:	2e160520 	cfmul64cs	mvdx0, mvdx6, mvdx0
 6cc:	05210205 	streq	r0, [r1, #-517]!	; 0xfffffdfb
 6d0:	07058516 	smladeq	r5, r6, r5, r8
 6d4:	0009052f 	andeq	r0, r9, pc, lsr #10
 6d8:	20010402 	andcs	r0, r1, r2, lsl #8
 6dc:	02001d05 	andeq	r1, r0, #320	; 0x140
 6e0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 6e4:	04020007 	streq	r0, [r2], #-7
 6e8:	03053c01 	movweq	r3, #23553	; 0x5c01
 6ec:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 6f0:	053d3d3d 	ldreq	r3, [sp, #-3389]!	; 0xfffff2c3
 6f4:	20053d01 	andcs	r3, r5, r1, lsl #26
 6f8:	5906053d 	stmdbpl	r6, {r0, r2, r3, r4, r5, r8, sl}
 6fc:	053d0405 	ldreq	r0, [sp, #-1029]!	; 0xfffffbfb
 700:	17053d0b 	strne	r3, [r5, -fp, lsl #26]
 704:	6602053e 			; <UNDEFINED> instruction: 0x6602053e
 708:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 70c:	07054b27 	streq	r4, [r5, -r7, lsr #22]
 710:	00090567 	andeq	r0, r9, r7, ror #10
 714:	20010402 	andcs	r0, r1, r2, lsl #8
 718:	02001d05 	andeq	r1, r0, #320	; 0x140
 71c:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 720:	04020007 	streq	r0, [r2], #-7
 724:	02053c01 	andeq	r3, r5, #256	; 0x100
 728:	05593d2f 	ldrbeq	r3, [r9, #-3375]	; 0xfffff2d1
 72c:	2b053d01 	blcs	14fb38 <startup-0x1feb04c8>
 730:	6806054c 	stmdavs	r6, {r2, r3, r6, r8, sl}
 734:	4b200405 	blmi	801750 <startup-0x1f7fe8b0>
 738:	05ad0205 	streq	r0, [sp, #517]!	; 0x205
 73c:	01052011 	tsteq	r5, r1, lsl r0
 740:	752d053d 	strvc	r0, [sp, #-1341]!	; 0xfffffac3
 744:	05680605 	strbeq	r0, [r8, #-1541]!	; 0xfffff9fb
 748:	15052004 	strne	r2, [r5, #-4]
 74c:	9e0f054b 	cfsh32ls	mvfx0, mvfx15, #43
 750:	053c0405 	ldreq	r0, [ip, #-1029]!	; 0xfffffbfb
 754:	11052f02 	tstne	r5, r2, lsl #30
 758:	3d010520 	cfstr32cc	mvfx0, [r1, #-128]	; 0xffffff80
 75c:	05682d05 	strbeq	r2, [r8, #-3333]!	; 0xfffff2fb
 760:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
 764:	02052012 	andeq	r2, r5, #18
 768:	01052f3d 	tsteq	r5, sp, lsr pc
 76c:	672c053d 			; <UNDEFINED> instruction: 0x672c053d
 770:	3d670205 	sfmcc	f0, 2, [r7, #-20]!	; 0xffffffec
 774:	5901053d 	stmdbpl	r1, {r0, r2, r3, r4, r5, r8, sl}
 778:	054b2a05 	strbeq	r2, [fp, #-2565]	; 0xfffff5fb
 77c:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
 780:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 784:	02054b2a 	andeq	r4, r5, #43008	; 0xa800
 788:	052f3d3d 	streq	r3, [pc, #-3389]!	; fffffa53 <Player2+0xdfffe8e3>
 78c:	10052f14 	andne	r2, r5, r4, lsl pc
 790:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
 794:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 798:	26052f01 	strcs	r2, [r5], -r1, lsl #30
 79c:	3d020575 	cfstr32cc	mvfx0, [r2, #-468]	; 0xfffffe2c
 7a0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 7a4:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 7a8:	02053d14 	andeq	r3, r5, #20, 26	; 0x500
 7ac:	200f0559 	andcs	r0, pc, r9, asr r5	; <UNPREDICTABLE>
 7b0:	052f0905 	streq	r0, [pc, #-2309]!	; fffffeb3 <Player2+0xdfffed43>
 7b4:	24052f01 	strcs	r2, [r5], #-3841	; 0xfffff0ff
 7b8:	3e02059f 	mcrcc	5, 0, r0, cr2, cr15, {4}
 7bc:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 7c0:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 7c4:	02053d05 	andeq	r3, r5, #320	; 0x140
 7c8:	200f053d 	andcs	r0, pc, sp, lsr r5	; <UNPREDICTABLE>
 7cc:	052f0905 	streq	r0, [pc, #-2309]!	; fffffecf <Player2+0xdfffed5f>
 7d0:	1e052f01 	cdpne	15, 0, cr2, cr5, cr1, {0}
 7d4:	2f0205bb 	svccs	0x000205bb
 7d8:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 7dc:	03053e38 	movweq	r3, #24120	; 0x5e38
 7e0:	670805bb 			; <UNDEFINED> instruction: 0x670805bb
 7e4:	05211a05 	streq	r1, [r1, #-2565]!	; 0xfffff5fb
 7e8:	09053c04 	stmdbeq	r5, {r2, sl, fp, ip, sp}
 7ec:	2e080549 	cfsh32cs	mvfx0, mvfx8, #41
 7f0:	05300505 	ldreq	r0, [r0, #-1285]!	; 0xfffffafb
 7f4:	01054b04 	tsteq	r5, r4, lsl #22
 7f8:	4d14055b 	cfldr32mi	mvfx0, [r4, #-364]	; 0xfffffe94
 7fc:	05350205 	ldreq	r0, [r5, #-517]!	; 0xfffffdfb
 800:	0205200f 	andeq	r2, r5, #15
 804:	200f052f 	andcs	r0, pc, pc, lsr #10
 808:	052f0205 	streq	r0, [pc, #-517]!	; 60b <startup-0x1ffff9f5>
 80c:	02052010 	andeq	r2, r5, #16
 810:	200f053d 	andcs	r0, pc, sp, lsr r5	; <UNPREDICTABLE>
 814:	052f0105 	streq	r0, [pc, #-261]!	; 717 <startup-0x1ffff8e9>
 818:	0e05d735 	mcreq	7, 0, sp, cr5, cr5, {1}
 81c:	05053d68 	streq	r3, [r5, #-3432]	; 0xfffff298
 820:	2e13053e 	mrccs	5, 0, r0, cr3, cr14, {1}
 824:	052f0505 	streq	r0, [pc, #-1285]!	; 327 <startup-0x1ffffcd9>
 828:	05052e13 	streq	r2, [r5, #-3603]	; 0xfffff1ed
 82c:	2e13052f 	cfmul64cs	mvdx0, mvdx3, mvdx15
 830:	052f0505 	streq	r0, [pc, #-1285]!	; 333 <startup-0x1ffffccd>
 834:	03052e13 	movweq	r2, #24083	; 0x5e13
 838:	2e053131 	mcrcs	1, 0, r3, cr5, cr1, {1}
 83c:	2e25052f 	cfsh64cs	mvdx0, mvdx5, #31
 840:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 844:	2505672e 	strcs	r6, [r5, #-1838]	; 0xfffff8d2
 848:	3c03052e 	cfstr32cc	mvfx0, [r3], {46}	; 0x2e
 84c:	05680505 	strbeq	r0, [r8, #-1285]!	; 0xfffffafb
 850:	15052e0c 	strne	r2, [r5, #-3596]	; 0xfffff1f4
 854:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 858:	052f0505 	streq	r0, [pc, #-1285]!	; 35b <startup-0x1ffffca5>
 85c:	15052e0c 	strne	r2, [r5, #-3596]	; 0xfffff1f4
 860:	2e030520 	cfsh32cs	mvfx0, mvfx3, #16
 864:	05310705 	ldreq	r0, [r1, #-1797]!	; 0xfffff8fb
 868:	054b2e03 	strbeq	r2, [fp, #-3587]	; 0xfffff1fd
 86c:	10055901 	andne	r5, r5, r1, lsl #18
 870:	3e0a05ca 	cfsh32cc	mvfx0, mvfx10, #-22
 874:	02052f2f 	andeq	r2, r5, #47, 30	; 0xbc
 878:	2f2f2f30 	svccs	0x002f2f30
 87c:	05680705 	strbeq	r0, [r8, #-1797]!	; 0xfffff8fb
 880:	053d2e03 	ldreq	r2, [sp, #-3587]!	; 0xfffff1fd
 884:	03053d07 	movweq	r3, #23815	; 0x5d07
 888:	20120567 	andscs	r0, r2, r7, ror #10
 88c:	053d0305 	ldreq	r0, [sp, #-773]!	; 0xfffffcfb
 890:	1505c90e 	strne	ip, [r5, #-2318]	; 0xfffff6f2
 894:	2023052e 	eorcs	r0, r3, lr, lsr #10
 898:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 89c:	0e055907 	vmlaeq.f16	s10, s10, s14	; <UNPREDICTABLE>
 8a0:	2017052e 	andscs	r0, r7, lr, lsr #10
 8a4:	2f2e0505 	svccs	0x002e0505
 8a8:	05210e05 	streq	r0, [r1, #-3589]!	; 0xfffff1fb
 8ac:	23052e15 	movwcs	r2, #24085	; 0x5e15
 8b0:	2e0c0520 	cfsh32cs	mvfx0, mvfx12, #16
 8b4:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 8b8:	17052e0e 	strne	r2, [r5, -lr, lsl #28]
 8bc:	2e050520 	cfsh32cs	mvfx0, mvfx5, #16
 8c0:	210e052f 	tstcs	lr, pc, lsr #10
 8c4:	052e1505 	streq	r1, [lr, #-1285]!	; 0xfffffafb
 8c8:	0c052023 	stceq	0, cr2, [r5], {35}	; 0x23
 8cc:	5907052e 	stmdbpl	r7, {r1, r2, r3, r5, r8, sl}
 8d0:	052e0e05 	streq	r0, [lr, #-3589]!	; 0xfffff1fb
 8d4:	05052017 	streq	r2, [r5, #-23]	; 0xffffffe9
 8d8:	0e052f2e 	cdpeq	15, 0, cr2, cr5, cr14, {1}
 8dc:	2e150521 	cfmul64cs	mvdx0, mvdx5, mvdx1
 8e0:	05202305 	streq	r2, [r0, #-773]!	; 0xfffffcfb
 8e4:	07052e0c 	streq	r2, [r5, -ip, lsl #28]
 8e8:	2e0e054b 	cfsh32cs	mvfx0, mvfx14, #43
 8ec:	05201705 	streq	r1, [r0, #-1797]!	; 0xfffff8fb
 8f0:	052f2e05 	streq	r2, [pc, #-3589]!	; fffffaf3 <Player2+0xdfffe983>
 8f4:	05052308 	streq	r2, [r5, #-776]	; 0xfffffcf8
 8f8:	0021052e 	eoreq	r0, r1, lr, lsr #10
 8fc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 900:	02001d05 	andeq	r1, r0, #320	; 0x140
 904:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 908:	4b9f2f09 	blmi	fe7cc534 <Player2+0xde7cb3c4>
 90c:	052e0605 	streq	r0, [lr, #-1541]!	; 0xfffff9fb
 910:	752f2f05 	strvc	r2, [pc, #-3845]!	; fffffa13 <Player2+0xdfffe8a3>
 914:	05850e05 	streq	r0, [r5, #3589]	; 0xe05
 918:	04052e0b 	streq	r2, [r5], #-3595	; 0xfffff1f5
 91c:	05752f2f 	ldrbeq	r2, [r5, #-3887]!	; 0xfffff0d1
 920:	13057609 	movwne	r7, #22025	; 0x5609
 924:	ad070521 	cfstr32ge	mvfx0, [r7, #-132]	; 0xffffff7c
 928:	054b0605 	strbeq	r0, [fp, #-1541]	; 0xfffff9fb
 92c:	0905670e 	stmdbeq	r5, {r1, r2, r3, r8, r9, sl, sp, lr}
 930:	00030538 	andeq	r0, r3, r8, lsr r5
 934:	03010402 	movweq	r0, #5122	; 0x1402
 938:	0f02585f 	svceq	0x0002585f
 93c:	Address 0x0000093c is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
   4:	70007964 	andvc	r7, r0, r4, ror #18
   8:	0078736f 	rsbseq	r7, r8, pc, ror #6
   c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  10:	6f63006c 	svcvs	0x0063006c
  14:	6e6d756c 	cdpvs	5, 6, cr7, cr13, cr12, {3}
  18:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
  1c:	67007865 	strvs	r7, [r0, -r5, ror #16]
  20:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  24:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  28:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  2c:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  30:	72670061 	rsbvc	r0, r7, #97	; 0x61
  34:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  38:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
  3c:	61697469 	cmnvs	r9, r9, ror #8
  40:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
  44:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
  48:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
  4c:	61007972 	tstvs	r0, r2, ror r9
  50:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
  54:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
  58:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
  5c:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
  60:	4e470074 	mcrmi	0, 2, r0, cr7, cr4, {3}
  64:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
  68:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
  6c:	20312e32 	eorscs	r2, r1, r2, lsr lr
  70:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
  74:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
  78:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  7c:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  80:	5b202965 	blpl	80a61c <startup-0x1f7f59e4>
  84:	2f4d5241 	svccs	0x004d5241
  88:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
  8c:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
  90:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  94:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  98:	6f697369 	svcvs	0x00697369
  9c:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
  a0:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
  a4:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
  a8:	616f6c66 	cmnvs	pc, r6, ror #24
  ac:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
  b0:	6f733d69 	svcvs	0x00733d69
  b4:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
  b8:	7568746d 	strbvc	r7, [r8, #-1133]!	; 0xfffffb93
  bc:	2d20626d 	sfmcs	f6, 4, [r0, #-436]!	; 0xfffffe4c
  c0:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
  c4:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
  c8:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
  cc:	672d206d 	strvs	r2, [sp, -sp, rrx]!
  d0:	304f2d20 	subcc	r2, pc, r0, lsr #26
  d4:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
  d8:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
  dc:	68630039 	stmdavs	r3!, {r0, r3, r4, r5}^
  e0:	5f6b6365 	svcpl	0x006b6365
  e4:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  e8:	6c6f635f 	stclvs	3, cr6, [pc], #-380	; ffffff74 <Player2+0xdfffee04>
  ec:	6973696c 	ldmdbvs	r3!, {r2, r3, r5, r6, r8, fp, sp, lr}^
  f0:	73006e6f 	movwvc	r6, #3695	; 0xe6f
  f4:	705f7465 	subsvc	r7, pc, r5, ror #8
  f8:	6d00736f 	stcvs	3, cr7, [r0, #-444]	; 0xfffffe44
  fc:	006e6961 	rsbeq	r6, lr, r1, ror #18
 100:	4c4c4142 	stfmie	f4, [ip], {66}	; 0x42
 104:	69706700 	ldmdbvs	r0!, {r8, r9, sl, sp, lr}^
 108:	7274706f 	rsbsvc	r7, r4, #111	; 0x6f
 10c:	61726700 	cmnvs	r2, r0, lsl #14
 110:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 114:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 118:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 11c:	616d6d6f 	cmnvs	sp, pc, ror #26
 120:	6400646e 	strvs	r6, [r0], #-1134	; 0xfffffb92
 124:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 128:	6b696d5f 	blvs	1a5b6ac <startup-0x1e5a4954>
 12c:	62006f72 	andvs	r6, r0, #456	; 0x1c8
 130:	636e756f 	cmnvs	lr, #465567744	; 0x1bc00000
 134:	675f7265 	ldrbvs	r7, [pc, -r5, ror #4]
 138:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 13c:	00797274 	rsbseq	r7, r9, r4, ror r2
 140:	4f454750 	svcmi	0x00454750
 144:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 148:	61760059 	cmnvs	r6, r9, asr r0
 14c:	0065756c 	rsbeq	r7, r5, ip, ror #10
 150:	70617267 	rsbvc	r7, r1, r7, ror #4
 154:	5f636968 	svcpl	0x00636968
 158:	61656c63 	cmnvs	r5, r3, ror #24
 15c:	63735f72 	cmnvs	r3, #456	; 0x1c8
 160:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 164:	63736100 	cmnvs	r3, #0, 2
 168:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 16c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 170:	7073645f 	rsbsvc	r6, r3, pc, asr r4
 174:	0079616c 	rsbseq	r6, r9, ip, ror #2
 178:	7079746f 	rsbsvc	r7, r9, pc, ror #8
 17c:	75007265 	strvc	r7, [r0, #-613]	; 0xfffffd9b
 180:	38746e69 	ldmdacc	r4!, {r0, r3, r5, r6, r9, sl, fp, sp, lr}^
 184:	6100745f 	tstvs	r0, pc, asr r4
 188:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 18c:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 190:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 194:	00726168 	rsbseq	r6, r2, r8, ror #2
 198:	70617267 	rsbvc	r7, r1, r7, ror #4
 19c:	5f636968 	svcpl	0x00636968
 1a0:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 1a4:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 1a8:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 1ac:	6d007261 	sfmvs	f7, 4, [r0, #-388]	; 0xfffffe7c
 1b0:	5f65766f 	svcpl	0x0065766f
 1b4:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 1b8:	72646900 	rsbvc	r6, r4, #0, 18
 1bc:	6769685f 			; <UNDEFINED> instruction: 0x6769685f
 1c0:	73610068 	cmnvc	r1, #104	; 0x68
 1c4:	5f696963 	svcpl	0x00696963
 1c8:	6f746f67 	svcvs	0x00746f67
 1cc:	6c007978 			; <UNDEFINED> instruction: 0x6c007978
 1d0:	00656e69 	rsbeq	r6, r5, r9, ror #28
 1d4:	5f726469 	svcpl	0x00726469
 1d8:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
 1dc:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
 1e0:	2f3a4300 	svccs	0x003a4300
 1e4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1e8:	61442f73 	hvcvs	17139	; 0x42f3
 1ec:	2f646976 	svccs	0x00646976
 1f0:	6e776f44 	cdpvs	15, 7, cr6, cr7, cr4, {2}
 1f4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xfffff094
 1f8:	61442f73 	hvcvs	17139	; 0x42f3
 1fc:	37313074 			; <UNDEFINED> instruction: 0x37313074
 200:	73616d2d 	cmnvc	r1, #2880	; 0xb40
 204:	20726574 	rsbscs	r6, r2, r4, ror r5
 208:	2f293128 	svccs	0x00293128
 20c:	30746144 	rsbscc	r6, r4, r4, asr #2
 210:	6d2d3731 	stcvs	7, cr3, [sp, #-196]!	; 0xffffff3c
 214:	65747361 	ldrbvs	r7, [r4, #-865]!	; 0xfffffc9f
 218:	4f502f72 	svcmi	0x00502f72
 21c:	702f474e 	eorvc	r4, pc, lr, asr #14
 220:	2e676e6f 	cdpcs	14, 6, cr6, cr7, cr15, {3}
 224:	69730063 	ldmdbvs	r3!, {r0, r1, r5, r6}^
 228:	0058657a 	subseq	r6, r8, sl, ror r5
 22c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 230:	6f700059 	svcvs	0x00700059
 234:	74007973 	strvc	r7, [r0], #-2419	; 0xfffff68d
 238:	79616c50 	stmdbvc	r1!, {r4, r6, sl, fp, sp, lr}^
 23c:	6c007265 	sfmvs	f7, 4, [r0], {101}	; 0x65
 240:	5f746665 	svcpl	0x00746665
 244:	6e756f62 	cdpvs	15, 7, cr6, cr5, cr2, {3}
 248:	00726563 	rsbseq	r6, r2, r3, ror #10
 24c:	6552746f 	ldrbvs	r7, [r2, #-1135]	; 0xfffffb91
 250:	76726573 			; <UNDEFINED> instruction: 0x76726573
 254:	64006465 	strvs	r6, [r0], #-1125	; 0xfffffb9b
 258:	00787269 	rsbseq	r7, r8, r9, ror #4
 25c:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 260:	73415000 	movtvc	r5, #4096	; 0x1000
 264:	00696963 	rsbeq	r6, r9, r3, ror #18
 268:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 26c:	756f625f 	strbvc	r6, [pc, #-607]!	; 15 <startup-0x1fffffeb>
 270:	7265636e 	rsbvc	r6, r5, #-1207959551	; 0xb8000001
 274:	74756200 	ldrbtvc	r6, [r5], #-512	; 0xfffffe00
 278:	006e6f74 	rsbeq	r6, lr, r4, ror pc
 27c:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 280:	63734100 	cmnvs	r3, #0, 2
 284:	754f6969 	strbvc	r6, [pc, #-2409]	; fffff923 <Player2+0xdfffe7b3>
 288:	69725074 	ldmdbvs	r2!, {r2, r4, r5, r6, ip, lr}^
 28c:	6400746e 	strvs	r7, [r0], #-1134	; 0xfffffb92
 290:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 294:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 298:	4100696c 	tstmi	r0, ip, ror #18
 29c:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 2a0:	52657461 	rsbpl	r7, r5, #1627389952	; 0x61000000
 2a4:	7200776f 	andvc	r7, r0, #29097984	; 0x1bc0000
 2a8:	61747365 	cmnvs	r4, r5, ror #6
 2ac:	73007472 	movwvc	r7, #1138	; 0x472
 2b0:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 2b4:	73610078 	cmnvc	r1, #120	; 0x78
 2b8:	5f696963 	svcpl	0x00696963
 2bc:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 2c0:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 2c4:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 2c8:	67007261 	strvs	r7, [r0, -r1, ror #4]
 2cc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2d0:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
 2d4:	5f646165 	svcpl	0x00646165
 2d8:	61746164 	cmnvs	r4, r4, ror #2
 2dc:	736e7500 	cmnvc	lr, #0, 10
 2e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 2e4:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 2e8:	50007261 	andpl	r7, r0, r1, ror #4
 2ec:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 2f0:	50003172 	andpl	r3, r0, r2, ror r1
 2f4:	6579616c 	ldrbvs	r6, [r9, #-364]!	; 0xfffffe94
 2f8:	67003272 	smlsdxvs	r0, r2, r2, r3
 2fc:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 300:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 304:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
 308:	72646900 	rsbvc	r6, r4, #0, 18
 30c:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
 310:	73616d00 	cmnvc	r1, #0, 26
 314:	6977006b 	ldmdbvs	r7!, {r0, r1, r3, r5, r6}^
 318:	67734d6e 	ldrbvs	r4, [r3, -lr, ror #26]!
 31c:	64646100 	strbtvs	r6, [r4], #-256	; 0xffffff00
 320:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 324:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 328:	6a626f5f 	bvs	189c0ac <startup-0x1e763f54>
 32c:	5f746365 	svcpl	0x00746365
 330:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 334:	69750064 	ldmdbvs	r5!, {r2, r5, r6}^
 338:	3233746e 	eorscc	r7, r3, #1845493760	; 0x6e000000
 33c:	6400745f 	strvs	r7, [r0], #-1119	; 0xfffffba1
 340:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 344:	3030355f 	eorscc	r3, r0, pc, asr r5
 348:	6400736e 	strvs	r7, [r0], #-878	; 0xfffffc92
 34c:	5f776172 	svcpl	0x00776172
 350:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 354:	75007463 	strvc	r7, [r0, #-1123]	; 0xfffffb9d
 358:	31746e69 	cmncc	r4, r9, ror #28
 35c:	00745f36 	rsbseq	r5, r4, r6, lsr pc
 360:	6570536f 	ldrbvs	r5, [r0, #-879]!	; 0xfffffc91
 364:	00726465 	rsbseq	r6, r2, r5, ror #8
 368:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 36c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 370:	7661445c 			; <UNDEFINED> instruction: 0x7661445c
 374:	445c6469 	ldrbmi	r6, [ip], #-1129	; 0xfffffb97
 378:	6c6e776f 	stclvs	7, cr7, [lr], #-444	; 0xfffffe44
 37c:	7364616f 	cmnvc	r4, #-1073741797	; 0xc000001b
 380:	7461445c 	strbtvc	r4, [r1], #-1116	; 0xfffffba4
 384:	2d373130 	ldfcss	f3, [r7, #-192]!	; 0xffffff40
 388:	7473616d 	ldrbtvc	r6, [r3], #-365	; 0xfffffe93
 38c:	28207265 	stmdacs	r0!, {r0, r2, r5, r6, r9, ip, sp, lr}
 390:	445c2931 	ldrbmi	r2, [ip], #-2353	; 0xfffff6cf
 394:	31307461 	teqcc	r0, r1, ror #8
 398:	616d2d37 	cmnvs	sp, r7, lsr sp
 39c:	72657473 	rsbvc	r7, r5, #1929379840	; 0x73000000
 3a0:	4e4f505c 	mcrmi	0, 2, r5, cr15, cr12, {2}
 3a4:	50470047 	subpl	r0, r7, r7, asr #32
 3a8:	69004f49 	stmdbvs	r0, {r0, r3, r6, r8, r9, sl, fp, lr}
 3ac:	5f74696e 	svcpl	0x0074696e
 3b0:	00707061 	rsbseq	r7, r0, r1, rrx
 3b4:	64616552 	strbtvs	r6, [r1], #-1362	; 0xfffffaae
 3b8:	756c6f43 	strbvc	r6, [ip, #-3907]!	; 0xfffff0bd
 3bc:	67006e6d 	strvs	r6, [r0, -sp, ror #28]
 3c0:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3c4:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 3c8:	5f6c7274 	svcpl	0x006c7274
 3cc:	5f746962 	svcpl	0x00746962
 3d0:	00746573 	rsbseq	r6, r4, r3, ror r5
 3d4:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 3d8:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 3dc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 3e0:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 3e4:	7400746e 	strvc	r7, [r0], #-1134	; 0xfffffb92
 3e8:	006a624f 	rsbeq	r6, sl, pc, asr #4
 3ec:	68676972 	stmdavs	r7!, {r1, r4, r5, r6, r8, fp, sp, lr}^
 3f0:	6f625f74 	svcvs	0x00625f74
 3f4:	65636e75 	strbvs	r6, [r3, #-3701]!	; 0xfffff18b
 3f8:	756e0072 	strbvc	r0, [lr, #-114]!	; 0xffffff8e
 3fc:	696f506d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, lr}^	; <UNPREDICTABLE>
 400:	0073746e 	rsbseq	r7, r3, lr, ror #8
 404:	70617267 	rsbvc	r7, r1, r7, ror #4
 408:	5f636968 	svcpl	0x00636968
 40c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 410:	63736100 	cmnvs	r3, #0, 2
 414:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 418:	5f646165 	svcpl	0x00646165
 41c:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 420:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 424:	50007265 	andpl	r7, r0, r5, ror #4
 428:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 42c:	6f707400 	svcvs	0x00707400
 430:	00746e69 	rsbseq	r6, r4, r9, ror #28
 434:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 438:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 43c:	5f657469 	svcpl	0x00657469
 440:	61746164 	cmnvs	r4, r4, ror #2
 444:	72646f00 	rsbvc	r6, r4, #0, 30
 448:	776f6c5f 			; <UNDEFINED> instruction: 0x776f6c5f
 44c:	61726400 	cmnvs	r2, r0, lsl #8
 450:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 454:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 458:	00646565 	rsbeq	r6, r4, r5, ror #10
 45c:	70617267 	rsbvc	r7, r1, r7, ror #4
 460:	5f636968 	svcpl	0x00636968
 464:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 468:	6165725f 	cmnvs	r5, pc, asr r2
 46c:	63007964 	movwvs	r7, #2404	; 0x964
 470:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 474:	6a626f5f 	bvs	189c1f8 <startup-0x1e763e08>
 478:	00746365 	rsbseq	r6, r4, r5, ror #6
 47c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 480:	6f65675f 	svcvs	0x0065675f
 484:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 488:	65640079 	strbvs	r0, [r4, #-121]!	; 0xffffff87
 48c:	5f79616c 	svcpl	0x0079616c
 490:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 494:	73610073 	cmnvc	r1, #115	; 0x73
 498:	5f696963 	svcpl	0x00696963
 49c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 4a0:	4d435f65 	stclmi	15, cr5, [r3, #-404]	; 0xfffffe6c
 4a4:	65730044 	ldrbvs	r0, [r3, #-68]!	; 0xffffffbc
 4a8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 4ac:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 4b0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 2e8 <startup-0x1ffffd18>
 4b4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 4b8:	414c5050 	qdaddmi	r5, r0, ip
 4bc:	00524559 	subseq	r4, r2, r9, asr r5
 4c0:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 4c4:	646f0072 	strbtvs	r0, [pc], #-114	; 4cc <startup-0x1ffffb34>
 4c8:	69685f72 	stmdbvs	r8!, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 4cc:	70006867 	andvc	r6, r0, r7, ror #16
 4d0:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 4d4:	73610073 	cmnvc	r1, #115	; 0x73
 4d8:	5f696963 	svcpl	0x00696963
 4dc:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 4e0:	6174735f 	cmnvs	r4, pc, asr r3
 4e4:	00737574 	rsbseq	r7, r3, r4, ror r5
 4e8:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 4ec:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 4f0:	5f657469 	svcpl	0x00657469
 4f4:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 4f8:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4fc:	70007265 	andvc	r7, r0, r5, ror #4
 500:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
 504:	646f6d00 	strbtvs	r6, [pc], #-3328	; 50c <startup-0x1ffffaf4>
 508:	61007265 	tstvs	r0, r5, ror #4
 50c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 510:	6165725f 	cmnvs	r5, pc, asr r2
 514:	61645f64 	cmnvs	r4, r4, ror #30
 518:	53006174 	movwpl	r6, #372	; 0x174
 51c:	6f636765 	svcvs	0x00636765
 520:	00736564 	rsbseq	r6, r3, r4, ror #10
 524:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 528:	6f745f74 	svcvs	0x00745f74
 52c:	6373615f 	cmnvs	r3, #-1073741801	; 0xc0000017
 530:	67006969 	strvs	r6, [r0, -r9, ror #18]
 534:	5f656d61 	svcpl	0x00656d61
 538:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 53c:	61747300 	cmnvs	r4, r0, lsl #6
 540:	70757472 	rsbsvc	r7, r5, r2, ror r4
 544:	424f5000 	submi	r5, pc, #0
 548:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 54c:	74756f00 	ldrbtvc	r6, [r5], #-3840	; 0xfffff100
 550:	67657337 			; <UNDEFINED> instruction: 0x67657337
 554:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 558:	6f740065 	svcvs	0x00740065
 55c:	6f006a62 	svcvs	0x00006a62
 560:	725f7264 	subsvc	r7, pc, #100, 4	; 0x40000006
 564:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 568:	00646576 	rsbeq	r6, r4, r6, ror r5
 56c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 570:	6e695f69 	cdpvs	15, 6, cr5, cr9, cr9, {3}
 574:	6f007469 	svcvs	0x00007469
 578:	74636a62 	strbtvc	r6, [r3], #-2658	; 0xfffff59e
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000050 	andeq	r0, r0, r0, asr r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000060 	andcs	r0, r0, r0, rrx
  4c:	00000050 	andeq	r0, r0, r0, asr r0
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	180e4101 	stmdane	lr, {r0, r8, lr}
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
  6c:	0000005a 	andeq	r0, r0, sl, asr r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	100e4101 	andne	r4, lr, r1, lsl #2
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	00000018 	andeq	r0, r0, r8, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	2000010a 	andcs	r0, r0, sl, lsl #2
  8c:	0000005c 	andeq	r0, r0, ip, asr r0
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	20000166 	andcs	r0, r0, r6, ror #2
  a8:	0000006a 	andeq	r0, r0, sl, rrx
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	100e4101 	andne	r4, lr, r1, lsl #2
  b8:	00070d41 	andeq	r0, r7, r1, asr #26
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200001d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  c8:	00000090 	muleq	r0, r0, r0
  cc:	40080e41 	andmi	r0, r8, r1, asr #28
  d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d4:	180e4101 	stmdane	lr, {r0, r8, lr}
  d8:	00070d41 	andeq	r0, r7, r1, asr #26
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000260 	andcs	r0, r0, r0, ror #4
  e8:	0000002a 	andeq	r0, r0, sl, lsr #32
  ec:	40080e41 	andmi	r0, r8, r1, asr #28
  f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f4:	100e4101 	andne	r4, lr, r1, lsl #2
  f8:	00070d41 	andeq	r0, r7, r1, asr #26
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	2000028a 	andcs	r0, r0, sl, lsl #5
 108:	0000006e 	andeq	r0, r0, lr, rrx
 10c:	40080e41 	andmi	r0, r8, r1, asr #28
 110:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 114:	100e4101 	andne	r4, lr, r1, lsl #2
 118:	00070d41 	andeq	r0, r7, r1, asr #26
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	200002f8 	strdcs	r0, [r0], -r8
 128:	00000040 	andeq	r0, r0, r0, asr #32
 12c:	40080e41 	andmi	r0, r8, r1, asr #28
 130:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 134:	100e4101 	andne	r4, lr, r1, lsl #2
 138:	00070d41 	andeq	r0, r7, r1, asr #26
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	20000338 	andcs	r0, r0, r8, lsr r3
 148:	00000046 	andeq	r0, r0, r6, asr #32
 14c:	40080e41 	andmi	r0, r8, r1, asr #28
 150:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 154:	100e4101 	andne	r4, lr, r1, lsl #2
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	2000037e 	andcs	r0, r0, lr, ror r3
 168:	00000068 	andeq	r0, r0, r8, rrx
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 174:	100e4101 	andne	r4, lr, r1, lsl #2
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	00000024 	andeq	r0, r0, r4, lsr #32
 180:	00000000 	andeq	r0, r0, r0
 184:	200003e6 	andcs	r0, r0, r6, ror #7
 188:	00000192 	muleq	r0, r2, r1
 18c:	40140e41 	andsmi	r0, r4, r1, asr #28
 190:	85400584 	strbhi	r0, [r0, #-1412]	; 0xfffffa7c
 194:	03864004 	orreq	r4, r6, #4
 198:	40028740 	andmi	r8, r2, r0, asr #14
 19c:	0e41018e 	dvfeqd	f0, f1, #0.5
 1a0:	070d4138 	smladxeq	sp, r8, r1, r4
 1a4:	00000020 	andeq	r0, r0, r0, lsr #32
 1a8:	00000000 	andeq	r0, r0, r0
 1ac:	20000578 	andcs	r0, r0, r8, ror r5
 1b0:	000001bc 			; <UNDEFINED> instruction: 0x000001bc
 1b4:	400c0e41 	andmi	r0, ip, r1, asr #28
 1b8:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1bc:	018e4002 	orreq	r4, lr, r2
 1c0:	41180e41 	tstmi	r8, r1, asr #28
 1c4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1c8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	20000734 	andcs	r0, r0, r4, lsr r7
 1d4:	00000020 	andeq	r0, r0, r0, lsr #32
 1d8:	40080e41 	andmi	r0, r8, r1, asr #28
 1dc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1e0:	180e4101 	stmdane	lr, {r0, r8, lr}
 1e4:	00070d41 	andeq	r0, r7, r1, asr #26
 1e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1ec:	00000000 	andeq	r0, r0, r0
 1f0:	20000754 	andcs	r0, r0, r4, asr r7
 1f4:	00000058 	andeq	r0, r0, r8, asr r0
 1f8:	40080e41 	andmi	r0, r8, r1, asr #28
 1fc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 200:	180e4101 	stmdane	lr, {r0, r8, lr}
 204:	00070d41 	andeq	r0, r7, r1, asr #26
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	00000000 	andeq	r0, r0, r0
 210:	200007ac 	andcs	r0, r0, ip, lsr #15
 214:	00000058 	andeq	r0, r0, r8, asr r0
 218:	40080e41 	andmi	r0, r8, r1, asr #28
 21c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 220:	180e4101 	stmdane	lr, {r0, r8, lr}
 224:	00070d41 	andeq	r0, r7, r1, asr #26
 228:	0000001c 	andeq	r0, r0, ip, lsl r0
 22c:	00000000 	andeq	r0, r0, r0
 230:	20000804 	andcs	r0, r0, r4, lsl #16
 234:	00000020 	andeq	r0, r0, r0, lsr #32
 238:	40080e41 	andmi	r0, r8, r1, asr #28
 23c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 240:	180e4101 	stmdane	lr, {r0, r8, lr}
 244:	00070d41 	andeq	r0, r7, r1, asr #26
 248:	0000001c 	andeq	r0, r0, ip, lsl r0
 24c:	00000000 	andeq	r0, r0, r0
 250:	20000824 	andcs	r0, r0, r4, lsr #16
 254:	00000046 	andeq	r0, r0, r6, asr #32
 258:	40080e41 	andmi	r0, r8, r1, asr #28
 25c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 260:	100e4101 	andne	r4, lr, r1, lsl #2
 264:	00070d41 	andeq	r0, r7, r1, asr #26
 268:	0000001c 	andeq	r0, r0, ip, lsl r0
 26c:	00000000 	andeq	r0, r0, r0
 270:	2000086a 	andcs	r0, r0, sl, ror #16
 274:	0000006e 	andeq	r0, r0, lr, rrx
 278:	40080e41 	andmi	r0, r8, r1, asr #28
 27c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 280:	100e4101 	andne	r4, lr, r1, lsl #2
 284:	00070d41 	andeq	r0, r7, r1, asr #26
 288:	00000018 	andeq	r0, r0, r8, lsl r0
 28c:	00000000 	andeq	r0, r0, r0
 290:	200008d8 	ldrdcs	r0, [r0], -r8
 294:	00000044 	andeq	r0, r0, r4, asr #32
 298:	40080e41 	andmi	r0, r8, r1, asr #28
 29c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2a4:	00000018 	andeq	r0, r0, r8, lsl r0
 2a8:	00000000 	andeq	r0, r0, r0
 2ac:	2000091c 	andcs	r0, r0, ip, lsl r9
 2b0:	00000012 	andeq	r0, r0, r2, lsl r0
 2b4:	40080e41 	andmi	r0, r8, r1, asr #28
 2b8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2bc:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2c4:	00000000 	andeq	r0, r0, r0
 2c8:	2000092e 	andcs	r0, r0, lr, lsr #18
 2cc:	00000036 	andeq	r0, r0, r6, lsr r0
 2d0:	40080e41 	andmi	r0, r8, r1, asr #28
 2d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d8:	180e4101 	stmdane	lr, {r0, r8, lr}
 2dc:	00070d41 	andeq	r0, r7, r1, asr #26
 2e0:	0000001c 	andeq	r0, r0, ip, lsl r0
 2e4:	00000000 	andeq	r0, r0, r0
 2e8:	20000964 	andcs	r0, r0, r4, ror #18
 2ec:	00000016 	andeq	r0, r0, r6, lsl r0
 2f0:	40080e41 	andmi	r0, r8, r1, asr #28
 2f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2f8:	100e4101 	andne	r4, lr, r1, lsl #2
 2fc:	00070d41 	andeq	r0, r7, r1, asr #26
 300:	0000001c 	andeq	r0, r0, ip, lsl r0
 304:	00000000 	andeq	r0, r0, r0
 308:	2000097a 	andcs	r0, r0, sl, ror r9
 30c:	0000005a 	andeq	r0, r0, sl, asr r0
 310:	40080e41 	andmi	r0, r8, r1, asr #28
 314:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 318:	100e4101 	andne	r4, lr, r1, lsl #2
 31c:	00070d41 	andeq	r0, r7, r1, asr #26
 320:	0000001c 	andeq	r0, r0, ip, lsl r0
 324:	00000000 	andeq	r0, r0, r0
 328:	200009d4 	ldrdcs	r0, [r0], -r4
 32c:	00000058 	andeq	r0, r0, r8, asr r0
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	100e4101 	andne	r4, lr, r1, lsl #2
 33c:	00070d41 	andeq	r0, r7, r1, asr #26
 340:	0000001c 	andeq	r0, r0, ip, lsl r0
 344:	00000000 	andeq	r0, r0, r0
 348:	20000a2c 	andcs	r0, r0, ip, lsr #20
 34c:	00000054 	andeq	r0, r0, r4, asr r0
 350:	40080e41 	andmi	r0, r8, r1, asr #28
 354:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 358:	100e4101 	andne	r4, lr, r1, lsl #2
 35c:	00070d41 	andeq	r0, r7, r1, asr #26
 360:	0000001c 	andeq	r0, r0, ip, lsl r0
 364:	00000000 	andeq	r0, r0, r0
 368:	20000a80 	andcs	r0, r0, r0, lsl #21
 36c:	00000038 	andeq	r0, r0, r8, lsr r0
 370:	40080e41 	andmi	r0, r8, r1, asr #28
 374:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 378:	100e4101 	andne	r4, lr, r1, lsl #2
 37c:	00070d41 	andeq	r0, r7, r1, asr #26
 380:	00000018 	andeq	r0, r0, r8, lsl r0
 384:	00000000 	andeq	r0, r0, r0
 388:	20000ab8 			; <UNDEFINED> instruction: 0x20000ab8
 38c:	00000046 	andeq	r0, r0, r6, asr #32
 390:	40080e41 	andmi	r0, r8, r1, asr #28
 394:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 398:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	20000afe 	strdcs	r0, [r0], -lr
 3a8:	00000038 	andeq	r0, r0, r8, lsr r0
 3ac:	40080e41 	andmi	r0, r8, r1, asr #28
 3b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3b4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3b8:	00070d41 	andeq	r0, r7, r1, asr #26
 3bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	20000b36 	andcs	r0, r0, r6, lsr fp
 3c8:	0000003c 	andeq	r0, r0, ip, lsr r0
 3cc:	40080e41 	andmi	r0, r8, r1, asr #28
 3d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3d4:	100e4101 	andne	r4, lr, r1, lsl #2
 3d8:	00070d41 	andeq	r0, r7, r1, asr #26
 3dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	20000b72 	andcs	r0, r0, r2, ror fp
 3e8:	00000042 	andeq	r0, r0, r2, asr #32
 3ec:	40080e41 	andmi	r0, r8, r1, asr #28
 3f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 3f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 3f8:	00070d41 	andeq	r0, r7, r1, asr #26
 3fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 400:	00000000 	andeq	r0, r0, r0
 404:	20000bb4 			; <UNDEFINED> instruction: 0x20000bb4
 408:	00000048 	andeq	r0, r0, r8, asr #32
 40c:	40080e41 	andmi	r0, r8, r1, asr #28
 410:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 414:	180e4101 	stmdane	lr, {r0, r8, lr}
 418:	00070d41 	andeq	r0, r7, r1, asr #26
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	00000000 	andeq	r0, r0, r0
 424:	20000bfc 	strdcs	r0, [r0], -ip
 428:	00000030 	andeq	r0, r0, r0, lsr r0
 42c:	40080e41 	andmi	r0, r8, r1, asr #28
 430:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 434:	100e4101 	andne	r4, lr, r1, lsl #2
 438:	00070d41 	andeq	r0, r7, r1, asr #26
 43c:	0000001c 	andeq	r0, r0, ip, lsl r0
 440:	00000000 	andeq	r0, r0, r0
 444:	20000c2c 	andcs	r0, r0, ip, lsr #24
 448:	0000002a 	andeq	r0, r0, sl, lsr #32
 44c:	40080e41 	andmi	r0, r8, r1, asr #28
 450:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 454:	100e4101 	andne	r4, lr, r1, lsl #2
 458:	00070d41 	andeq	r0, r7, r1, asr #26
 45c:	0000001c 	andeq	r0, r0, ip, lsl r0
 460:	00000000 	andeq	r0, r0, r0
 464:	20000c56 	andcs	r0, r0, r6, asr ip
 468:	0000002a 	andeq	r0, r0, sl, lsr #32
 46c:	40080e41 	andmi	r0, r8, r1, asr #28
 470:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 474:	100e4101 	andne	r4, lr, r1, lsl #2
 478:	00070d41 	andeq	r0, r7, r1, asr #26
 47c:	0000001c 	andeq	r0, r0, ip, lsl r0
 480:	00000000 	andeq	r0, r0, r0
 484:	20000c80 	andcs	r0, r0, r0, lsl #25
 488:	00000034 	andeq	r0, r0, r4, lsr r0
 48c:	40080e41 	andmi	r0, r8, r1, asr #28
 490:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 494:	100e4101 	andne	r4, lr, r1, lsl #2
 498:	00070d41 	andeq	r0, r7, r1, asr #26
 49c:	00000020 	andeq	r0, r0, r0, lsr #32
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	20000cb4 			; <UNDEFINED> instruction: 0x20000cb4
 4a8:	00000040 	andeq	r0, r0, r0, asr #32
 4ac:	400c0e41 	andmi	r0, ip, r1, asr #28
 4b0:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 4b4:	018e4002 	orreq	r4, lr, r2
 4b8:	41180e41 	tstmi	r8, r1, asr #28
 4bc:	0000070d 	andeq	r0, r0, sp, lsl #14
 4c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4c4:	00000000 	andeq	r0, r0, r0
 4c8:	20000cf4 	strdcs	r0, [r0], -r4
 4cc:	00000040 	andeq	r0, r0, r0, asr #32
 4d0:	40080e41 	andmi	r0, r8, r1, asr #28
 4d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4d8:	100e4101 	andne	r4, lr, r1, lsl #2
 4dc:	00070d41 	andeq	r0, r7, r1, asr #26
 4e0:	00000018 	andeq	r0, r0, r8, lsl r0
 4e4:	00000000 	andeq	r0, r0, r0
 4e8:	20000d34 	andcs	r0, r0, r4, lsr sp
 4ec:	00000010 	andeq	r0, r0, r0, lsl r0
 4f0:	40080e41 	andmi	r0, r8, r1, asr #28
 4f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 4f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 4fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 500:	00000000 	andeq	r0, r0, r0
 504:	20000d44 	andcs	r0, r0, r4, asr #26
 508:	00000056 	andeq	r0, r0, r6, asr r0
 50c:	40080e41 	andmi	r0, r8, r1, asr #28
 510:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 514:	100e4101 	andne	r4, lr, r1, lsl #2
 518:	00070d41 	andeq	r0, r7, r1, asr #26
 51c:	00000018 	andeq	r0, r0, r8, lsl r0
 520:	00000000 	andeq	r0, r0, r0
 524:	20000d9a 	mulcs	r0, sl, sp
 528:	0000003a 	andeq	r0, r0, sl, lsr r0
 52c:	40080e41 	andmi	r0, r8, r1, asr #28
 530:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 534:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 538:	0000001c 	andeq	r0, r0, ip, lsl r0
 53c:	00000000 	andeq	r0, r0, r0
 540:	20000dd4 	ldrdcs	r0, [r0], -r4
 544:	000000b8 	strheq	r0, [r0], -r8
 548:	40080e41 	andmi	r0, r8, r1, asr #28
 54c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 550:	180e4101 	stmdane	lr, {r0, r8, lr}
 554:	00070d41 	andeq	r0, r7, r1, asr #26
 558:	00000024 	andeq	r0, r0, r4, lsr #32
 55c:	00000000 	andeq	r0, r0, r0
 560:	20000e8c 	andcs	r0, r0, ip, lsl #29
 564:	000001cc 	andeq	r0, r0, ip, asr #3
 568:	40100e41 	andsmi	r0, r0, r1, asr #28
 56c:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 570:	02874003 	addeq	r4, r7, #3
 574:	41018e40 	tstmi	r1, r0, asr #28
 578:	0d41380e 	stcleq	8, cr3, [r1, #-56]	; 0xffffffc8
 57c:	00000007 	andeq	r0, r0, r7
